
public JSONObject runWorkflowEndpointB(Object dataIn, InoutLogger logger) throws Exception {
    List list = (List)dataIn;

    // Percorre a lista de objetos
    for (int i=0; i<list.size(); i++) {

        // Obtem objeto de FilaInout
        FilaInout filaInout = (FilaInout)list.get(i);
        String msg = filaInout.getMessage();
        JSONObject record = new JSONObject(msg);
        try {

        } catch (Exception e) {
            filaInout.setStatusCode(InoutConstants.STATUS_TRANSFORMATION_ERROR);
            filaInout.setStatusDesc(e.getMessage());
            logger.logError(e);
        }
    }
    return new JSONObject();
}

/////////////////////////////////////////////////////////////////////////////////
////////////////////  ////   WORKFLOW (Endpoint A)    ////  /////////////////////
/////////////////////////////////////////////////////////////////////////////////
public JSONArray runWorkflowEspecificoEndpointA(InoutLogger logger) throws Exception {
    JSONArray records    = new JSONArray();
    SysProperties props  = SysProperties.getInstance();
    SysProperties props2 = SysProperties.getInstance();
	ConnectorConfig config = new ConnectorConfig();
 	config.setUsername("fabrica@ottimizza.com.br");
	config.setPassword("ottimizza@123HU4ssqt1HCiLyCzj6QStgteM2");
	config.setTraceMessage(false);
	logger.logInfo("API SALES SHR: runWorkflowEspecificoEndpointA workflow3 1");

    String servDinamic = "";
	try{
		servDinamic = buscaServidor(logger).toLowerCase();
		if(servDinamic.equals("")) servDinamic = "zeus";
	}catch(Exception e){
		logger.logInfo("ERRO AO BUSCAR - "+e.getMessage());
        servDinamic = "zeus";
	}
	//config.setUsername("adm@ottimizza.com.br");
	//config.setPassword("oic@3333222YXZRHYLH8cxrchPu0rjyGH1j8");
	//config.setTraceMessage(true);
	
    try {
		String contabilidade = getNomeContabilidadeWorkflow();
        String dirName = RouteEngine.INOUT_HOME + "/contabil/" + getNomeContabilidadeWorkflow() + "/";
        File file = new File(dirName);
        String[] rotasLO = file.list();

        String arquivoGrande = "";
        String jSdir = "";
        boolean rotasOk = false;
        String filename = "";
        String filenameCanal = "";
        String extensaoSuportada = ".csv.xlsx.txt.ofx.dat.pdf.prn.ofc.omc.html.ret";
        String sendToName       = getNomeContabilidadeWorkflow() + " -- OTTIMIZZA Contabil";
        double sizeLimit = 4;               //tamanho maximo processavel                        //-
        sizeLimit = sizeLimit * (Math.pow(1024,2)); //MiB                                       //-
 
        String extensaoArquivo  = "";

        // Carrega as propriedades
        props.load("contabil/" + getNomeContabilidadeWorkflow() + "/contabil.properties");
        props2.load("contabil/" + getNomeContabilidadeWorkflow() + "/empresa.properties");

        String oicContabil  = props.get("OIC_LIBERADO");
        String emailCanal   = props.get("EMAIL_CANAL");
        String codigoCanal  = props.get("CODIGO_CANAL");
		String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
	    String versaoOtzWebApp = "02_Conecta_Via_Portal_Ottimizza";
		String fornecedorUnico = props.get("FORNECEDOR_UNICO");


        String emailOic     = emailCanal;
        String subject      = "";
        String empresa      = "";
        String operacao     = "";

        /*String horaWorkflow = DateUtil.dateToString(new Date(), "HHmm");
        String logWorkflow  = RouteEngine.INOUT_HOME +  "/logs/workflow/" + getNomeContabilidadeWorkflow() + ".log";
        FileWriter writerWorkflow = new FileWriter(logWorkflow);
        StringBuilder txtWorkflow = new StringBuilder();
        txtWorkflow.append(horaWorkflow);
        writerWorkflow.writeNewFile(txtWorkflow.toString());
		*/
		
		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM log da ultima contabilidade que foi rodada.
		//-------------------------------------------------------------------------------------
		String fileLog = "/inout/logs/workflow/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "_ultimaRota.csv";
		Date ultimoLog = new Date();

		String conteudo = contabilidade + ";" + ultimoLog.getTime();

		FileWriter writerLog = new FileWriter(fileLog);
		writerLog.writeNewFile(conteudo.toString());
		
		postStatus(servDinamic.toUpperCase(), contabilidade, "Ocioso", "Nada Pendente", "Sem Arquivo Para Processar", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")));
  
 
        // verifica se a empresa existe no diretorio /inout/contabil/contabilidade
		// se nao existir, forca criacao da mesma
		String diretorioDestino = RouteEngine.INOUT_HOME + "/Contabil/Ottimizza/AtualizaProperties/";
 		File diretorioDestinoFile = new File(diretorioDestino);
  		if (diretorioDestinoFile.exists()) {
 			File fileProperties = new File(diretorioDestino);
			String[] listaProperties = fileProperties.list();
  			if (listaProperties.length > 1) {
				
				// vamos rodar apenas quando processar futuro, assim nao ocorre o risco de rodarmos 2 conatbilidade
		     	// ao mesmo tempo
				
				if (contabilidade.toUpperCase().contains("FUTURO")) {
					RouteEngine.execRoute("Ottimizza.Atualiza_Properties");
					logger.logInfo("Forcando Crar empresa na Contabilidade " + contabilidade);
				}
			}
		}
		
	
        if (codigoCanal == null) codigoCanal = "Admin";

        if (rotasLO != null) {

            for (String nome : rotasLO) {

                try {

                    if (nome.contains("_#")) {
                        empresa = nome.substring(0,nome.indexOf("_#")).toUpperCase();
						
						 
                        String emailResponsavel = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EMAIL_RESPONSAVEL");
                        String oicEmpresa = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_LIBERA_OIC");
						
                        //-------------------------------------------------------------------------------------
						// GERA ARQUIVO COM log da ultima contabilidade que foi rodada.
						//-------------------------------------------------------------------------------------
						ultimoLog = new Date();

						conteudo = contabilidade + "_" + nome + ";" + ultimoLog.getTime();

						// caso outra rota esteja travando o arquivo 
						for (int xxx = 0;xxx < 30000;xxx++) {
							try{
								writerLog = new FileWriter(fileLog);
								writerLog.writeNewFile(conteudo.toString());
								break;
							} catch (Exception xx) {}
						}
						
                        ///////////////////////////////////////////////////////////
                        // DEPARA /////////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////
                        operacao = "DePara";
						String diretorio = dirName + nome + "/DePara";
						File file2 = new File(diretorio);
                        File [] files = file2.listFiles();
                        try {
                            if (FileUtil.dirHasFiles(diretorio)) {
                                for (File fileDePara: files) {

                                    if(fileDePara.length() < sizeLimit || !fileDePara.getName().toUpperCase().endsWith(".XLSX")){

                                        if (fileDePara.isFile()){
                                            //DE PARA
                                            if(fileDePara.getName().startsWith("OK_DePara") && fileDePara.getName().toLowerCase().endsWith(".csv")){
												
 
                                                String rotaDePara = contabilidade+"DePara" + ".AtualizaPendenciasIOMovimento";
												if (versaoPlataforma.equals(versaoOtzWebApp)) {
													rotaDePara = "Ottimizza.AtualizaPendenciasIOMovimento";
													 
													File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/AtualizaPendenciaIOMovimento/Atualiza_%s.txt", RouteEngine.INOUT_HOME, nome));

													// Criar diretorio ottimizza/AtualizaPendenciaIOMovimento se n?o existe.
													if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

													if (!txtImportaPlanoContas.exists()) {
														try {
															String txtIPCContent = "";

															txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
															txtIPCContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
															txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));

															// Escrever texto no arquivo
															FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
															writerDePara.writeNewFile(txtIPCContent);
														} catch(Exception createFileException) {
															logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
														}
													} else {
														logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
													}
												}
 
                                                RouteEngine.execRoute(rotaDePara);
												
												// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
												// move arquivo para pata processado para nao ficar em loop
												File fileDepoisLista = new File(diretorio);
												File [] filesDepois = fileDepoisLista.listFiles();
												for (File fileDePoisComparar: filesDepois) {
													if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
														String moveFilename = fileDePara.getAbsolutePath();
														moveFilename = moveFilename.replaceAll("\\\\", "/");
														FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
													}
												}
                                                rotasOk = true;

											}

											//participante
											if (fileDePara.getName().toUpperCase().contains("PARTICIPANTE") &&
												(fileDePara.getName().toUpperCase().endsWith(".CSV") )){
												File ImportaParticipante = new File(String.format("%s/contabil/Ottimizza/ImportaParticipante/Participante_%s.txt", RouteEngine.INOUT_HOME, nome));
												// Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
												if (!ImportaParticipante.getParentFile().exists()) ImportaParticipante.getParentFile().mkdirs();

												if (!ImportaParticipante.exists()) {
													try {
														if (ImportaParticipante.createNewFile()) {
															// String com conteudos do Arquivo '.txt' com os dados para importacao
															// do Plano de Contas da Empresa.
															String txtIPContent = "";
															txtIPContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
															txtIPContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
															txtIPContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));
															// Escrever texto no arquivo
															FileWriter writerDePara = new FileWriter(ImportaParticipante.getAbsolutePath());
															writerDePara.writeNewFile(txtIPContent);
														} else {
															logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", ImportaParticipante.getAbsolutePath()));
														}
													} catch(Exception createFileException) {
														logger.logError(String.format("Error trying to create file '%s'!", ImportaParticipante.getAbsolutePath()), createFileException);
													}
												} else {
													logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", ImportaParticipante.getAbsolutePath()));
												}
												String rotaImportaPlano = "Ottimizza.ImportaParticipante";
												RouteEngine.execRoute(rotaImportaPlano);// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
												// move arquivo para pata processado para nao ficar em loop
												File fileDepoisLista = new File(diretorio);
												File [] filesDepois = fileDepoisLista.listFiles();
												for (File fileDePoisComparar: filesDepois) {
													if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
														String moveFilename = fileDePara.getAbsolutePath();
														moveFilename = moveFilename.replaceAll("\\\\", "/");
														FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
													}
												}
											}
											//PLANO CONTAS
											
											// logger.logInfo("LENDO FILEDEPARA = " + fileDePara.getName().toUpperCase() + " CONT == "+contabilidade);
											
											 if (!fileDePara.getName().toUpperCase().contains("PARTICIPANTE") && 
												fileDePara.getName().toUpperCase().contains("PLANO") &&
												((fileDePara.getName().toUpperCase().startsWith("PLANO DE CONTA") && fileDePara.getName().toUpperCase().endsWith(".CSV")) || 
												 (fileDePara.getName().toUpperCase().contains("PLANO_CONTAS_QUESTOR") && fileDePara.getName().toUpperCase().endsWith(".CSV")) || 
												 fileDePara.getName().toUpperCase().endsWith(".XLSX") || fileDePara.getName().toUpperCase().endsWith(".LST") || fileDePara.getName().toUpperCase().endsWith(".TXT") || fileDePara.getName().toUpperCase().endsWith(".PDF"))) {                    
												File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/PlanoContas_%s.txt", RouteEngine.INOUT_HOME, nome));

												// Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
												if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

												// QUANDO FOR CSV, joga em pasta /inout/contabil/ottimizza/planocontas para poder importar
												// sem dar conflito com os .csv de depara. 
												if (fileDePara.getName().toUpperCase().endsWith(".CSV") || fileDePara.getName().toUpperCase().endsWith(".PDF")) {
													filename = fileDePara.getAbsolutePath();
													filename = filename.replaceAll("\\\\", "/");

													if (!FileUtil.fileExists(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade))) {
														FileUtil.mkDir(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade));
													}

													
													 FileUtil.moveToDir(filename, String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade));

												}
                                                if (!txtImportaPlanoContas.exists()) {
                                                    try {
                                                        if (txtImportaPlanoContas.createNewFile()) {
                                                            // String com conteudos do Arquivo '.txt' com os dados para importacao
                                                            // do Plano de Contas da Empresa.
                                                            String txtIPCContent = "";

                                                            txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                                                            txtIPCContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
                                                            txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));

                                                            // Escrever texto no arquivo
                                                            FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
                                                            writerDePara.writeNewFile(txtIPCContent);
                                                        } else {
                                                            logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                        }
                                                    } catch(Exception createFileException) {
                                                        logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
                                                    }
                                                } else {
                                                    logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                }
                                                String rotaImportaPlano = "Ottimizza.ImportaPlanoContas";
                                                RouteEngine.execRoute(rotaImportaPlano);
												
												// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
												// move arquivo para pata processado para nao ficar em loop
												File fileDepoisLista = new File(diretorio);
												File [] filesDepois = fileDepoisLista.listFiles();
												for (File fileDePoisComparar: filesDepois) {
													if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
														String moveFilename = fileDePara.getAbsolutePath();
														moveFilename = moveFilename.replaceAll("\\\\", "/");
														FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
													}
												}
												
                                            }
                                        }
                                    }else{                  // envia email e move pra processado

                                        subject = "ARQUIVO GRANDE ("+fileDePara.length()/1024/1024+" MiB) -" + getNomeContabilidadeWorkflow() + "-" + empresa + "-" + operacao;
                                        StringBuilder msg = new StringBuilder();
                                        msg.append("<html>\n");
                                        msg.append("<head>\n");
                                        msg.append("</head>\n");
                                        msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
                                        msg.append("<p><font style=\"font-size: 10pt\">to big, max size (" + sizeLimit/1024/1024 + " MiB).</font></p>\n");
                                        msg.append("</body>\n");
                                        msg.append("</html>\n");

                                        //enviaEmail(subject, "suporte@ottimizza.com.br", "TAMANHO ARQUIVO", msg.toString(), null, logger);

                                        filename = fileDePara.getAbsolutePath();
                                        filename = filename.replaceAll("\\\\", "/");
                                        FileUtil.moveToDir(filename, diretorio + "/Processado");
										
										if (filename.contains("_ID")) {
											LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
											// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
											String protocolo_id = cutString(filename.toUpperCase(), "_ID", "_");
											
											String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
											
											atualizaProtocolo("", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
										}
                                    }
                                }
                            }
                        } catch (Exception deParaException) {
                            logger.logError("Erro executando DePara " + diretorio, deParaException);
                        }
						
						//Conversor
						diretorio = "C:/Conversor/Excel";
						file2 = new File(diretorio);
						
						files = file2.listFiles();


                        if (FileUtil.dirHasFiles(diretorio)) {
							for (File fl: files) {
								if (fl.getAbsolutePath().contains("aba[") && (fl.getAbsolutePath().toUpperCase().contains("PAGAR") || fl.getAbsolutePath().toUpperCase().contains("RECEBER")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
									String diretorioArquivoCsv = "C:/inout/contabil/";
									String testeCsv = "";
									String abaCsv = "";
									String contabilidadeCsv = "";
									String empresaCsv = "";
									
									if (fl.getAbsolutePath().toUpperCase().contains("MICALI") || fl.getAbsolutePath().toUpperCase().contains("MARLIAN")) continue;
									
									long time1 = fl.lastModified();
									double timeDouble = (double) time1;
									
									double times = (System.currentTimeMillis() - timeDouble) / 1000;
									
									// int longTime1 = time1.intValue();
									// logger.logInfo("ULTIMA MODIFICACAO " + fl.getAbsolutePath() + " | " + time1 + " | " + System.currentTimeMillis());
									// logger.logInfo("ULTIMA MODIFICACAOTEMPOS " + times);
					
									if (times > 10) {
										if (fl.getAbsolutePath().contains("_pagar_")) {
											try {
												abaCsv = cutString(fl.getAbsolutePath(),"aba[","_pagar_");
												testeCsv = cutString(fl.getAbsolutePath(), "_pagar_");
												contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
												empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
												empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
												diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
											} catch (Exception e) {
												logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
											}
										}
										else if (fl.getAbsolutePath().contains("_receber_")) {
											try {
												abaCsv = cutString(fl.getAbsolutePath(),"aba[","_receber_");
												testeCsv = cutString(fl.getAbsolutePath(), "_receber_");
												contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
												empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
												empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
												diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
											} catch (Exception e) {
												logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
											}
										}
										String arquivoDeployStr = "";
										try {
											arquivoDeployStr = "aba_"+abaCsv.replace("[","").replace("]","")+"_"+fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
											//arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
										} catch (Exception e) {
											logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
										}
													
										if (!arquivoDeployStr.equals("")) {
											File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
											FileUtil.copyFolder(fl, arquivoDeploy);
										
											try { 
												FileUtil.deleteFile(fl);
											} catch (Exception XX) {}
										}
									}
									continue;
								}
							}
						}
						
                        ///////////////////////////////////////////////////////////
                        // APAGAR /////////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////
                        operacao = "APagar";
                        diretorio = dirName + nome + "/"+ operacao;
                        file2 = new File(diretorio);


						// renomeia arquivos com extens?o .XLSX
                        File []  arquivosCaixaAlta = file2.listFiles();
                        if (FileUtil.dirHasFiles(diretorio)) { 

                            for (File fl: arquivosCaixaAlta) {

                                if(fl.length() < sizeLimit || !fl.getName().toUpperCase().endsWith(".XLSX")){
								// if(fl.length() < sizeLimit) {                    // processar apenas arquivos MENORES que o limite
                                    try {
										String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").toLowerCase();
										if (fl.getAbsolutePath().contains(".XLSX")) {

											File fileDestino = new File(arquivoDestino);
											FileUtil.copyFolder(fl, fileDestino);
											FileUtil.deleteFile(fl);
										}
									}
									catch (Exception xx) {}
								}
								
								if(fl.getName().toUpperCase().contains("..")){
									try {
										String arquivoExtensaoCorreta = fl.getAbsolutePath().replaceAll("\\..","\\.");
										// if (fl.getAbsolutePath().contains(".XLSX")) {

											File fileDestino = new File(arquivoExtensaoCorreta);
											FileUtil.copyFolder(fl, fileDestino);
											FileUtil.deleteFile(fl);
										//}
									}
									catch (Exception xx) {}
								}
							}
						}


						// FINAL renomeia arquivos com extens?o .XLSX


                        files = file2.listFiles();


                        if (FileUtil.dirHasFiles(diretorio)) {

 							
							postStatus(servDinamic.toUpperCase(), contabilidade, "Processando", nome.substring(0,nome.indexOf("_#")), "PAGAR", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")));

							for (File fl: files) {
								
								String rodaConversor = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EQUIPE_FECHAMENTO");
								
								// logger.logInfo("RCC " + rodaConversor + " | " + fl.getAbsolutePath().toUpperCase());
								//Conversor
								if (rodaConversor != null) {
									if (rodaConversor.contains(",") && rodaConversor.toUpperCase().contains("CONVERTE") && !fl.getAbsolutePath().toUpperCase().contains(".CSV")
										&& fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
											
										if (fl.getAbsolutePath().toUpperCase().contains(".XLSX") && rodaConversor.contains("XLSX")) {
											File arquivoDeploy  = new File("C:/Conversor/Excel/" + "pagar_" + contabilidade + "_" + nome + "_ancora_" + cutString(fl.getAbsolutePath(), fl.getAbsolutePath().replaceAll("\\\\", "/").lastIndexOf("/")+1));
											
											try { FileUtil.copyFolder(fl, arquivoDeploy);}
											catch (Exception e) {logger.logInfo("ERRO COPIANDO " + e.getMessage());}
											
											try {
												FileUtil.deleteFile(fl);
											} catch (Exception XX) {} 
												
											continue;
										}
									}
								}
							
								if (fl.getAbsolutePath().toUpperCase().contains("ROTA.TXT")) {
												
									File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
									File arquivoPortal  = new File(RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/arquivos/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpoint.script_APAGAR.txt");
									
									FileUtil.copyFolder(arquivoDeploy, arquivoPortal);
									
									try { 
										FileUtil.deleteFile(fl);
									} catch (Exception XX) {} 
									
									continue;
								}
								
								if (fl.getAbsolutePath().toUpperCase().contains(".SCRIPT")) {
								
									File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
									 
									FileUtil.copyFolder(fl, arquivoDeploy);

									try { 
											FileUtil.deleteFile(fl);
									} catch (Exception XX) {} 
									
									 
									continue;
								}
							
								if((fl.length() >= sizeLimit * 5) || (fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX"))){                    // processar apenas arquivos MENORES que o limite
									arquivoGrande = fl.getName();
									// jogar um erro de planilha com o nome do arquivo que eh muito grande!!!!!
									jSdir = fl.getAbsolutePath();
									jSdir = jSdir.replaceAll("\\\\", "/");
									jSdir = cutString(jSdir, 0, jSdir.lastIndexOf("/"));
									arquivoGrande = "Arquivo-Grande" + arquivoGrande + "_PAGAR";
									// jStatus = new JSONObject();
									// putStatus(dirName, "", jStatus, logger);
									//    putStatus(jSdir, arquivoGrande/* .replaceAll(" ", "-") */ + ".err", jStatus, logger);									
								}
							}
							for (File fl: files) {
								if (arquivoGrande.equals("")) {
									try {

									//renomear arquivo que nao possua extensao para (.txt)
									if(fl.isFile() && !fl.getName().contains(".")){
										String flStr = fl.getAbsolutePath()+".txt";
										File flTemp = new File(flStr);
										fl.renameTo(flTemp);
									}

									if (fl.isFile() && oicContabil.equals("NAO")) {

										//envia email CONTABILIDADE INATIVA (canal,machado)
										subject = "Contabilidade INATIVA com arquivos a serem processados";
										//enviaEmailContabilidadeInativa(getNomeContabilidadeWorkflow(), fl.getName(), nome, subject, emailOic, sendToName, "CONTABILIDADE INATIVA", "APagar", logger);
										//mover para processado arquivo
										filename = fl.getAbsolutePath();
										filename = filename.replaceAll("\\\\", "/");
										FileUtil.moveToDir(filename, diretorio + "/Processado");
										    
										if (fl.getName().toUpperCase().contains("_ID")){
										
											LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
											// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
											String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
											
											String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
											
											atualizaProtocolo(oicContabil, "", diretorioProtocolo, protocolo_id, apiWeb, logger);
										}
										continue;

									} else if(fl.isFile() && oicContabil.equals("SIM")){

										extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();

										if(oicEmpresa.equals("NAO")){

											//envia email EMPRESA INATIVA (canal,machado,fechamento)
											emailOic = emailOic + ", " + emailResponsavel;
											subject = "Empresa INATIVA com arquivos a serem processados";
											//enviaEmailEmpresaInativa(getNomeContabilidadeWorkflow(), fl.getName(), nome, subject, emailOic, sendToName, "EMPRESA INATIVA", "APagar", logger);

											//mover para processado arquivo
											filename = fl.getAbsolutePath();
											filename = filename.replaceAll("\\\\", "/");
											FileUtil.moveToDir(filename, diretorio + "/Processado");

										}else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {

											//executa a rota
											String nomeRota = getNomeContabilidadeWorkflow() + "." + nome.substring(0,nome.indexOf("_#")) + "_ContasPagas";
											
											//Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - Início
											//Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - Início
											if (fl.getName().toUpperCase().contains("_ID")) {
												LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
												// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
												String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
												
												boolean converteu = converteuPDF(protocolo_id, apiWeb, logger);
												
												if (!converteu) continue;
											}
											
											try{


												// executa rota que atualiza os roteiros das empresas
												//RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
													atualizaArquivoRoteiro(getNomeContabilidadeWorkflow(), nome.substring(0,nome.indexOf("_#")), logger);
													// logger.logInfo("fl.getName() -> " + fl.getName());

													String rodaPadrao = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_PLANILHA_PADRAO_PAGAR");
													String tipoProduto = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_TIPO_PRODUTO");
													String idRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ID_ROTEIRO_PAGAR");
													String codRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ROTEIRO_PAGAR");
													
												try {

													
													if (rodaPadrao.toUpperCase().trim().equals("TRUE")) {															
														//PartnerConnection connection = Connector.newConnection(config);
														//preparaArquivo(idRoteiro, "Contas PAGAS", contabilidade, nome.substring(0,nome.indexOf("_#")), dirName, connection, logger);
														// PartnerConnection connection = Connector.newConnection(config);  
														preparaArquivo(idRoteiro, "Contas PAGAS", contabilidade, nome.substring(0,nome.indexOf("_#")), dirName, dirName, config, logger);
														
														
														nomeRota = getNomeContabilidadeWorkflow() + "." + getNomeContabilidadeWorkflow() +  "_ContasPagas";
														RouteEngine.execRoute(nomeRota);
													} 
												


													// Atualia o peoperties eperara para rodar a rota especifica
													// caso o arquvo nao tenha sido rodado na rota padrao
													
													if (!tipoProduto.contains("ILIMITADA")) {
														preparaArquivoEspecifico(idRoteiro, "Contas PAGAS", contabilidade, nome.substring(0,nome.indexOf("_#")), dirName, dirName, logger);


														StringBuilder txt1 = new StringBuilder();    
														String empresaProperties = dirName + "empresa.properties";
														FileWriter writer = new FileWriter(empresaProperties);
														txt1.append("NOME_EMPRESA = " + nome.substring(0,nome.indexOf("_#")));
														txt1.append("\r\n");
														txt1.append("NOME_CONTABILIDADE = " + contabilidade);
														txt1.append("\r\n");
														txt1.append("MANTEM_ARQUIVO = NAO");
														writer.writeNewFile(txt1.toString());
	 

														File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
														File eServidor  = new File("C:/inout/docs/processos/producao.txt");
														File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
														if(eServidor.exists()) {
															FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
															arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
														}

														arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
														File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidadeWorkflow() + "/" + getNomeContabilidadeWorkflow() + "_ContasPagasEndpointA.script");
														if (nome.substring(0,nome.indexOf("_#")).toUpperCase().contains("BUSSOLA")) arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/OTWBussola/LeituraBalanceteEndpointA.script");

														FileUtil.copyFolder(arquivoOrigem, arquivoDestino);

														int antesRodar =  files.length;

														nomeRota = getNomeContabilidadeWorkflow() + "." + getNomeContabilidadeWorkflow() +  "_ContasPagas";
														if (nome.substring(0,nome.indexOf("_#")).toUpperCase().contains("BUSSOLA")) nomeRota = "OTWBussola.LeituraBalancete";

														RouteEngine.execRoute(nomeRota);
														rotasOk = true;
													}
                                                    
													
													boolean naoGerouDepara = true;
													
													
													
													// passos para atualizar o integrador 4.0 
													// PASSO 1: olhar se gerou DEPARA
													// SE ENCONTRAR DEPARA, ATUALIZA STATUS E SEGUE SEM ENVIAR ARQUIVO PRONTO
															
													if (naoGerouDepara && fl.getName().toUpperCase().contains("_ID")) {
                                                        String diretoriArquivos = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
                                                        File fileArq = new File(diretoriArquivos);
                                                        File [] filesArquivos = fileArq.listFiles();
                                                        try {

                                                            String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
                                                            String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
                                                            String idSFContabilidade = props.get("CONTABILIDADE_ID");

                                                            if (FileUtil.dirHasFiles(diretoriArquivos)) {
                                                                for (File fileDePara: filesArquivos) {
																	
																	if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
                                                                         fileDePara.getName().toUpperCase().contains(".STATUS")) && 
                                                                        fileDePara.getName().toUpperCase().contains("PAGAR")) {
																		//sprint conversorpdf
																		// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																		String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																		String nomeArquivoApagado = cutString(fl.getName().toUpperCase(), "_ID");
																		nomeArquivoApagado = cutString(nomeArquivoApagado, "_", nomeArquivoApagado.lastIndexOf("."));
																		boolean continuaConversor = false;
																		LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																		
																		// if (fileDePara.getName().toUpperCase().contains("LEUCONVERSORANTIGO")) {
																			String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocolo_id, nomeArquivoApagado, logger);
																			// JWR 03072023
																			/*if(fileDePara.exists()) {
																				fileDePara.delete();
																				continue;
																			}*/
																		// }
																		//Sprint conversorpdf
																		//Verifica se encontramos algum erro ou status 3 de 4 na pasta do depara, da empresa
																		//Caso encontre, e tenha um id de protocolo, procura algum arquivo na pasta do conversor de pdf
																		//relacionado ao id do protocolo em questao e caso encontre, usaremos esse arquivo para reprocessar a rota.
																		// if (!fileDePara.getName().toUpperCase().contains(".ERR")) continuaConversor = buscaProtocoloConversor(protocolo_id, apiWeb);
																		// if (continuaConversor) continue;
																		atualizaProtocolo("", fileDePara.getName(), diretoriArquivos, protocolo_id, apiWeb, logger);
																		
																		if(fileDePara.exists()) {
                                                                            fileDePara.delete();
                                                                            continue;
                                                                        }
                                                                    }


                                                                    if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

                                                                    String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                    String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");

                                                                    if (!idLoteFila.equals(idfileDePara)) continue;


                                                                    LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

                                                                    // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                    if(fl.getName().toUpperCase().contains("_ID")) {
																		String apagouConversor = apagaArquivoConversor(diretoriArquivos, cutString(fl.getName().toUpperCase(), "_ID", "_"), "", logger);
																		String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "1", "Pendencia de preenchimento de contas para este arquivo.",  logger);
  																		naoGerouDepara = false;
                                                                    } 

                                                                }

                                                            }
                                                        }
                                                        catch (Exception xx) {}
                                                    }
													
													// PASSO 2: olhar se gerou arquivo pronto e postar no portal.
													if (naoGerouDepara)	{											
														String diretoriArquivos = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/arquivos/";
														File fileArq = new File(diretoriArquivos);
														File [] filesArquivos = fileArq.listFiles();
														try {

															String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
															String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
															String idSFContabilidade = props.get("CONTABILIDADE_ID");

															JSONObject auxObjBucket		= new JSONObject();
															auxObjBucket.put("server",	SERVER_INTEGRADOR_DEV);
															auxObjBucket.put("mapping",	"/api/v1/arquivos_empresas");

															if (FileUtil.dirHasFiles(diretoriArquivos)) {
																for (File fileDePara: filesArquivos) {
																	
																	

																	if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;
	 
																	String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																	String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");


																	if (!idLoteFila.equals(idfileDePara)) continue;
																	
 																	
 																	LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
 
																	JSONObject jBucket = new JSONObject();
																	jBucket.put("cnpjContabilidade",	cnpjContabilidade);
																	jBucket.put("cnpjEmpresa",			cnpjEmpresa);
																	if (fileDePara.getName().contains("_RECEBER")) {
																		jBucket.put("tipoMovimento", "REC");
																	}
																	else {
																		jBucket.put("tipoMovimento", "PAG");
																	}
																	String nomeArquivo64 = "";


																	jBucket.put("tipoArquivo", "TXT");
																	jBucket.put("nomeArquivo", fileDePara.getName());
																	nomeArquivo64 = fileDePara.getName();

																	String dirRouteNameId= "c:/buckets/oic-arquivo-pronto/"+getNomeContabilidadeWorkflow()+"/"+DateUtil.dateToString(new Date(), "yyyy/MM/dd")+"/";
																	if (!FileUtil.fileExists(dirRouteNameId)) {
																		FileUtil.mkDir(dirRouteNameId);
																	}
																	
																	File arquivoOrigemId = new File("c:/inout/contabil/"+getNomeContabilidadeWorkflow()+"/arquivos/" + nomeArquivo64);
																	
																	
 
																	if (arquivoOrigemId.exists() && ((!fileDePara.getName().toUpperCase().contains("RESUMO_LOTE_") && !fileDePara.getName().toUpperCase().contains("RESUMO_APOS_IMPORTACAO")
																		&& !fileDePara.getName().toUpperCase().contains("RESUMO_LOGS_IMPORTACAO")) || fornecedorUnico.contains("EXIBE_RESUMO"))) {
																		File arquivoDeployId  = new File(dirRouteNameId + nomeArquivo64);
																		FileUtil.copyFolder(arquivoOrigemId, arquivoDeployId);
 																		nomeArquivo64 = "https://"+servDinamic+".ottimizza.com.br:55325/storage/"  + Base64.getEncoder().encodeToString((dirRouteNameId + nomeArquivo64).getBytes());
																		jBucket.put("linkArquivo", nomeArquivo64);
																		try {
																			FileUtil.moveToDir("c:/inout/contabil/"+getNomeContabilidadeWorkflow()+"/arquivos/" + fileDePara.getName(), "c:/inout/contabil/"+contabilidade+"/arquivos/enviados");
																		} catch (Exception xx) {
																		   logger.logInfo(" erro genericPostId 832 "  + xx);


																		}

																		try {
																			// colocado para nao enviar arquivo de resumo lote
																			String uriIntegrador = String.format("%s%s", auxObjBucket.optString("server"), auxObjBucket.optString("mapping"));
																			String retorno = genericPostId(uriIntegrador, jBucket, apiWeb.token, logger); 
																		}
																		catch (Exception xx) {
																			logger.logInfo(" erro genericPostId 840 "  + xx);
 
																		}
																		
 																			
																		// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																		if(fl.getName().toUpperCase().contains("_ID")) {
 																			String apagouConversor = apagaArquivoConversor(diretoriArquivos, idLoteFila, "", logger);
																			String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado",  logger);

																			
																		} 
																	}

																}

															}
														}
														catch (Exception xx) {}
													}

                                                    File fileDepoisLista = new File(diretorio);
													File [] filesDepois = fileDepoisLista.listFiles();
													int depoisRodar =  filesDepois.length;
													
													// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
													// move arquivo para pata processado para nao ficar em loop
													for (File fileDePoisComparar: filesDepois) {
														if (fileDePoisComparar.getAbsolutePath().equals(fl.getAbsolutePath()) && fl.exists()) {
															String moveFilename = fl.getAbsolutePath();
															moveFilename = moveFilename.replaceAll("\\\\", "/");
															FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
														}
													}
													
 
													/*
													if (antesRodar == depoisRodar) {
														String planilhaErro = dirName + nome + "/DePara" + "/empresa_PAGAR.err";
														FileWriter writerErro = new FileWriter(planilhaErro);
														writerErro.writeNewFile(planilhaErro.toString());
														if(fl.exists()) {
															//fl.delete();
															filename = fl.getAbsolutePath();
															filename = filename.replaceAll("\\\\", "/");
															FileUtil.moveToDir(filename, diretorio + "/Processado");
														}
														antesRodar--;
													} 
													*/
													
													if (FileUtil.fileExists(dirName + nome + "/DePara" + "/02--Etapa 2 de 4--PAGAR.status")) {
														criaAvisoErroLayout( dirName + nome + "/DePara" + "/02--Etapa 2 de 4--PAGAR.status", logger);

													}
													
												}	

												catch (Exception xx) {
													logger.logDebug("ERRO AO RODAR ROTEIRO");
												}	

											}catch(Exception aa){
												subject = "Nao existe integracao de contas Pagas";

												JSONObject jsNaoExiste = new JSONObject();
												jsNaoExiste.put("NOMECONTABILIDADE", getNomeContabilidadeWorkflow());
												jsNaoExiste.put("SENDTONAME", sendToName);
												jsNaoExiste.put("SUBJECT", subject);
												//jsNaoExiste.put("EMAILRESPONSAVEL", emailResponsavel+",suporte@ottimizza.com.br");
												//if(filename.toUpperCase().contains("OTTIMIZZAF"))
												jsNaoExiste.put("EMAILRESPONSAVEL", "suporte@ottimizza.com.br");
												jsNaoExiste.put("NOMEARQUIVO", fl.getName());
												jsNaoExiste.put("TIPOINTEGRACAO", "Pagas");
												jsNaoExiste.put("NOMEEMPRESA", nome);

												//enviaEmailNaoExisteRota(jsNaoExiste, logger);

												//mover
												filename = fl.getAbsolutePath();
												filename = filename.replaceAll("\\\\", "/");
												FileUtil.moveToDir(filename, diretorio + "/Processado");

											}

										} else if(extensaoArquivo.equals(".xls")) {
											//emailArquivoErrado xls
											subject = "Arquivo .xls nao suportado por OTTIMIZZA Contabil";

											enviaAvisoSobreArquivoErrado(fl.getName(), nome, subject, emailResponsavel, sendToName, "XLS", "APagar", logger);

											//mover para processado qualquer arquivo
											filename = fl.getAbsolutePath();
											filename = filename.replaceAll("\\\\", "/");
											FileUtil.moveToDir(filename, diretorio + "/Processado");

										} else {
											//emailArquivoErrado outros arquivos
											subject = "Arquivo nao suportado por OTTIMIZZA Contabil";

											enviaAvisoSobreArquivoErrado(fl.getName(), nome, subject, emailResponsavel, sendToName, "OUTROS", "APagar", logger);

											//mover para processado qualquer arquivo
											filename = fl.getAbsolutePath();
											filename = filename.replaceAll("\\\\", "/");
											FileUtil.moveToDir(filename, diretorio + "/Processado");
										}
									}
								} catch (Exception eee) {
									logger.logError("Erro processando o arquivo " + fl.getAbsolutePath(), eee);
								}
							}else{ // envia email e move pra processado
								//////////////////
								subject = "ARQUIVO GRANDE ("+fl.length()/1024/1024+" MiB) -" + getNomeContabilidadeWorkflow() + "-" + empresa + "-" + operacao;
								StringBuilder msg = new StringBuilder();
								msg.append("<html>\n");
								msg.append("<head>\n");
								msg.append("</head>\n");
								msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
								msg.append("<p><font style=\"font-size: 10pt\">O arquivo \"" + arquivoGrande + "\" muito grande, tamanho maximo permitido para XLSX: (" + sizeLimit/1024/1024 + " Mb).</font></p>\n");
								msg.append("</body>\n");
								msg.append("</html>\n");

								//enviaEmail(subject, "suporte@ottimizza.com.br", "TAMANHO ARQUIVO", msg.toString(), null, logger);
								
								filename = fl.getAbsolutePath();
								filename = filename.replaceAll("\\\\", "/");
								if (!filename.endsWith("/Processado")) FileUtil.moveToDir(filename, diretorio + "/Processado");
								
								if (arquivoGrande.toUpperCase().contains("_ID")) {
									LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
									// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
									String protocolo_id = cutString(arquivoGrande.toUpperCase(), "_ID", "_");
									
									String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
									
									atualizaProtocolo("", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
								}
							}
						}
                         
                    }

                        ///////////////////////////////////////////////////////////
                        // ARECEBER ///////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////
                        operacao = "AReceber";
                        diretorio = dirName + nome + "/"+ operacao;
                        file2 = new File(diretorio);

						// renomeia arquivos com extens?o .XLSX
                        arquivosCaixaAlta = file2.listFiles();
                        if (FileUtil.dirHasFiles(diretorio)) {

                            for (File fl: arquivosCaixaAlta) {
								
								// logger.logInfo(" dir name " + dirName);

                                if(fl.length() < sizeLimit || !fl.getName().toUpperCase().endsWith(".XLSX")){
								//if(fl.length() < sizeLimit ) {                    // processar apenas arquivos MENORES que o limite
                                    try {
										String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").toLowerCase();
										if (fl.getAbsolutePath().contains(".XLSX")) {

											File fileDestino = new File(arquivoDestino);
											FileUtil.copyFolder(fl, fileDestino);
											FileUtil.deleteFile(fl);
										}
									}
									catch (Exception xx) {}
								}
								
								if(fl.getName().toUpperCase().contains("..")){
									try {
										String arquivoExtensaoCorreta = fl.getAbsolutePath().replaceAll("\\..","\\.");
										// if (fl.getAbsolutePath().contains(".XLSX")) {

											File fileDestino = new File(arquivoExtensaoCorreta);
											FileUtil.copyFolder(fl, fileDestino);
											FileUtil.deleteFile(fl);
										//}
									}
									catch (Exception xx) {}
								}
							}
						}

                        files = file2.listFiles();
                        emailOic = emailCanal;
                        if (FileUtil.dirHasFiles(diretorio)) {

                            if (FileUtil.dirHasFiles(diretorio)) {
							
								postStatus(servDinamic.toUpperCase(), contabilidade, "Processando", nome.substring(0,nome.indexOf("_#")), "RECEBER", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")));

                                for (File fl: files) {
									
									String rodaConversor = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EQUIPE_FECHAMENTO");
									
									//Conversor
									if (rodaConversor != null) {
									if (rodaConversor.contains(",") && rodaConversor.toUpperCase().contains("CONVERTE") && !fl.getAbsolutePath().toUpperCase().contains(".CSV")
										&& fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
											
										if (fl.getAbsolutePath().toUpperCase().contains(".XLSX") && rodaConversor.contains("XLSX")) {
											File arquivoDeploy  = new File("C:/Conversor/Excel/" + "receber_" + contabilidade + "_" + nome + "_ancora_" + cutString(fl.getAbsolutePath(), fl.getAbsolutePath().replaceAll("\\\\", "/").lastIndexOf("/")+1));
											
											try { FileUtil.copyFolder(fl, arquivoDeploy);}
											catch (Exception e) {logger.logInfo("ERRO COPIANDO " + e.getMessage());}
											
											try { 
												FileUtil.deleteFile(fl);
											} catch (Exception XX) {} 
												
											continue;
										}
									}
								}
								
								
									if (fl.getAbsolutePath().toUpperCase().contains("ROTA.TXT")) {

										File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
										File arquivoPortal  = new File(RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/arquivos/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script_RECEBER.txt");

										FileUtil.copyFolder(arquivoDeploy, arquivoPortal);
									
										try { 
											FileUtil.deleteFile(fl);
										} catch (Exception XX) {} 

										continue;
									}

									if (fl.getAbsolutePath().toUpperCase().contains(".SCRIPT")) {

										File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");

										FileUtil.copyFolder(fl, arquivoDeploy);


										try { 
											FileUtil.deleteFile(fl);
										} catch (Exception XX) {} 


										continue;
									}
									if((fl.length() >= sizeLimit * 5) || (fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX"))){                    // processar apenas arquivos MENORES que o limite
                                        arquivoGrande = fl.getName();
                                        // jogar um erro de planilha com o nome do arquivo que eh muito grande!!!!!
                                        jSdir = fl.getAbsolutePath();
                                        jSdir = jSdir.replaceAll("\\\\", "/");
                                        jSdir = cutString(jSdir, 0, jSdir.lastIndexOf("/"));
                                        arquivoGrande = "Arquivo-Grande" + arquivoGrande + "_PAGAR";
                                        // jStatus = new JSONObject();
                                        // putStatus(dirName, "", jStatus, logger);
                                        //     putStatus(jSdir, arquivoGrande/* .replaceAll(" ", "-") */ + ".err", jStatus, logger);
                                    }
                                }
                                for (File fl: files) {
                                    if (arquivoGrande.equals("")) {
                                        try {
										//renomear arquivo que nao possua extensao para (.txt)
										if(fl.isFile() && !fl.getName().contains(".")){
											String flStr = fl.getAbsolutePath()+".txt";
											File flTemp = new File(flStr);
											fl.renameTo(flTemp);
										}

                                        if (fl.isFile() && oicContabil.equals("NAO")) {

                                            //envia email CONTABILIDADE INATIVA (canal,machado)
                                            subject = "Contabilidade INATIVA com arquivos a serem processados";
                                            //enviaEmailContabilidadeInativa(getNomeContabilidadeWorkflow(), fl.getName(), nome, subject, emailOic, sendToName, "CONTABILIDADE INATIVA", "AReceber", logger);
                                            //mover para processado arquivo
                                            filename = fl.getAbsolutePath();
                                            filename = filename.replaceAll("\\\\", "/");
                                            FileUtil.moveToDir(filename, diretorio + "/Processado");
											
											if (fl.getName().toUpperCase().contains("_ID")){
										
												LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
												// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
												String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
												
												String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
												
												atualizaProtocolo(oicContabil, "", diretorioProtocolo, protocolo_id, apiWeb, logger);
											}
											continue;
                                        } else if(fl.isFile() && oicContabil.equals("SIM")){

                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                            if(oicEmpresa.equals("NAO")){

                                                //envia email EMPRESA INATIVA (canal,machado,fechamento)
                                                subject = "Empresa INATIVA com arquivos a serem processados";
                                                emailOic = emailOic + ", " + emailResponsavel;
                                                //enviaEmailEmpresaInativa(getNomeContabilidadeWorkflow(), fl.getName(), nome, subject, emailOic, sendToName, "EMPRESA INATIVA", "AReceber", logger);

                                                //mover para processado arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {

                                                //executa a rota
                                                String nomeRota = getNomeContabilidadeWorkflow() + "." + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidas";
												
												//Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - Início
												if (fl.getName().toUpperCase().contains("_ID")) {
													LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
													// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
													String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
													
													boolean converteu = converteuPDF(protocolo_id, apiWeb, logger);
													
													if (!converteu) continue;
												}
												
                                                try{

													// executa rota que atualiza os roteiros das empresas
													// RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");

													atualizaArquivoRoteiro(getNomeContabilidadeWorkflow(), nome.substring(0,nome.indexOf("_#")), logger);
													// logger.logInfo("fl.getName() -> " + fl.getName());

													String rodaPadrao = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_PLANILHA_PADRAO_RECEBER");
													String tipoProduto = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_TIPO_PRODUTO");
													String idRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ID_ROTEIRO_RECEBER");
													String codRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ROTEIRO_RECEBER");
													
			
													try {

														if (rodaPadrao.toUpperCase().trim().equals("TRUE")) {															
															//PartnerConnection connection = Connector.newConnection(config);
															//preparaArquivo(idRoteiro, "Contas RECEBIDAS", contabilidade,  nome.substring(0,nome.indexOf("_#")), dirName, connection, logger);
															// PartnerConnection connection = Connector.newConnection(config);  
															preparaArquivo(idRoteiro, "Contas RECEBIDAS", contabilidade,  nome.substring(0,nome.indexOf("_#")), dirName, dirName, config, logger);
  
 
															nomeRota = getNomeContabilidadeWorkflow() + "." + getNomeContabilidadeWorkflow() +  "_ContasRecebidas";
															RouteEngine.execRoute(nomeRota);
														}
														
														if (!tipoProduto.contains("ILIMITADA")) {
															preparaArquivoEspecifico(idRoteiro, "Contas RECEBIDAS", contabilidade,  nome.substring(0,nome.indexOf("_#")), dirName, dirName,  logger);
															
															StringBuilder txt1 = new StringBuilder();    
															String empresaProperties = dirName + "empresa.properties";
															FileWriter writer = new FileWriter(empresaProperties);
															txt1.append("NOME_EMPRESA = " + nome.substring(0,nome.indexOf("_#")));
															txt1.append("\r\n");
															txt1.append("NOME_CONTABILIDADE = " + contabilidade);
															txt1.append("\r\n");
															txt1.append("MANTEM_ARQUIVO = NAO");
															writer.writeNewFile(txt1.toString());
		 


															File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
															File eServidor  = new File("C:/inout/docs/processos/producao.txt");
															File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
															if(eServidor.exists()) {
																FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
																arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
															}

															arquivoOrigem       = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidadeWorkflow() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
															File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidadeWorkflow() + "/" + getNomeContabilidadeWorkflow() + "_ContasRecebidasEndpointA.script");

															FileUtil.copyFolder(arquivoOrigem, arquivoDestino);
															nomeRota = getNomeContabilidadeWorkflow() + "." + getNomeContabilidadeWorkflow() +  "_ContasRecebidas";

	  
															RouteEngine.execRoute(nomeRota);
															rotasOk = true;
														}
                                                        
														int antesRodar =  files.length;
                                                        boolean naoGerouDepara = true;
													
													
													
														// passos para atualizar o integrador 4.0 
														// PASSO 1: olhar se gerou DEPARA
														// SE ENCONTRAR DEPARA, ATUALIZA STATUS E SEGUE SEM ENVIAR ARQUIVO PRONTO
																
														if (naoGerouDepara && fl.getName().toUpperCase().contains("_ID")) {
															String diretoriArquivos = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
															File fileArq = new File(diretoriArquivos);
															File [] filesArquivos = fileArq.listFiles();
															try {

																String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
																String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
																String idSFContabilidade = props.get("CONTABILIDADE_ID");

																if (FileUtil.dirHasFiles(diretoriArquivos)) {
																	for (File fileDePara: filesArquivos) {

																		if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
																			 fileDePara.getName().toUpperCase().contains(".STATUS")) && 
																			fileDePara.getName().toUpperCase().contains("RECEBER")) {
																			
																			// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																			String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																			String nomeArquivoApagado = cutString(fl.getName().toUpperCase(), "_ID");
																			nomeArquivoApagado = cutString(nomeArquivoApagado, "_", nomeArquivoApagado.lastIndexOf("."));
																			boolean continuaConversor = false;
																			//sprint conversorpdf
																			LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																			
																			// if (fileDePara.getName().toUpperCase().contains("LEUCONVERSORANTIGO")) {
																				String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocolo_id, nomeArquivoApagado, logger);
																				/*if(fileDePara.exists()) {
																					fileDePara.delete();
																					continue;
																				}*/
																			// }
																			//Sprint conversorpdf
																			//Verifica se encontramos algum erro ou status 3 de 4 na pasta do depara, da empresa
																			//Caso encontre, e tenha um id de protocolo, procura algum arquivo na pasta do conversor de pdf
																			//relacionado ao id do protocolo em questao e caso encontre, usaremos esse arquivo para reprocessar a rota.
																			// if (!fileDePara.getName().toUpperCase().contains(".ERR")) continuaConversor = buscaProtocoloConversor(protocolo_id, apiWeb);
																			// if (continuaConversor) continue;
																			atualizaProtocolo("", fileDePara.getName(), diretoriArquivos, protocolo_id, apiWeb, logger);
																			
																			if(fileDePara.exists()) {
																				fileDePara.delete();
																				continue;
																			}
																		}


																		if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

																		String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																		String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");

																		if (!idLoteFila.equals(idfileDePara)) continue;


																		LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

																		// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																		if(fl.getName().toUpperCase().contains("_ID")) {
																			String apagouConversor = apagaArquivoConversor(diretoriArquivos, cutString(fl.getName().toUpperCase(), "_ID", "_"), "", logger);
																			String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "1", "Pendencia de preenchimento de contas para este arquivo.",  logger);
																			naoGerouDepara = false;
																		} 

																	}

																}
															}
															catch (Exception xx) {}
														}
														
														// PASSO 2: olhar se gerou arquivo pronto e postar no portal.
														if (naoGerouDepara)	{											
															String diretoriArquivos = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/arquivos/";
															File fileArq = new File(diretoriArquivos);
															File [] filesArquivos = fileArq.listFiles();
															try {

																String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
																String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
																String idSFContabilidade = props.get("CONTABILIDADE_ID");

																JSONObject auxObjBucket		= new JSONObject();
																auxObjBucket.put("server",	SERVER_INTEGRADOR_DEV);
																auxObjBucket.put("mapping",	"/api/v1/arquivos_empresas");

																if (FileUtil.dirHasFiles(diretoriArquivos)) {
																	for (File fileDePara: filesArquivos) {

																		if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;
		 
																		String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																		String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");

																		if (!idLoteFila.equals(idfileDePara)) continue;
																		
																		LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
	 
																		JSONObject jBucket = new JSONObject();
																		jBucket.put("cnpjContabilidade",	cnpjContabilidade);
																		jBucket.put("cnpjEmpresa",			cnpjEmpresa);
																		if (fileDePara.getName().contains("_RECEBER")) {
																			jBucket.put("tipoMovimento", "REC");
																		}
																		else {
																			jBucket.put("tipoMovimento", "PAG");
																		}
																		String nomeArquivo64 = "";


																		jBucket.put("tipoArquivo", "TXT");
																		jBucket.put("nomeArquivo", fileDePara.getName());
																		nomeArquivo64 = fileDePara.getName();

																		String dirRouteNameId= "c:/buckets/oic-arquivo-pronto/"+getNomeContabilidadeWorkflow()+"/"+DateUtil.dateToString(new Date(), "yyyy/MM/dd")+"/";
																		if (!FileUtil.fileExists(dirRouteNameId)) {
																			FileUtil.mkDir(dirRouteNameId);
																		}

																		File arquivoOrigemId = new File("c:/inout/contabil/"+getNomeContabilidadeWorkflow()+"/arquivos/" + nomeArquivo64);
																		
																		
																		if (arquivoOrigemId.exists() && ((!fileDePara.getName().toUpperCase().contains("RESUMO_LOTE_") && !fileDePara.getName().toUpperCase().contains("RESUMO_APOS_IMPORTACAO")
																			&& !fileDePara.getName().toUpperCase().contains("RESUMO_LOGS_IMPORTACAO")) || fornecedorUnico.contains("EXIBE_RESUMO"))) {
																			File arquivoDeployId  = new File(dirRouteNameId + nomeArquivo64);
																			FileUtil.copyFolder(arquivoOrigemId, arquivoDeployId);
																			nomeArquivo64 = "https://"+servDinamic+".ottimizza.com.br:55325/storage/"  + Base64.getEncoder().encodeToString((dirRouteNameId + nomeArquivo64).getBytes());
																			jBucket.put("linkArquivo", nomeArquivo64);
																			try {
																				FileUtil.moveToDir("c:/inout/contabil/"+getNomeContabilidadeWorkflow()+"/arquivos/" + fileDePara.getName(), "c:/inout/contabil/"+contabilidade+"/arquivos/enviados");
																			} catch (Exception xx) {

																			}

																			try {

																			// colocado para nao enviar arquivo de resumo lote
																				String uriIntegrador = String.format("%s%s", auxObjBucket.optString("server"), auxObjBucket.optString("mapping"));
																				String retorno = genericPostId(uriIntegrador, jBucket, apiWeb.token, logger); 

																			}
																			catch (Exception xx) {
	 																			logger.logInfo(" erro genericPostId 1356 "  + xx);

																			}
		 
																			// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
 																			
																			if(fl.getName().toUpperCase().contains("_ID")) {
																				String apagouConversor = apagaArquivoConversor(diretoriArquivos, idLoteFila, "", logger);
																				String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado",  logger);
																				
																			} 
																		}

																	}

																}
															}
															catch (Exception xx) {}
														}

														File fileDepoisLista = new File(diretorio);
														File [] filesDepois = fileDepoisLista.listFiles();
														int depoisRodar =  filesDepois.length;
														
														// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
														// move arquivo para pata processado para nao ficar em loop
														for (File fileDePoisComparar: filesDepois) {
															if (fileDePoisComparar.getAbsolutePath().equals(fl.getAbsolutePath()) && fl.exists()) {
																String moveFilename = fl.getAbsolutePath();
																moveFilename = moveFilename.replaceAll("\\\\", "/");
																FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
															}
														}

														if (antesRodar == depoisRodar) {
															String planilhaErro = dirName + nome + "/DePara" + "/empresa_RECEBER.err";
															FileWriter writerErro = new FileWriter(planilhaErro);
															writerErro.writeNewFile(planilhaErro.toString());
															if(fl.exists()) {
																//fl.delete();
																filename = fl.getAbsolutePath();
																filename = filename.replaceAll("\\\\", "/");
																FileUtil.moveToDir(filename, diretorio + "/Processado");
															}
															antesRodar--;
														}
														
														 if (FileUtil.fileExists(dirName + nome + "/DePara" + "/02--Etapa 2 de 4--RECEBER.status")) {
															//criaAvisoErroLayout( dirName + nome + "/DePara" + "/02--Etapa 2 de 4--RECEBER.status", logger);

														}
													}

													catch (Exception xx) {
														logger.logDebug("ERRO AO RODAR ROTEIRO");
													}


                                                }catch(Exception aa){
                                                    subject = "Nao existe integracao de contas Recebidas";

                                                    JSONObject jsNaoExiste = new JSONObject();
                                                    jsNaoExiste.put("NOMECONTABILIDADE", getNomeContabilidadeWorkflow());
                                                    jsNaoExiste.put("SENDTONAME", sendToName);
                                                    jsNaoExiste.put("SUBJECT", subject);
                                                    //jsNaoExiste.put("EMAILRESPONSAVEL", emailResponsavel+",suporte@ottimizza.com.br");
                                                    //if(filename.toUpperCase().contains("OTTIMIZZAF"))
                                                    jsNaoExiste.put("EMAILRESPONSAVEL", "suporte@ottimizza.com.br");
                                                    jsNaoExiste.put("TIPOINTEGRACAO", "Recebidas");
                                                    jsNaoExiste.put("NOMEARQUIVO", fl.getName());
                                                    jsNaoExiste.put("NOMEEMPRESA", nome);

                                                    //enviaEmailNaoExisteRota(jsNaoExiste, logger);
                                                    //mover
                                                    filename = fl.getAbsolutePath();
                                                    filename = filename.replaceAll("\\\\", "/");
                                                    FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                }

                                            } else if (extensaoArquivo.equals(".xls")) {
                                                //enviaAvisoSobreArquivo xls
                                                subject = "Arquivo .xls nao suportado por OTTIMIZZA Contabil";
                                                enviaAvisoSobreArquivoErrado(fl.getName(), nome,  subject, emailResponsavel, sendToName, "XLS", "AReceber", logger);

                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                            } else {
                                                //enviaAvisoSobreArquivo outros arquivos
                                                subject = "Arquivo nao suportado por OTTIMIZZA Contabil";
                                                enviaAvisoSobreArquivoErrado(fl.getName(), nome,  subject, emailResponsavel, sendToName, "OUTROS", "AReceber", logger);

                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                            }
                                        }
                                    } catch (Exception eee) {
                                        logger.logError("Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                    }
                                }else{                  // envia email e move pra processado

                                    //////////////////
									subject = "ARQUIVO GRANDE ("+fl.length()/1024/1024+" MiB) -" + getNomeContabilidadeWorkflow() + "-" + empresa + "-" + operacao;
									StringBuilder msg = new StringBuilder();
									msg.append("<html>\n");
									msg.append("<head>\n");
									msg.append("</head>\n");
									msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
									msg.append("<p><font style=\"font-size: 10pt\">O arquivo \"" + arquivoGrande + "\" muito grande, tamanho maximo permitido para XLSX: (" + sizeLimit/1024/1024 + " Mb).</font></p>\n");
									msg.append("</body>\n");
									msg.append("</html>\n");

									filename = fl.getAbsolutePath();
									filename = filename.replaceAll("\\\\", "/");
									if (!filename.endsWith("/Processado")) FileUtil.moveToDir(filename, diretorio + "/Processado");
									
									if (arquivoGrande.toUpperCase().contains("_ID")) {
										LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
										// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
										String protocolo_id = cutString(arquivoGrande.toUpperCase(), "_ID", "_");
										
										String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
										
										atualizaProtocolo("", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
									}
                                }
                            }
                        }
                    }

                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }

			/*
            ///////////////////////////////////////////////////////////
            // GERA ARQUIVO PARA IMPORTACAO ///////////////////////////
            ///////////////////////////////////////////////////////////
            if (rotasOk) {
                File txtGeraArquivo = new File(String.format("%s\\contabil\\Ottimizza\\GeraArquivo\\Gera_%s.txt", RouteEngine.INOUT_HOME, getNomeContabilidadeWorkflow()));

				String rotaGera = "Ottimizza.GeraArquivoParaImportacao";
				if (!getNomeContabilidadeWorkflow().toUpperCase().equals("ESCRILEX") && 
				    !getNomeContabilidadeWorkflow().toUpperCase().equals("DEPAULA") &&
					!getNomeContabilidadeWorkflow().toUpperCase().equals("RUICADETE")) {
					if(!txtGeraArquivo.exists()) {
						try {
							if (txtGeraArquivo.createNewFile()) {
								logger.logDebug(String.format("Sucessfully created file at '%s'...", txtGeraArquivo.getAbsolutePath()));

								FileWriter writer = new FileWriter(txtGeraArquivo.getAbsolutePath());
								writer.writeNewFile("NOME CONTABILIDADE : " + getNomeContabilidadeWorkflow());

							} else {
								logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtGeraArquivo.getAbsolutePath()));
							}
						} catch(Exception createFileException) {
							logger.logError(String.format("Error trying to create file '%s'", txtGeraArquivo.getAbsolutePath()), createFileException);
						}
					} else {
						logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtGeraArquivo.getAbsolutePath()));
					}
				} else {
					rotaGera = toDisplayCase(getNomeContabilidadeWorkflow()) + ".GeraArquivoParaImportacao";
				}
				
                RouteEngine.execRoute(rotaGera);
                rotasOk = false;
            }
			*/
			
        }
    } catch (Exception e) {
        logger.logError(e);
    }

    return records;
}




/////////////////////////////////////////////////////////////////////////////////
// Extrai do ROUTE_ID o nome da Contabilidade
/////////////////////////////////////////////////////////////////////////////////
private String getNomeContabilidadeWorkflow() throws Exception {
    String contabilidade = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf("."));

    return contabilidade;
}

 


/////////////////////////////////////////////////////////////////////////////////
////////////////////  ////   WORKFLOW  OTW (Endpoint A)    ////  ////////////////
/////////////////////////////////////////////////////////////////////////////////
 JSONArray runWorkflowEndpointA(String iReadIt, InoutLogger logger) throws Exception {

	//logger.logDebug("### Workflow padrao > "+iReadIt);

    JSONArray records    = new JSONArray();

    SysProperties routesProperties = SysProperties.getInstance();
    SysProperties contabilidadesAtivas = SysProperties.getInstance();
    SysProperties props  = SysProperties.getInstance();
    SysProperties props2 = SysProperties.getInstance();
	
	ConnectorConfig config = new ConnectorConfig();
	config.setUsername("fabrica@ottimizza.com.br");
	config.setPassword("ottimizza@123HU4ssqt1HCiLyCzj6QStgteM2");
	config.setTraceMessage(false);
	
	logger.logInfo("API SALES SHR: runWorkflowEndpointA workflow3 2");
	//config.setUsername("adm@ottimizza.com.br");
	//config.setPassword("oic@3333222YXZRHYLH8cxrchPu0rjyGH1j8");
	//config.setTraceMessage(true);

	double tempoInicial = System.currentTimeMillis();
	boolean rodouRota = false;
	
 
	
	//logger.logInfo("INICIANDO WORKFLOW");
	postStatus(servDinamic.toUpperCase(), INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), "Ocioso", "Nada Pendente", "Sem Arqivo Para Processar", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")));
    
    try {
        // tenta carregar propriedades de rotas.
        try { routesProperties.load(String.format("/contabil/ottimizza/routes.properties", RouteEngine.INOUT_HOME));
            } catch (Exception ex) { logger.logDebug("Nao foi poss?iel ler arquivo de propriedades.");
            }
		// tenta carregar propriedades de contabilidades Ativas.
        try { contabilidadesAtivas.load(String.format("/contabil/ottimizza/contabilidadesativas.properties", RouteEngine.INOUT_HOME));
            } catch (Exception ex) { logger.logDebug("Nao foi poss?iel ler arquivo de propriedades.");
            }

        File dirInoutContabil = new File(String.format("%s/contabil/", RouteEngine.INOUT_HOME));

        if (dirInoutContabil.exists()) {
            for (File dirContabilidade: dirInoutContabil.listFiles()) {
                String contabilidade = dirContabilidade.getName();
				
 
				
				if (contabilidade.toUpperCase().contains("OTTIMIZZA") ||
				    contabilidade.toUpperCase().contains("OTW") ||
				    contabilidade.toUpperCase().contains("APOIOOTT") ||
				    contabilidade.toUpperCase().contains("SFORCE") ||
				    contabilidade.toUpperCase().contains("TEMPLATE")) continue;				    
				
				

				// iReadIt			= "A,B,C"
				// validChar		= "A" | "D" | "F" 
				iReadIt				= iReadIt.toUpperCase();
				String validChar	= cutString(contabilidade.toUpperCase(), 0, 1);
                if (!iReadIt.contains(validChar)) continue;
				
 


                String property = String.format("%s_WORKFLOW_NAME", contabilidade.toUpperCase());

                if (routesProperties.getKeys().contains(property)) {

                    String routeId = routesProperties.get(property);
 
                    if (routeId.equals(INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1))) {

                        // Regras Antigo
                        // 
                        String dirName = RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/";
                        String dirNameW = RouteEngine.INOUT_HOME + "/contabil/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/";
                        String dirRouteName = RouteEngine.INOUT_HOME + "/routes/" + contabilidade;
                        String arquivoGrande = "";
                        String jSdir = "";

                        //logger.logDebug("AVALIANDO CONTABILIDADE  === " + contabilidade);
                        if (contabilidade.toUpperCase().equals("ESCRILEX")) continue;
                        if (contabilidade.toUpperCase().equals("ONNEGESTAO")) continue;
                        //if (!contabilidade.toUpperCase().equals("FUTURO")) continue;

                        if (!FileUtil.fileExists(dirRouteName)) {
                            FileUtil.mkDir(dirRouteName);
                        }
						
						// quando travar, mascarcar aqui
						//logger.logDebug("Lendo " + contabilidade);


                        File file = new File(dirName); // -> dirContabilidade


                        String[] rotasLO = file.list();

                        boolean rotasOk = false;
                        String filename = "";
                        String filenameCanal = "";
                        String extensaoSuportada = ".csv.xlsx.txt.ofx.dat.pdf.prn.ret.dp1.dp2.dp9.omc.html.ret";
						// PADRAO  = ".csv.xlsx.txt.ofx.dat.pdf.prn.ret.dp1.dp2.dp9.omc";
						// PADRAOM = ".csv.xlsx.txt.ofx.dat.pdf.prn.ret.omc";

                        String sendToName       = contabilidade + " -- OTTIMIZZA Contabil";
                        double sizeLimit = 4;               //tamanho maximo processavel                        //-
                        // if (contabilidade.toUpperCase().contains("TECOLMG")) sizeLimit = 40; // #Fabrica(2019-07-24) @Becker
                        sizeLimit = sizeLimit * (Math.pow(1024,2)); //MiB                                       //-

                        String extensaoArquivo  = "";

                        // Carrega as propriedades
                        props.load("contabil/" + contabilidade + "/contabil.properties");
                        props2.load("contabil/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/empresa.properties");


                        String oicContabil  = props.get("OIC_LIBERADO");
                        //06092023 Comentado pois estava barrando a mensagem de erro no 4.0
						// if (oicContabil.equals("NAO")) {
                             // logger.logInfo("CONTABILIDADE = " + contabilidade + " MARCADA NO CRM PARA NAO PROCESSAR. OIC_LIBERADO = FALSE ");
                            // continue;
                        // }

                        String emailCanal   = props.get("EMAIL_CANAL");
                        String codigoCanal  = props.get("CODIGO_CANAL");
                        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
                        String versaoOtzWebApp = "02_Conecta_Via_Portal_Ottimizza";
						String fornecedorUnico = props.get("FORNECEDOR_UNICO");


                        String emailOic     = emailCanal;
                        String subject      = "";
                        String empresa      = "";
                        String operacao     = "";
						
						//logger.logInfo("CONTZINHA " + contabilidade);
 
						//-------------------------------------------------------------------------------------
						// GERA ARQUIVO COM log da ultima contabilidade que foi rodada.
						//-------------------------------------------------------------------------------------
						String fileLog = "/inout/logs/workflow/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "_ultimaRota.csv";
						Date ultimoLog = new Date();

						String conteudo = contabilidade + ";" + ultimoLog.getTime();

						FileWriter writerLog = new FileWriter(fileLog);
						writerLog.writeNewFile(conteudo.toString());
						
						// verifica se a empresa existe no diretorio /inout/contabil/contabilidade
						// se nao existir, forca criacao da mesma
						String diretorioDestino = RouteEngine.INOUT_HOME + "/Contabil/Ottimizza/AtualizaProperties/";
						File diretorioDestinoFile = new File(diretorioDestino);
						if (diretorioDestinoFile.exists()) {
							File fileProperties = new File(diretorioDestino);
							String[] listaProperties = fileProperties.list();
							if (listaProperties.length > 1) {
								
								// comentado para rodar apenas em outra parte do codugo, onde a conatbilidade eh a Futuro
								//RouteEngine.execRoute("Ottimizza.Atualiza_Properties");
								// logger.logInfo("Forcando Crar empresa na Contabilidade " + contabilidade);
							}
						}


                        if (codigoCanal == null) codigoCanal = "Admin";					


                        if (rotasLO != null) {

                            for (String nome : rotasLO) {

                                try {

                                    if (nome.contains("_#")) {
										
										arquivoGrande = "";
									
									
										// quando travar, mascarcar aqui
										//logger.logDebug("LENDO EMPRESA " + nome);
										
										//-------------------------------------------------------------------------------------
										// GERA ARQUIVO COM log da ultima contabilidade que foi rodada.
										//-------------------------------------------------------------------------------------
										ultimoLog = new Date();

										conteudo = contabilidade + "_" + nome + ";" + ultimoLog.getTime();


                                        empresa = nome.substring(0,nome.indexOf("_#")).toUpperCase();

                                        // Empresas do tipo Bussola sao agora processadas em um workflow especifico e por isto ignoradas no OIC
                                        if (empresa.substring(0,nome.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !empresa.substring(0,nome.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) continue;


                                        // Agora existe um workflow especifico para Bussola por isto empresas Bussola sao ignradas deste workflow.
                                        if (empresa.substring(0,nome.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !empresa.substring(0,nome.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) continue;


                                        String emailResponsavel = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EMAIL_RESPONSAVEL");
                                        String oicEmpresa = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_LIBERA_OIC");
										
										///////////////////////////////////////////////////////////
                                        // DEPARA /////////////////////////////////////////////////
                                        ///////////////////////////////////////////////////////////
                                        operacao = "DePara";
                                        String diretorio = dirName + nome + "/DePara";
										
										// logger.logInfo("DIRETORIO " + diretorio);
										
                                        File file2 = new File(diretorio);
                                        File [] files = file2.listFiles();
                                        try {
                                            if (FileUtil.dirHasFiles(diretorio)) {
                                                for (File fileDePara: files) {
 													if (fileDePara.getName().equals("Processado")) continue; //JWR adicionar esse if caso haja erro de access denied no depara
													
													// logger.logInfo("LENDO EMPRESA depara = " + empresa + " | " + fileDePara.length() + " | " + sizeLimit + " | " + fileDePara.getName());
													if (fileDePara.isFile()){
														
														//participante
														if (fileDePara.getName().toUpperCase().contains("PARTICIPANTE") &&
															(fileDePara.getName().toUpperCase().endsWith(".CSV") )){
															File ImportaParticipante = new File(String.format("%s/contabil/Ottimizza/ImportaParticipante/Participante_%s.txt", RouteEngine.INOUT_HOME, nome));
															// Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
															if (!ImportaParticipante.getParentFile().exists()) ImportaParticipante.getParentFile().mkdirs();

															if (!ImportaParticipante.exists()) {
																try {
																	if (ImportaParticipante.createNewFile()) {
																		// String com conteudos do Arquivo '.txt' com os dados para importacao
																		// do Plano de Contas da Empresa.
																		String txtIPContent = "";
																		txtIPContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
																		txtIPContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
																		txtIPContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));
																		// Escrever texto no arquivo
																		FileWriter writerDePara = new FileWriter(ImportaParticipante.getAbsolutePath());
																		writerDePara.writeNewFile(txtIPContent);
																	} else {
																		logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", ImportaParticipante.getAbsolutePath()));
																	}
																} catch(Exception createFileException) {
																	logger.logError(String.format("Error trying to create file '%s'!", ImportaParticipante.getAbsolutePath()), createFileException);
																}
															} else {
																logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", ImportaParticipante.getAbsolutePath()));
															}
															String rotaImportaPlano = "Ottimizza.ImportaParticipante";
															RouteEngine.execRoute(rotaImportaPlano);

															// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
															// move arquivo para pata processado para nao ficar em loop
															File fileDepoisLista = new File(diretorio);
															File [] filesDepois = fileDepoisLista.listFiles();
															for (File fileDePoisComparar: filesDepois) {
																if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
																	String moveFilename = fileDePara.getAbsolutePath();
																	moveFilename = moveFilename.replaceAll("\\\\", "/");
																	FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
																}
															}

														}

														if(fileDePara.length() < sizeLimit || !fileDePara.getName().toUpperCase().endsWith(".XLSX")){
 
                                                            //DE PARA
                                                            if(fileDePara.getName().startsWith("OK_DePara") && fileDePara.getName().toLowerCase().endsWith(".csv")){
                                                                String rotaDePara = contabilidade+"DePara" + ".AtualizaPendenciasIOMovimento";
                                                                if (versaoPlataforma.equals(versaoOtzWebApp)) {
                                                                    rotaDePara = "Ottimizza.AtualizaPendenciasIOMovimento";

                                                                    File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/AtualizaPendenciaIOMovimento/Atualiza_%s.txt", RouteEngine.INOUT_HOME, nome));

                                                                    // Criar diretorio ottimizza/AtualizaPendenciaIOMovimento se n?o existe.
                                                                    if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

                                                                    if (!txtImportaPlanoContas.exists()) {
                                                                        try {											
                                                                            String txtIPCContent = "";

                                                                            txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                                                                            txtIPCContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
                                                                            txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));

                                                                            // Escrever texto no arquivo
                                                                            FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
                                                                            writerDePara.writeNewFile(txtIPCContent);
                                                                        } catch(Exception createFileException) {
                                                                            logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
                                                                        }
                                                                    } else {
                                                                        logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                                    }     														
                                                                }
                                                                RouteEngine.execRoute(rotaDePara);
																// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
																// move arquivo para pata processado para nao ficar em loop
																File fileDepoisLista = new File(diretorio);
																File [] filesDepois = fileDepoisLista.listFiles();
																for (File fileDePoisComparar: filesDepois) {
																	if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
																		String moveFilename = fileDePara.getAbsolutePath();
																		moveFilename = moveFilename.replaceAll("\\\\", "/");
																		FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
																	}
																}
                                                                 rotasOk = true;

                                                            }
															//PLANO CONTAS
															
															// logger.logInfo("PLNCNT " + fileDePara.getName() + " | " + contabilidade);
															
                                                            if (!fileDePara.getName().toUpperCase().contains("PARTICIPANTE") && 
                                                                fileDePara.getName().toUpperCase().contains("PLANO") &&
															   (((fileDePara.getName().toUpperCase().startsWith("PLANO DE CONTA") || fileDePara.getName().toUpperCase().startsWith("PLANOCONTAS")) && fileDePara.getName().toUpperCase().endsWith(".CSV")) || 
                                                                 fileDePara.getName().toUpperCase().endsWith(".XLSX") || fileDePara.getName().toUpperCase().endsWith(".LST") || fileDePara.getName().toUpperCase().endsWith(".TXT") || fileDePara.getName().toUpperCase().endsWith(".PDF"))) {                    
                                                                File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/PlanoContas_%s.txt", RouteEngine.INOUT_HOME, nome));


                                                                // Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
                                                                if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

                                                                // QUANDO FOR CSV, joga em pasta /inout/contabil/ottimizza/planocontas para poder importar
                                                                // sem dar conflito com os .csv de depara. 
                                                                if (fileDePara.getName().toUpperCase().endsWith(".CSV") || fileDePara.getName().toUpperCase().endsWith(".PDF")) {
                                                                    filename = fileDePara.getAbsolutePath();
                                                                    filename = filename.replaceAll("\\\\", "/");

                                                                    if (!FileUtil.fileExists(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade))) {
                                                                        FileUtil.mkDir(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade));
                                                                    }

                                                                    
                                                                     FileUtil.moveToDir(filename, String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade));

                                                                }
                                                                if (!txtImportaPlanoContas.exists()) {
                                                                    try {
                                                                        if (txtImportaPlanoContas.createNewFile()) {
                                                                            // String com conteudos do Arquivo '.txt' com os dados para importacao 
                                                                            // do Plano de Contas da Empresa.
                                                                            String txtIPCContent = "";

                                                                            txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                                                                            txtIPCContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
                                                                            txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));

                                                                            // Escrever texto no arquivo
                                                                            FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
                                                                            writerDePara.writeNewFile(txtIPCContent);
                                                                        } else {
                                                                            logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                                        }   
                                                                    } catch(Exception createFileException) {
                                                                        logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
                                                                    }
                                                                } else {
                                                                    logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                                }                                            
                                                                String rotaImportaPlano = "Ottimizza.ImportaPlanoContas";
                                                                RouteEngine.execRoute(rotaImportaPlano);
															
																// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
																// move arquivo para pata processado para nao ficar em loop
																File fileDepoisLista = new File(diretorio);
																File [] filesDepois = fileDepoisLista.listFiles();
																for (File fileDePoisComparar: filesDepois) {
																	if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
																		String moveFilename = fileDePara.getAbsolutePath();
																		moveFilename = moveFilename.replaceAll("\\\\", "/");
																		FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
																	}
																}

                                                             }
                                                        }
                                                    }else{                  // envia email e move pra processado

                                                        subject = "ARQUIVO GRANDE ("+fileDePara.length()/1024/1024+" MiB) -" + contabilidade + "-" + empresa + "-" + operacao;
                                                        StringBuilder msg = new StringBuilder();
                                                        msg.append("<html>\n");
                                                        msg.append("<head>\n");
                                                        msg.append("</head>\n");
                                                        msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");                                               
                                                        msg.append("<p><font style=\"font-size: 10pt\">to big, max size (" + sizeLimit/1024/1024 + " MiB).</font></p>\n");
                                                        msg.append("</body>\n");
                                                        msg.append("</html>\n");

                                                        // enviaEmail(subject, "suporte@ottimizza.com.br", "TAMANHO ARQUIVO", msg.toString(), null, logger);

                                                        filename = fileDePara.getAbsolutePath();
                                                        filename = filename.replaceAll("\\\\", "/");
                                                        FileUtil.moveToDir(filename, diretorio + "/Processado");
														
														if (filename.contains("_ID")) {
															LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
															String protocolo_id = cutString(filename.toUpperCase(), "_ID", "_");
															
															String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
															
															atualizaProtocolo("", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
														}
                                                    }
                                                }
                                            }
                                        } catch (Exception deParaException) {
                                            logger.logError("Erro executando DePara " + diretorio, deParaException);
                                        }
										
										diretorio = "C:/Conversor/Excel";
										file2 = new File(diretorio);
										
										files = file2.listFiles();


										if (FileUtil.dirHasFiles(diretorio)) {
											for (File fl: files) {
												if (fl.getAbsolutePath().contains("aba[") && (fl.getAbsolutePath().toUpperCase().contains("PAGAR") || fl.getAbsolutePath().toUpperCase().contains("RECEBER")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
													String diretorioArquivoCsv = "C:/inout/contabil/";
													String testeCsv = "";
													String abaCsv = "";
													String contabilidadeCsv = "";
													String empresaCsv = "";
													
													if (fl.getAbsolutePath().toUpperCase().contains("MICALI")) continue;
													
													long time1 = fl.lastModified();
													double timeDouble = (double) time1;
													
													double times = (System.currentTimeMillis() - timeDouble) / 1000;
													
													// int longTime1 = time1.intValue();
													// logger.logInfo("ULTIMA MODIFICACAO " + fl.getAbsolutePath() + " | " + time1 + " | " + System.currentTimeMillis());
													// \("ULTIMA MODIFICACAOTEMPOS " + times);
									
													if (times > 10) {
													
														if (fl.getAbsolutePath().contains("_pagar_")) {
															try {
																abaCsv = cutString(fl.getAbsolutePath(),"aba[","_pagar_");
																testeCsv = cutString(fl.getAbsolutePath(), "_pagar_");
																contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
																empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
																empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
																diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
															} catch (Exception e) {
																logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
															}
														}
														else if (fl.getAbsolutePath().contains("_receber_")) {
															try {
																abaCsv = cutString(fl.getAbsolutePath(),"aba[","_receber_");
																testeCsv = cutString(fl.getAbsolutePath(), "_receber_");
																contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
																empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
																
																// logger.logInfo("ECS " + empresaCsv);
																empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
																// logger.logInfo("ECS3" + empresaCsv);
																diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
															} catch (Exception e) {
																logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
															}
														}
														String arquivoDeployStr = "";
														try {
															arquivoDeployStr = "aba_"+abaCsv.replace("[","").replace("]","")+"_"+fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
															//arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
														} catch (Exception e) {
															logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
														}
																	
														if (!arquivoDeployStr.equals("")) {
															File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
															// DHF C:\Conversor\Excel\aba[0]_PAGAR_Micalicontabil_Velasquesamaraldall_ott_oud__id4418_pago0218_modelo 05-2022.csv RODACONVERSOR
															FileUtil.copyFolder(fl, arquivoDeploy);
														
															try { 
																FileUtil.deleteFile(fl);
															} catch (Exception XX) {}
														}
													}
												
													continue;
												}
											}
										}

                                        ///////////////////////////////////////////////////////////
                                        // APAGAR /////////////////////////////////////////////////
                                        ///////////////////////////////////////////////////////////
                                        operacao = "APagar";
                                        diretorio = dirName + nome + "/"+ operacao;
                                        file2 = new File(diretorio);


                                        // renomeia arquivos com extens?o .XLSX 
                                        File []  arquivosCaixaAlta = file2.listFiles();
                                        if (FileUtil.dirHasFiles(diretorio)) {

                                            for (File fl: arquivosCaixaAlta) {
											
												logger.logDebug("LENDO EMPRESA pagar = " + empresa);
											
												postStatus(servDinamic.toUpperCase(), INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), contabilidade, empresa, "PAGAR", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")));


                                                if(fl.length() < sizeLimit) {                    // processar apenas arquivos MENORES que o limite
                                                    try {
                                                        String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").replaceAll("\\.PDF","_\\.pdf").toLowerCase();
                                                        if (fl.getAbsolutePath().contains(".XLSX") || fl.getAbsolutePath().contains(".PDF")) {


                                                            File fileDestino = new File(arquivoDestino);
                                                            FileUtil.copyFolder(fl, fileDestino);
                                                            FileUtil.deleteFile(fl);
                                                        }
                                                    }
                                                    catch (Exception xx) {}
													
													try {
                                                        String arquivoDestino = fl.getAbsolutePath().replace("[","").replace("]","").replace("{","").replace("}","").replace("%","");
                                                        if (fl.getAbsolutePath().contains("[") || fl.getAbsolutePath().contains("]") || fl.getAbsolutePath().contains("{") || fl.getAbsolutePath().contains("}") || fl.getAbsolutePath().contains("%")) {
															File fileDestino = new File(arquivoDestino);
                                                            FileUtil.copyFolder(fl, fileDestino);
                                                            FileUtil.deleteFile(fl);
                                                        }
                                                    }
                                                    catch (Exception xx) {}
                                                }
												
												if(fl.getName().toUpperCase().contains("..")){
													try {
														String arquivoExtensaoCorreta = fl.getAbsolutePath().replaceAll("\\..","\\.");
														// if (fl.getAbsolutePath().contains(".XLSX")) {

															File fileDestino = new File(arquivoExtensaoCorreta);
															FileUtil.copyFolder(fl, fileDestino);
															FileUtil.deleteFile(fl);
														//}
													}
													catch (Exception xx) {}
												}
                                            }
                                        }


                                        // FINAL renomeia arquivos com extens?o .XLSX 


                                        files = file2.listFiles();

                                        if (FileUtil.dirHasFiles(diretorio)) {
                                            for (File fl: files) {
												
												String rodaConversor = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EQUIPE_FECHAMENTO");
												//Conversor
												if (rodaConversor != null) {
													if (rodaConversor.contains(",") && rodaConversor.toUpperCase().contains("CONVERTE") && !fl.getAbsolutePath().toUpperCase().contains(".CSV")
														&& fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
															
														if (fl.getAbsolutePath().toUpperCase().contains(".XLSX") && rodaConversor.contains("XLSX")) {
															File arquivoDeploy  = new File("C:/Conversor/Excel/" + "pagar_" + contabilidade + "_" + nome + "_ancora_" + cutString(fl.getAbsolutePath(), fl.getAbsolutePath().replaceAll("\\\\", "/").lastIndexOf("/")+1));
															
															try { FileUtil.copyFolder(fl, arquivoDeploy);}
															catch (Exception e) {logger.logInfo("ERRO COPIANDO " + e.getMessage());}
															
															try { 
																FileUtil.deleteFile(fl);
															} catch (Exception XX) {} 
																
															continue;
														}
													}
												}
                                                
                                                if (fl.getAbsolutePath().toUpperCase().contains("ROTA.TXT")) {
												
													File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
 													File arquivoPortal  = new File(RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/arquivos/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpoint.script_APAGAR.txt");
													
													FileUtil.copyFolder(arquivoDeploy, arquivoPortal);
													
													try { 
															FileUtil.deleteFile(fl);
													} catch (Exception XX) {} 
													
													try { 
														FileUtil.deleteFile(fl);
													} catch (Exception XX) {} 
													
													continue;
												}
												
												if (fl.getAbsolutePath().toUpperCase().contains(".SCRIPT")) {
												
 												    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                                     
 													FileUtil.copyFolder(fl, arquivoDeploy);

                                                    try { 
                                                        	FileUtil.deleteFile(fl);
                                                    } catch (Exception XX) {} 
                                                    
													 
													continue;
												}
												
												
                                                if((fl.length() >= sizeLimit * 5) || (fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX"))){                    // processar apenas arquivos MENORES que o limite
													// processar apenas arquivos MENORES que o limite
                                                    arquivoGrande = fl.getName();
                                                    jSdir = fl.getAbsolutePath();
                                                    jSdir = jSdir.replaceAll("\\\\", "/");
                                                    jSdir = cutString(jSdir, 0, jSdir.lastIndexOf("/"));
                                                    arquivoGrande = "Arquivo-Grande" + arquivoGrande + "_PAGAR";
                                                    //jStatus = new JSONObject();
                                                    //putStatus(dirName, "", jStatus, logger);
                                                    //    putStatus(jSdir, arquivoGrande/* .replaceAll(" ", "-") */ + ".err", jStatus, logger);
                                                }
												
												/*
												else {
												
													double sizeBig = (Math.pow(1024,2)); //MiB  

													if(fl.length() >= sizeBig) {
														String filenameGrande = fl.getAbsolutePath();
														filenameGrande = filenameGrande.replaceAll("\\\\", "/");
														if (!filenameGrande.endsWith("/Processado")) {
															if (!FileUtil.fileExists(diretorio + "/Processado/Grande")) {
																FileUtil.mkDir(diretorio + "/Processado/Grande");
															}
															FileUtil.moveToDir(filenameGrande, diretorio + "/Processado/Grande");
														}
													}
												}*/
														
                                            }
                                            for (File fl: files) {
												
												logger.logInfo(" Size limit " + oicContabil +" | " +arquivoGrande+ " <<>> " + fl.getName() + " | " + fl.isFile());
												
                                                if (arquivoGrande.equals("")) {
													
                                                    try {

                                                        //renomear arquivo que nao possua extensao para (.txt)
                                                        try {
														if(fl.isFile() && !fl.getName().contains(".")){
                                                            String flStr = fl.getAbsolutePath()+".txt";
                                                            File flTemp = new File(flStr);
                                                            fl.renameTo(flTemp);
                                                        }
														} catch (Exception e) {
															logger.logInfo("ERRO1 " + e.getMessage());
														}

                                                        if (fl.isFile() && oicContabil.equals("NAO")) {

                                                            //envia email CONTABILIDADE INATIVA (canal,machado)
                                                            subject = "Contabilidade INATIVA com arquivos a serem processados";
                                                            // enviaEmailContabilidadeInativa(contabilidade, fl.getName(), nome, subject, emailOic, sendToName, "CONTABILIDADE INATIVA", "APagar", logger);
                                                            //mover para processado arquivo
                                                            filename = fl.getAbsolutePath();
                                                            filename = filename.replaceAll("\\\\", "/");
                                                            FileUtil.moveToDir(filename, diretorio + "/Processado");
															try {
															if (fl.getName().toUpperCase().contains("_ID")){
										
																LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																
																String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
																
																atualizaProtocolo(oicContabil, "", diretorioProtocolo, protocolo_id, apiWeb, logger);
															}
															
															} catch (Exception e) {
																logger.logInfo("ERRO2 " + e.getMessage());
															}
															continue;

                                                        } else if(fl.isFile() && oicContabil.equals("SIM")){

                                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                                            if(oicEmpresa.equals("NAO")){

                                                                //envia email EMPRESA INATIVA (canal,machado,fechamento)
                                                                emailOic = emailOic + ", " + emailResponsavel;
                                                                subject = "Empresa INATIVA com arquivos a serem processados";
                                                                // enviaEmailEmpresaInativa(contabilidade, fl.getName(), nome, subject, emailOic, sendToName, "EMPRESA INATIVA", "APagar", logger);

                                                                //mover para processado arquivo
                                                                filename = fl.getAbsolutePath();
                                                                filename = filename.replaceAll("\\\\", "/");
                                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {
                                                                String nomeRota = contabilidade + "." + nome.substring(0,nome.indexOf("_#")) + "_ContasPagas";
																
																// logger.logInfo("TESTANDODOO " + fl.getName() + " | " + extensaoArquivo.toUpperCase());
																//Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - Início
																if (fl.getName().toUpperCase().contains("_ID")) {
																	LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																	// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																	String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																	
																	boolean converteu = converteuPDF(protocolo_id, apiWeb, logger);
																	
																	if (!converteu) continue;
																}
																
                                                                try{
																
                                                                    logger.logInfo("Antes Padrao   " + contabilidade +"_"+ nome.substring(0,nome.indexOf("_#")));
																
 																	String tipoProduto = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_TIPO_PRODUTO");
																	String idRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ID_ROTEIRO_PAGAR");
																	String codRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ROTEIRO_PAGAR");
																	
																	// executa rota que atualiza os roteiros das empresas
																	// RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
																	atualizaArquivoRoteiro(contabilidade, nome.substring(0,nome.indexOf("_#")), logger);
																	// logger.logInfo("fl.getName() -> " + fl.getName());


                                                                    try {
																		String rodaPadrao = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_PLANILHA_PADRAO_PAGAR");
																		// logger.logInfo("PPP " + rodaPadrao + " | " + contabilidade);

                                                                        if (rodaPadrao.toUpperCase().trim().equals("TRUE")) {															
																			// PartnerConnection connection = Connector.newConnection(config);
																			preparaArquivo(idRoteiro, "Contas PAGAS", contabilidade, nome.substring(0,nome.indexOf("_#")), dirName, dirNameW, config, logger);

																			nomeRota = getNomeContabilidade() + "." + getNomeContabilidade() +  "_ContasPagas";
 																			double tempoInicio1 = System.currentTimeMillis();
																			RouteEngine.execRoute(nomeRota);
																		    logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
																			rodouRota = true;
                                                                         }
                                                                     }

                                                                    catch (Exception xx) {
                                                                        logger.logInfo("ERRO AO RODAR ROTEIRO " + xx.getMessage());
                                                                    }
																	
																	// logger.logInfo("WFIILI " + tipoProduto);
																	
																	if (!tipoProduto.contains("ILIMITADA")) {
																		preparaArquivoEspecifico(idRoteiro, "Contas PAGAS", contabilidade, nome.substring(0,nome.indexOf("_#")), dirName, dirNameW,  logger);

																		// Atualia o peoperties eperara para rodar a rota especifica
																		// caso o arquvo nao tenha sido rodado na rota padrao

																		StringBuilder txt1 = new StringBuilder();    
																		String empresaProperties = dirNameW + "empresa.properties";
																		FileWriter writer = new FileWriter(empresaProperties);
																		txt1.append("NOME_EMPRESA = " + nome.substring(0,nome.indexOf("_#")));
																		txt1.append("\r\n");
																		txt1.append("NOME_CONTABILIDADE = " + contabilidade);
																		txt1.append("\r\n");
																		txt1.append("MANTEM_ARQUIVO = NAO");
																		writer.writeNewFile(txt1.toString());
	 
																		empresaProperties = dirName + "empresa.properties";
																		writer = new FileWriter(empresaProperties);
																		writer.writeNewFile(txt1.toString());  

																		File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
																		File eServidor  = new File("C:/inout/docs/processos/producao.txt");
																		File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
																		if(eServidor.exists()) {
																			FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
																			arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
																		}

																		File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "_ContasPagasEndpointA.script");
																		if (nome.substring(0,nome.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !nome.substring(0,nome.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/OTWBussola/LeituraBalanceteEndpointA.script");

																		logger.logDebug("ORIGEM  " + arquivoOrigem.getName());
																		logger.logDebug("DESTINO " + arquivoDestino.getName());
																		FileUtil.copyFolder(arquivoOrigem, arquivoDestino);


																		nomeRota = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "." + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) +  "_ContasPagas";
																		if (nome.substring(0,nome.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !nome.substring(0,nome.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) nomeRota = "OTWBussola.LeituraBalancete";

																		logger.logInfo("ROTA   " + nomeRota + "<>" + arquivoOrigem);

																		double tempoInicio1 = System.currentTimeMillis();
																		RouteEngine.execRoute(nomeRota);
																		logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
																		rodouRota = true;
																		rotasOk = true;
																	}
                                                                    
																	int antesRodar =  files.length;
                                                                    boolean naoGerouDepara = true;
													
													
													
																	// passos para atualizar o integrador 4.0 
																	// PASSO 1: olhar se gerou DEPARA
																	// SE ENCONTRAR DEPARA, ATUALIZA STATUS E SEGUE SEM ENVIAR ARQUIVO PRONTO
																			
																	if (naoGerouDepara && fl.getName().toUpperCase().contains("_ID")) {
																		String diretoriArquivos = "/inout/contabil/"+contabilidade + "/" + nome + "/DePara/";
																		File fileArq = new File(diretoriArquivos);
																		File [] filesArquivos = fileArq.listFiles();
																		try {

																			String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
																			String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
																			String idSFContabilidade = props.get("CONTABILIDADE_ID");

																			if (FileUtil.dirHasFiles(diretoriArquivos)) {
																				for (File fileDePara: filesArquivos) {

																					if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
																						 fileDePara.getName().toUpperCase().contains(".STATUS")) && 
																						fileDePara.getName().toUpperCase().contains("PAGAR")) {
																						//sprint conversorpdf
																						// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																						String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																						String nomeArquivoApagado = cutString(fl.getName().toUpperCase(), "_ID");
																						nomeArquivoApagado = cutString(nomeArquivoApagado, "_", nomeArquivoApagado.lastIndexOf("."));
																						boolean continuaConversor = false;
																						LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																						
																						// if (fileDePara.getName().toUpperCase().contains("LEUCONVERSORANTIGO")) {
																							String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocolo_id, nomeArquivoApagado, logger);
																							// JWR 03072023
																							/*if(fileDePara.exists()) {
																								fileDePara.delete();
																								continue;
																							}*/
																						// }
																						//Sprint conversorpdf
																						//Verifica se encontramos algum erro ou status 3 de 4 na pasta do depara, da empresa
																						//Caso encontre, e tenha um id de protocolo, procura algum arquivo na pasta do conversor de pdf
																						//relacionado ao id do protocolo em questao e caso encontre, usaremos esse arquivo para reprocessar a rota.
																						// if (!fileDePara.getName().toUpperCase().contains(".ERR")) continuaConversor = buscaProtocoloConversor(protocolo_id, apiWeb);
																						// if (continuaConversor) continue;
																						atualizaProtocolo("", fileDePara.getName(), diretoriArquivos, protocolo_id, apiWeb, logger);
																						
																						if(fileDePara.exists()) {
																							fileDePara.delete();
																							continue;
																						}
																					}
 


																					if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

																					String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																					String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");

																					if (!idLoteFila.equals(idfileDePara)) continue;


																					LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

																					// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																					if(fl.getName().toUpperCase().contains("_ID")) {
																						String apagouConversor = apagaArquivoConversor(diretoriArquivos, cutString(fl.getName().toUpperCase(), "_ID", "_"), "", logger);
																						String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "1", "Pendencia de preenchimento de contas para este arquivo.",  logger);
 																						naoGerouDepara = false;
																					} 

																				}

																			}
																		}
																		catch (Exception xx) {}
																	}
																	
																	// PASSO 2: olhar se gerou arquivo pronto e postar no portal.
																	if (naoGerouDepara)	{											
																		String diretoriArquivos = "/inout/contabil/"+contabilidade + "/arquivos/";
																		File fileArq = new File(diretoriArquivos);
																		File [] filesArquivos = fileArq.listFiles();
																		
 																		
																		try {

																			String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
																			String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
																			String idSFContabilidade = props.get("CONTABILIDADE_ID");

																			JSONObject auxObjBucket		= new JSONObject();
																			auxObjBucket.put("server",	SERVER_INTEGRADOR_DEV);
																			auxObjBucket.put("mapping",	"/api/v1/arquivos_empresas");

																			if (FileUtil.dirHasFiles(diretoriArquivos)) {
																				for (File fileDePara: filesArquivos) {
																					

																					if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;
					 
																					String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																					String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");
 
																					if (!idLoteFila.equals(idfileDePara)) continue;
																					
   
																					LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
  
																					JSONObject jBucket = new JSONObject();
																					jBucket.put("cnpjContabilidade",	cnpjContabilidade);
																					jBucket.put("cnpjEmpresa",			cnpjEmpresa);
																					if (fileDePara.getName().contains("_RECEBER")) {
																						jBucket.put("tipoMovimento", "REC");
																					}
																					else {
																						jBucket.put("tipoMovimento", "PAG");
																					}
																					String nomeArquivo64 = "";


																					jBucket.put("tipoArquivo", "TXT");
																					jBucket.put("nomeArquivo", fileDePara.getName());
																					nomeArquivo64 = fileDePara.getName();

																					String dirRouteNameId= "c:/buckets/oic-arquivo-pronto/"+contabilidade+"/"+DateUtil.dateToString(new Date(), "yyyy/MM/dd")+"/";
																					if (!FileUtil.fileExists(dirRouteNameId)) {
																						FileUtil.mkDir(dirRouteNameId);
																					}

																					File arquivoOrigemId = new File("c:/inout/contabil/"+contabilidade+"/arquivos/" + nomeArquivo64);
																					
 
																					if (arquivoOrigemId.exists() && ((!fileDePara.getName().toUpperCase().contains("RESUMO_LOTE_") && !fileDePara.getName().toUpperCase().contains("RESUMO_APOS_IMPORTACAO")
																						&& !fileDePara.getName().toUpperCase().contains("RESUMO_LOGS_IMPORTACAO")) || fornecedorUnico.contains("EXIBE_RESUMO"))) {
																						File arquivoDeployId  = new File(dirRouteNameId + nomeArquivo64);
																						
																						//JWR Daqui ateh a linha 2123 nao esta deixando o arquivo pronto na pasta arquivos da contabilidade dmassociados empresa treze
																						//estah jogando direto para o enviados. Obs: eh um arquivo .omc
																						
																						FileUtil.copyFolder(arquivoOrigemId, arquivoDeployId);
 																						nomeArquivo64 = "https://"+servDinamic+".ottimizza.com.br:55325/storage/"  + Base64.getEncoder().encodeToString((dirRouteNameId + nomeArquivo64).getBytes());
																						jBucket.put("linkArquivo", nomeArquivo64);
																						try {
																							FileUtil.moveToDir("c:/inout/contabil/"+contabilidade+"/arquivos/" + fileDePara.getName(), "c:/inout/contabil/"+contabilidade+"/arquivos/enviados");
																						} catch (Exception xx) {

																						}

																						try {

																							// colocado para nao enviar arquivo de resumo lote
																							// if (!fileDePara.getName().toUpperCase().contains("RESUMO_") || fornecedorUnico.contains("EXIBE_RESUMO")) {
																								String uriIntegrador = String.format("%s%s", auxObjBucket.optString("server"), auxObjBucket.optString("mapping"));
 																								String retorno = genericPostId(uriIntegrador, jBucket, apiWeb.token, logger); 
 
																							// }
																						}
																						catch (Exception xx) {
																							
																							logger.logInfo(" erro genericPostId 2526 "  + xx);

 
																						}
					 
																						// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																						if(fl.getName().toUpperCase().contains("_ID")) {
																							String apagouConversor = apagaArquivoConversor(diretoriArquivos, idLoteFila, "", logger);
																							String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado.",  logger);
																						
																						} 
																					}

																				}

																			}
																		}
																		catch (Exception xx) {}
																	}

				 

                                                                    File fileDepoisLista = new File(diretorio);
                                                                    File [] filesDepois = fileDepoisLista.listFiles();
                                                                    int depoisRodar =  filesDepois.length;
 																	 
																	// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
																	// move arquivo para pata processado para nao ficar em loop
																	for (File fileDePoisComparar: filesDepois) {
																	 	
																		if (fileDePoisComparar.getAbsolutePath().equals(fl.getAbsolutePath()) && fl.exists()) {
																			String moveFilename = fl.getAbsolutePath();
																			moveFilename = moveFilename.replaceAll("\\\\", "/");
																			FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
																		}
																	}

                                                                    if (antesRodar == depoisRodar) {
                                                                        String planilhaErro = dirName + nome + "/DePara" + "/empresa_PAGAR.err";
                                                                        FileWriter writerErro = new FileWriter(planilhaErro);
                                                                        writerErro.writeNewFile(planilhaErro.toString() + "<<>>" + antesRodar + "<<>>" + depoisRodar);
                                                                        if(fl.exists()) {
                                                                            //fl.delete();
                                                                            filename = fl.getAbsolutePath();
                                                                            filename = filename.replaceAll("\\\\", "/");
                                                                            FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                                        }
                                                                        antesRodar--;
                                                                    }
                                                                    
                                                                    
                                                                    if (FileUtil.fileExists(dirName + nome + "/DePara" + "/02--Etapa 2 de 4--PAGAR.status")) {
                                                                        criaAvisoErroLayout( dirName + nome + "/DePara" + "/02--Etapa 2 de 4--PAGAR.status", logger);

                                                                    }


                                                                }catch(Exception aa){
                                                                    subject = "Nao existe integracao de contas Pagas";

                                                                    JSONObject jsNaoExiste = new JSONObject();
                                                                    jsNaoExiste.put("NOMECONTABILIDADE", contabilidade);
                                                                    jsNaoExiste.put("SENDTONAME", sendToName);
                                                                    jsNaoExiste.put("SUBJECT", subject);
                                                                    //jsNaoExiste.put("EMAILRESPONSAVEL", emailResponsavel+",suporte@ottimizza.com.br");
                                                                    //if(filename.toUpperCase().contains("OTTIMIZZAF"))
                                                                    jsNaoExiste.put("EMAILRESPONSAVEL", "suporte@ottimizza.com.br");
                                                                    jsNaoExiste.put("NOMEARQUIVO", fl.getName());
                                                                    jsNaoExiste.put("TIPOINTEGRACAO", "Pagas");
                                                                    jsNaoExiste.put("NOMEEMPRESA", nome);

                                                                    // enviaEmailNaoExisteRota(jsNaoExiste, logger);

                                                                    //mover
                                                                    filename = fl.getAbsolutePath();
                                                                    filename = filename.replaceAll("\\\\", "/");
                                                                    FileUtil.moveToDir(filename, diretorio + "/Processado");

                                                                }

                                                            } else if(extensaoArquivo.equals(".xls")) {
                                                                //emailArquivoErrado xls
                                                                subject = "Arquivo .xls nao suportado por OTTIMIZZA Contabil";

                                                                //enviaAvisoSobreArquivoErrado(fl.getName(), nome, subject, emailResponsavel, sendToName, "XLS", "APagar", logger);

                                                                //mover para processado qualquer arquivo
                                                                filename = fl.getAbsolutePath();
                                                                filename = filename.replaceAll("\\\\", "/");
                                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                                            } else {
                                                                //emailArquivoErrado outros arquivos
                                                                subject = "Arquivo nao suportado por OTTIMIZZA Contabil";

                                                                //enviaAvisoSobreArquivoErrado(fl.getName(), nome, subject, emailResponsavel, sendToName, "OUTROS", "APagar", logger);

                                                                //mover para processado qualquer arquivo
                                                                filename = fl.getAbsolutePath();
                                                                filename = filename.replaceAll("\\\\", "/");
                                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                            }
                                                        }
                                                    } catch (Exception eee) {
                                                        logger.logError("1Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                                    }
                                                }else{ // envia email e move pra processado
                                                    //////////////////
                                                     //////////////////
													subject = "ARQUIVO GRANDE ("+fl.length()/1024/1024+" MiB) -" + getNomeContabilidadeWorkflow() + "-" + empresa + "-" + operacao;
													StringBuilder msg = new StringBuilder();
													msg.append("<html>\n");
													msg.append("<head>\n");
													msg.append("</head>\n");
													msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
													msg.append("<p><font style=\"font-size: 10pt\">O arquivo \"" + arquivoGrande + "\" muito grande, tamanho maximo permitido para XLSX: (" + sizeLimit/1024/1024 + " Mb).</font></p>\n");
													msg.append("</body>\n");
													msg.append("</html>\n");

													filename = fl.getAbsolutePath();
													filename = filename.replaceAll("\\\\", "/");
													
													if (arquivoGrande.toUpperCase().contains("_ID")) {
														LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
														// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
														String protocolo_id = cutString(arquivoGrande.toUpperCase(), "_ID", "_");
														
														String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
														
														atualizaProtocolo("", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
													}
													
													if (!filename.endsWith("/Processado")) FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                }
                                            }
                                        }

                                        ///////////////////////////////////////////////////////////
                                        // ARECEBER ///////////////////////////////////////////////
                                        ///////////////////////////////////////////////////////////
                                        operacao = "AReceber";
                                        diretorio = dirName + nome + "/"+ operacao;
                                        file2 = new File(diretorio);

                                        // renomeia arquivos com extens?o .XLSX 
                                        arquivosCaixaAlta = file2.listFiles();
                                        if (FileUtil.dirHasFiles(diretorio)) {

                                            for (File fl: arquivosCaixaAlta) {
												

                                                if(fl.length() < sizeLimit) {                    // processar apenas arquivos MENORES que o limite
                                                    try {
                                                       String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").replaceAll("\\.PDF","_\\.pdf").toLowerCase();
                                                        if (fl.getAbsolutePath().contains(".XLSX") || fl.getAbsolutePath().contains(".PDF")) {


                                                            File fileDestino = new File(arquivoDestino);
                                                            FileUtil.copyFolder(fl, fileDestino);
                                                            FileUtil.deleteFile(fl);
                                                        }
                                                    }
                                                    catch (Exception xx) {}
													
													try {
                                                        String arquivoDestino = fl.getAbsolutePath().replace("[","").replace("]","").replace("{","").replace("}","").replace("%","");
                                                        if (fl.getAbsolutePath().contains("[") || fl.getAbsolutePath().contains("]") || fl.getAbsolutePath().contains("{") || fl.getAbsolutePath().contains("}") || fl.getAbsolutePath().contains("%")) {
															File fileDestino = new File(arquivoDestino);
                                                            FileUtil.copyFolder(fl, fileDestino);
                                                            FileUtil.deleteFile(fl);
                                                        }
                                                    }
													catch (Exception xx) {}
                                                }
												
												if(fl.getName().toUpperCase().contains("..")){
													try {
														String arquivoExtensaoCorreta = fl.getAbsolutePath().replaceAll("\\..","\\.");
														// if (fl.getAbsolutePath().contains(".XLSX")) {

															File fileDestino = new File(arquivoExtensaoCorreta);
															FileUtil.copyFolder(fl, fileDestino);
															FileUtil.deleteFile(fl);
														//}
													}
													catch (Exception xx) {}
												}
                                            }
                                        }

                                        files = file2.listFiles();
                                        emailOic = emailCanal;
                                        if (FileUtil.dirHasFiles(diretorio)) {

                                            for (File fl: files) {
												
 												postStatus(servDinamic.toUpperCase(), INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), contabilidade, empresa, "RECEBER", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")));
                                                
												String rodaConversor = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EQUIPE_FECHAMENTO");
												
												//Conversor
												if (rodaConversor != null) {
													if (rodaConversor.contains(",") && rodaConversor.toUpperCase().contains("CONVERTE") && !fl.getAbsolutePath().toUpperCase().contains(".CSV")
														&& fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
															
														if (fl.getAbsolutePath().toUpperCase().contains(".XLSX") && rodaConversor.contains("XLSX")) {
															File arquivoDeploy  = new File("C:/Conversor/Excel/" + "receber_" + contabilidade + "_" + nome + "_ancora_" + cutString(fl.getAbsolutePath(), fl.getAbsolutePath().replaceAll("\\\\", "/").lastIndexOf("/")+1));
															
															try { FileUtil.copyFolder(fl, arquivoDeploy);}
															catch (Exception e) {logger.logInfo("ERRO COPIANDO " + e.getMessage());}
															
															try { 
																FileUtil.deleteFile(fl);
															} catch (Exception XX) {} 
																
															continue;
														}
													}
												}
																
												if (fl.getAbsolutePath().toUpperCase().contains("ROTA.TXT")) {

                                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                                    File arquivoPortal  = new File(RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/arquivos/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script_RECEBER.txt");

                                                    FileUtil.copyFolder(arquivoDeploy, arquivoPortal);
													
													try { 
														FileUtil.deleteFile(fl);
													} catch (Exception XX) {} 

                                                    continue;
                                                }

                                                if (fl.getAbsolutePath().toUpperCase().contains(".SCRIPT")) {

                                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");

                                                    FileUtil.copyFolder(fl, arquivoDeploy);


                                                    try { 
                                                        FileUtil.deleteFile(fl);
                                                    } catch (Exception XX) {} 


                                                    continue;
                                                }
                                                
 

												if((fl.length() >= sizeLimit * 5) || (fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX"))){                    // processar apenas arquivos MENORES que o limite
                                                    arquivoGrande = fl.getName();
                                                    jSdir = fl.getAbsolutePath();
                                                    jSdir = jSdir.replaceAll("\\\\", "/");
                                                    jSdir = cutString(jSdir, 0, jSdir.lastIndexOf("/"));
                                                    arquivoGrande = "Arquivo-Grande" + arquivoGrande + "_RECEBER";
                                                    //jStatus = new JSONObject();
                                                    //putStatus(dirName, "", jStatus, logger);
                                                    //    putStatus(jSdir, arquivoGrande/* .replaceAll(" ", "-") */ + ".err", jStatus, logger);
                                                }
												
												
												/*else {
												
													double sizeBig = (Math.pow(1024,2)); //MiB  

													if(fl.length() >= sizeBig) {
														String filenameGrande = fl.getAbsolutePath();
														filenameGrande = filenameGrande.replaceAll("\\\\", "/");
														if (!filenameGrande.endsWith("/Processado")) {
															if (!FileUtil.fileExists(diretorio + "/Processado/Grande")) {
																FileUtil.mkDir(diretorio + "/Processado/Grande");
															}
															FileUtil.moveToDir(filenameGrande, diretorio + "/Processado/Grande");
														}
													}
												}*/
                                            }
                                            for (File fl: files) {
												
 
                                                if (arquivoGrande.equals("")) {              // processar apenas arquivos MENORES que o limite

                                                    try {
                                                        //renomear arquivo que nao possua extensao para (.txt)
                                                        if(fl.isFile() && !fl.getName().contains(".")){
                                                            String flStr = fl.getAbsolutePath()+".txt";
                                                            File flTemp = new File(flStr);
                                                            fl.renameTo(flTemp);
                                                        }

                                                        if (fl.isFile() && oicContabil.equals("NAO")) {

                                                            //envia email CONTABILIDADE INATIVA (canal,machado)
                                                            subject = "Contabilidade INATIVA com arquivos a serem processados";
                                                            // enviaEmailContabilidadeInativa(contabilidade, fl.getName(), nome, subject, emailOic, sendToName, "CONTABILIDADE INATIVA", "AReceber", logger);
                                                            //mover para processado arquivo
                                                            filename = fl.getAbsolutePath();
                                                            filename = filename.replaceAll("\\\\", "/");
                                                            FileUtil.moveToDir(filename, diretorio + "/Processado");
															
															if (fl.getName().toUpperCase().contains("_ID")){
										
																LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																
																String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
																
																atualizaProtocolo(oicContabil, "", diretorioProtocolo, protocolo_id, apiWeb, logger);
															}
															continue;
                                                        } else if(fl.isFile() && oicContabil.equals("SIM")){

                                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                                            if(oicEmpresa.equals("NAO")){

                                                                //envia email EMPRESA INATIVA (canal,machado,fechamento)
                                                                subject = "Empresa INATIVA com arquivos a serem processados";
                                                                emailOic = emailOic + ", " + emailResponsavel;
                                                                // enviaEmailEmpresaInativa(contabilidade, fl.getName(), nome, subject, emailOic, sendToName, "EMPRESA INATIVA", "AReceber", logger);

                                                                //mover para processado arquivo
                                                                filename = fl.getAbsolutePath();
                                                                filename = filename.replaceAll("\\\\", "/");
                                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {

                                                                //executa a rota
                                                                String nomeRota = contabilidade + "." + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidas";
																
																//Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - Início
																if (fl.getName().toUpperCase().contains("_ID")) {
																	LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																	// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																	String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																	
																	boolean converteu = converteuPDF(protocolo_id, apiWeb, logger);
																	
																	if (!converteu) continue;
																}
																
                                                                try{
                                                                    
																	logger.logInfo("Antes Padrao   " + contabilidade +"_"+ nome.substring(0,nome.indexOf("_#")));
                                                                     
																	String tipoProduto = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_TIPO_PRODUTO");
																	String idRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ID_ROTEIRO_RECEBER");
																	String codRoteiro  = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_ROTEIRO_RECEBER");
																	
																	// executa rota que atualiza os roteiros das empresas
																	// RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
																	atualizaArquivoRoteiro(contabilidade, nome.substring(0,nome.indexOf("_#")), logger);
																	// logger.logInfo("fl.getName() -> " + fl.getName());
																		
 																	
                                                                   try {

                                                                        String rodaPadrao = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_PLANILHA_PADRAO_RECEBER");
																		// logger.logInfo("PPP " + rodaPadrao + " | " + contabilidade);

                                                                        if (rodaPadrao.toUpperCase().trim().equals("TRUE")) {															
																			// PartnerConnection connection = Connector.newConnection(config);  
                                                                             preparaArquivo(idRoteiro, "Contas RECEBIDAS", contabilidade,  nome.substring(0,nome.indexOf("_#")), dirName, dirNameW, config, logger);
																			 // logger.logInfo("ANTES ROTA PADRAO  " + nomeRota);

                                                                            nomeRota = getNomeContabilidade() + "." + getNomeContabilidade() +  "_ContasRecebidas";
                                                                            double tempoInicio1 = System.currentTimeMillis();
																			RouteEngine.execRoute(nomeRota);
																		    logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
																			rodouRota = true;
 																			
                                                                        } 


                                                                    }

                                                                    catch (Exception xx) {
                                                                        logger.logInfo("ERRO AO RODAR ROTEIRO");
                                                                    }
																	
																	if (!tipoProduto.contains("ILIMITADA")) {
																		preparaArquivoEspecifico(idRoteiro, "Contas RECEBIDAS", contabilidade,  nome.substring(0,nome.indexOf("_#")), dirName, dirNameW,  logger);

																		StringBuilder txt = new StringBuilder();    
																		String empresaProperties = dirNameW + "empresa.properties";
																		FileWriter writer = new FileWriter(empresaProperties);
																		txt.append("NOME_EMPRESA = " + nome.substring(0,nome.indexOf("_#")));
																		txt.append("\r\n");
																		txt.append("NOME_CONTABILIDADE = " + contabilidade);
																		txt.append("\r\n");
																		txt.append("MANTEM_ARQUIVO = NAO");
																		writer.writeNewFile(txt.toString());

																		empresaProperties = dirName + "empresa.properties";
																		writer = new FileWriter(empresaProperties);
																		writer.writeNewFile(txt.toString()); 
																	  

																		File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
																		File eServidor  = new File("C:/inout/docs/processos/producao.txt");
																		File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
																		if(eServidor.exists()) {
																			FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
																			arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
																		}

																		File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "_ContasRecebidasEndpointA.script");

																		FileUtil.copyFolder(arquivoOrigem, arquivoDestino);
																		nomeRota = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "." + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) +  "_ContasRecebidas";

																		logger.logInfo("ROTA   " + nomeRota + "<>" + arquivoOrigem);

																		double tempoInicio1 = System.currentTimeMillis();
																		RouteEngine.execRoute(nomeRota);
																		logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
																		rodouRota = true;
																		rotasOk = true;
																	} 
																	 
																	int antesRodar =  files.length;
																	boolean naoGerouDepara = true;
													
													
													
																	// passos para atualizar o integrador 4.0 
																	// PASSO 1: olhar se gerou DEPARA
																	// SE ENCONTRAR DEPARA, ATUALIZA STATUS E SEGUE SEM ENVIAR ARQUIVO PRONTO
																			
																	if (naoGerouDepara && fl.getName().toUpperCase().contains("_ID")) {
																		String diretoriArquivos = "/inout/contabil/"+contabilidade + "/" + nome + "/DePara/";
																		File fileArq = new File(diretoriArquivos);
																		File [] filesArquivos = fileArq.listFiles();
																		try {

																			String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
																			String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
																			String idSFContabilidade = props.get("CONTABILIDADE_ID");

																			if (FileUtil.dirHasFiles(diretoriArquivos)) {
																				for (File fileDePara: filesArquivos) {

																					if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
																					 fileDePara.getName().toUpperCase().contains(".STATUS")) && 
																					fileDePara.getName().toUpperCase().contains("RECEBER")) {
																					//sprint conversorpdf
																					// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																					String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
																					String nomeArquivoApagado = cutString(fl.getName().toUpperCase(), "_ID");
																					nomeArquivoApagado = cutString(nomeArquivoApagado, "_", nomeArquivoApagado.lastIndexOf("."));
																					boolean continuaConversor = false;
																					LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																					
																					// if (fileDePara.getName().toUpperCase().contains("LEUCONVERSORANTIGO")) {
																						String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocolo_id, nomeArquivoApagado, logger);
																						// JWR 03072023
																						/*if(fileDePara.exists()) {
																							fileDePara.delete();
																							continue;
																						}*/
																					// }
																					//Sprint conversorpdf
																					//Verifica se encontramos algum erro ou status 3 de 4 na pasta do depara, da empresa
																					//Caso encontre, e tenha um id de protocolo, procura algum arquivo na pasta do conversor de pdf
																					//relacionado ao id do protocolo em questao e caso encontre, usaremos esse arquivo para reprocessar a rota.
																					// if (!fileDePara.getName().toUpperCase().contains(".ERR")) continuaConversor = buscaProtocoloConversor(protocolo_id, apiWeb);
																					// if (continuaConversor) continue;
																					atualizaProtocolo("", fileDePara.getName(), diretoriArquivos, protocolo_id, apiWeb, logger);
																					
																					if(fileDePara.exists()) {
																						fileDePara.delete();
																						continue;
																					}
																				}



																					if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

																					String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																					String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");

																					if (!idLoteFila.equals(idfileDePara)) continue;


																					LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

																					// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																					if(fl.getName().toUpperCase().contains("_ID")) {
																						String apagouConversor = apagaArquivoConversor(diretoriArquivos, cutString(fl.getName().toUpperCase(), "_ID", "_"), "", logger);
																						String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "1", "Pendencia de preenchimento de contas para este arquivo.",  logger);
																						naoGerouDepara = false;
																					} 

																				}

																			}
																		}
																		catch (Exception xx) {}
																	}
																	
																	// PASSO 2: olhar se gerou arquivo pronto e postar no portal.
																	if (naoGerouDepara)	{											
																		String diretoriArquivos = "/inout/contabil/"+contabilidade + "/arquivos/";
																		File fileArq = new File(diretoriArquivos);
																		File [] filesArquivos = fileArq.listFiles();
																		try {

																			String cnpjEmpresa		 = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
																			String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
																			String idSFContabilidade = props.get("CONTABILIDADE_ID");

																			JSONObject auxObjBucket		= new JSONObject();
																			auxObjBucket.put("server",	SERVER_INTEGRADOR_DEV);
																			auxObjBucket.put("mapping",	"/api/v1/arquivos_empresas");

																			if (FileUtil.dirHasFiles(diretoriArquivos)) {
																				for (File fileDePara: filesArquivos) {

																					if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;
					 
																					String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
																					String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");

																					if (!idLoteFila.equals(idfileDePara)) continue;
																					
   
																					LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
  
																					JSONObject jBucket = new JSONObject();
																					jBucket.put("cnpjContabilidade",	cnpjContabilidade);
																					jBucket.put("cnpjEmpresa",			cnpjEmpresa);
																					if (fileDePara.getName().contains("_RECEBER")) {
																						jBucket.put("tipoMovimento", "REC");
																					}
																					else {
																						jBucket.put("tipoMovimento", "PAG");
																					}
																					String nomeArquivo64 = "";


																					jBucket.put("tipoArquivo", "TXT");
																					jBucket.put("nomeArquivo", fileDePara.getName());
																					nomeArquivo64 = fileDePara.getName();

																					String dirRouteNameId= "c:/buckets/oic-arquivo-pronto/"+contabilidade+"/"+DateUtil.dateToString(new Date(), "yyyy/MM/dd")+"/";
																					if (!FileUtil.fileExists(dirRouteNameId)) {
																						FileUtil.mkDir(dirRouteNameId);
																					}

																					File arquivoOrigemId = new File("c:/inout/contabil/"+contabilidade+"/arquivos/" + nomeArquivo64);
																					
 
																					if (arquivoOrigemId.exists() && ((!fileDePara.getName().toUpperCase().contains("RESUMO_LOTE_") && !fileDePara.getName().toUpperCase().contains("RESUMO_APOS_IMPORTACAO")
																						&& !fileDePara.getName().toUpperCase().contains("RESUMO_LOGS_IMPORTACAO")) || fornecedorUnico.contains("EXIBE_RESUMO"))) {

																						File arquivoDeployId  = new File(dirRouteNameId + nomeArquivo64);
																						FileUtil.copyFolder(arquivoOrigemId, arquivoDeployId);
 																						nomeArquivo64 = "https://"+servDinamic+".ottimizza.com.br:55325/storage/"  + Base64.getEncoder().encodeToString((dirRouteNameId + nomeArquivo64).getBytes());
																						jBucket.put("linkArquivo", nomeArquivo64);
																						try {
																							FileUtil.moveToDir("c:/inout/contabil/"+contabilidade+"/arquivos/" + fileDePara.getName(), "c:/inout/contabil/"+contabilidade+"/arquivos/enviados");
																						} catch (Exception xx) {

																						}

																						try {

																							// colocado para nao enviar arquivo de resumo lote
																							// if (!fileDePara.getName().toUpperCase().contains("RESUMO_") || fornecedorUnico.contains("EXIBE_RESUMO")) {
																								String uriIntegrador = String.format("%s%s", auxObjBucket.optString("server"), auxObjBucket.optString("mapping"));
 																								String retorno = genericPostId(uriIntegrador, jBucket, apiWeb.token, logger); 
 																								
																							// }
																						}
																						catch (Exception xx) {
 
																						}
					 
																						// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
																						if(fl.getName().toUpperCase().contains("_ID")) {
																							String apagouConversor = apagaArquivoConversor(diretoriArquivos, idLoteFila, "", logger);
																							String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado.",  logger);
																							
																						} 
																					}

																				}

																			}
																		}
																		catch (Exception xx) {}
																	}
 
                                                                    File fileDepoisLista = new File(diretorio);
                                                                    File [] filesDepois = fileDepoisLista.listFiles();
                                                                    int depoisRodar =  filesDepois.length;
																	 
																	// caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
																	// move arquivo para pata processado para nao ficar em loop
																	for (File fileDePoisComparar: filesDepois) {
																		if (fileDePoisComparar.getAbsolutePath().equals(fl.getAbsolutePath()) && fl.exists()) {
																			String moveFilename = fl.getAbsolutePath();
																			moveFilename = moveFilename.replaceAll("\\\\", "/");
																			FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
																		}
																	}

                                                                    if (antesRodar == depoisRodar) {
                                                                        String planilhaErro = dirName + nome + "/DePara" + "/empresa_RECEBER.err";
                                                                        FileWriter writerErro = new FileWriter(planilhaErro);
                                                                        writerErro.writeNewFile(planilhaErro.toString());
                                                                        if(fl.exists()) {
                                                                            //fl.delete();
                                                                            filename = fl.getAbsolutePath();
                                                                            filename = filename.replaceAll("\\\\", "/");
                                                                            FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                                        }
                                                                        antesRodar--;
                                                                    }
                                                                    
                                                                    
                                                                    if (FileUtil.fileExists(dirName + nome + "/DePara" + "/02--Etapa 2 de 4--RECEBER.status")) {
                                                                        criaAvisoErroLayout( dirName + nome + "/DePara" + "/02--Etapa 2 de 4--RECEBER.status", logger);

                                                                    }



                                                                }catch(Exception aa){
                                                                    subject = "Nao existe integracao de contas Recebidas";

                                                                    JSONObject jsNaoExiste = new JSONObject();
                                                                    jsNaoExiste.put("NOMECONTABILIDADE", contabilidade);
                                                                    jsNaoExiste.put("SENDTONAME", sendToName);
                                                                    jsNaoExiste.put("SUBJECT", subject);
                                                                    //jsNaoExiste.put("EMAILRESPONSAVEL", emailResponsavel+",suporte@ottimizza.com.br");
                                                                    //if(filename.toUpperCase().contains("OTTIMIZZAF"))
                                                                    jsNaoExiste.put("EMAILRESPONSAVEL", "suporte@ottimizza.com.br");
                                                                    jsNaoExiste.put("TIPOINTEGRACAO", "Recebidas");
                                                                    jsNaoExiste.put("NOMEARQUIVO", fl.getName());
                                                                    jsNaoExiste.put("NOMEEMPRESA", nome);

                                                                    //enviaEmailNaoExisteRota(jsNaoExiste, logger);
                                                                    //mover
                                                                    filename = fl.getAbsolutePath();
                                                                    filename = filename.replaceAll("\\\\", "/");
                                                                    FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                                }

                                                            } else if (extensaoArquivo.equals(".xls")) {
                                                                //enviaAvisoSobreArquivo xls
                                                                //subject = "Arquivo .xls nao suportado por OTTIMIZZA Contabil";
                                                                //enviaAvisoSobreArquivoErrado(fl.getName(), nome,  subject, emailResponsavel, sendToName, "XLS", "AReceber", logger);

                                                                //mover para processado qualquer arquivo
                                                                filename = fl.getAbsolutePath();
                                                                filename = filename.replaceAll("\\\\", "/");
                                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                                            } else {
                                                                //enviaAvisoSobreArquivo outros arquivos
                                                                //subject = "Arquivo nao suportado por OTTIMIZZA Contabil";
                                                                //enviaAvisoSobreArquivoErrado(fl.getName(), nome,  subject, emailResponsavel, sendToName, "OUTROS", "AReceber", logger);

                                                                //mover para processado qualquer arquivo
                                                                filename = fl.getAbsolutePath();
                                                                filename = filename.replaceAll("\\\\", "/");
                                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                            }
                                                        }
                                                    } catch (Exception eee) {
                                                        logger.logError("2Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                                    }
                                                }else{                  // envia email e move pra processado

 
                                                     //////////////////
													subject = "ARQUIVO GRANDE ("+fl.length()/1024/1024+" MiB) -" + getNomeContabilidadeWorkflow() + "-" + empresa + "-" + operacao;
													StringBuilder msg = new StringBuilder();
													msg.append("<html>\n");
													msg.append("<head>\n");
													msg.append("</head>\n");
													msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
													msg.append("<p><font style=\"font-size: 10pt\">O arquivo \"" + arquivoGrande + "\" muito grande, tamanho maximo permitido para XLSX: (" + sizeLimit/1024/1024 + " Mb).</font></p>\n");
													msg.append("</body>\n");
													msg.append("</html>\n");

													filename = fl.getAbsolutePath();
													filename = filename.replaceAll("\\\\", "/");
													if (!filename.endsWith("/Processado")) FileUtil.moveToDir(filename, diretorio + "/Processado");
													
													if (arquivoGrande.toUpperCase().contains("_ID")) {
														LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
														// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
														String protocolo_id = cutString(arquivoGrande.toUpperCase(), "_ID", "_");
														
														String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + nome + "/DePara/";
														
														atualizaProtocolo("", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
													}
												}
                                            }
                                        }

                                    }
                                } catch (Exception ee) {
                                    logger.logError(ee);
                                }
                            }

                            /*

							///////////////////////////////////////////////////////////
							// GERA ARQUIVO PARA IMPORTACAO ///////////////////////////
							///////////////////////////////////////////////////////////
							if (rotasOk) {
								File txtGeraArquivo = new File(String.format("%s\\contabil\\Ottimizza\\GeraArquivo\\Gera_%s.txt", RouteEngine.INOUT_HOME, contabilidade));

								if(!txtGeraArquivo.exists()) {
									try {
										if (txtGeraArquivo.createNewFile()) {
											logger.logDebug(String.format("Sucessfully created file at '%s'...", txtGeraArquivo.getAbsolutePath()));

											FileWriter writer = new FileWriter(txtGeraArquivo.getAbsolutePath());
											writer.writeNewFile("NOME CONTABILIDADE : " + contabilidade);

										} else {
											logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtGeraArquivo.getAbsolutePath()));
										}   
									} catch(Exception createFileException) {
										logger.logError(String.format("Error trying to create file '%s'", txtGeraArquivo.getAbsolutePath()), createFileException);
									}
								} else {
									logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtGeraArquivo.getAbsolutePath()));
								}
								String rotaGera = "Ottimizza.GeraArquivoParaImportacao";
								RouteEngine.execRoute(rotaGera);
								rotasOk = false;
							}

							*/
                        }

                    }
                } else {
				
				
					// move contabilidade inativas para outra pasta, agilizando o workflow
					/*try {
						String property2 = String.format("%s_WORKFLOW_NAME", contabilidade.toUpperCase());
 

						if (!contabilidadesAtivas.getKeys().contains(property2)) {
 								
							File from = new File("/inout/contabil/"+contabilidade);
							File to   = new File("/inout/contabilInativas/"+contabilidade);
					 
							try {
								Files.move(from.toPath(), to.toPath(), StandardCopyOption.REPLACE_EXISTING);
							}
							catch (IOException ex) {
							} 
						
							
						}
					} catch (Exception xx) {}*/

               
			   
                    //logger.logDebug("'routes.properties' nao contem propriedade '" + property + "'.");
                }
            }
        }
    } catch (Exception ex) {
        logger.logDebug("Erro executanto workflow.");
    }
	//logger.logDebug("FINAL WORKFLOW");
	
	double tempoFinal = System.currentTimeMillis();
	if (rodouRota) logger.logInfo("Tempo; " + String.format("%.2f", (tempoFinal - tempoInicial) / 1000));
	
 

    return records;
}


////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////  METODOS AUXILIARES  ////
////////////////////////////////////////  METODOS AUXILIARES  //////////////////////
//////////////////////  METODOS AUXILIARES  ////////////////////////////////////////
////  METODOS AUXILIARES  //////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

public void preparaArquivo(String idRoteiro, String tipoIntegracao, String contabilidade, String empresa, String dirName, String dirNameW, ConnectorConfig config, InoutLogger logger) {

	try {
		StringBuilder txt1 = new StringBuilder();    
		String empresaProperties = dirName + "empresa.properties";
		FileWriter writer = new FileWriter(empresaProperties);
		txt1.append("NOME_EMPRESA = " + empresa);
		txt1.append("\r\n");
		txt1.append("NOME_CONTABILIDADE = " + contabilidade);
		txt1.append("\r\n");
		txt1.append("MANTEM_ARQUIVO = SIM");
		writer.writeNewFile(txt1.toString());

		empresaProperties = dirNameW + "empresa.properties";
		writer = new FileWriter(empresaProperties);
		writer.writeNewFile(txt1.toString());
		
		logger.logInfo("preparaArquivo padrao w - 3 " + contabilidade + "/" + empresa);

	
		StringBuilder codigoNovo    = new StringBuilder();
		StringBuilder codigoRoteiro = new StringBuilder();
		
		FileReader reader = new FileReader("c:/ottimizza/dropbox/deploy/routes/ottimizza/TemplateOficialAtualEndpointA.script");
		try {
			reader.openFile();
			String line = "";
			while(reader.hasNextLine()) {
				// Le a proxima linha do arquivo
				line = reader.nextLine();
				// Processa a linha
				// ....
				
				codigoNovo.append(line);
				if (line.contains("NAO ALTERAR DAQUI ATE O FINAL")) break;				
			}
		} catch (IOException ioe) {
			logger.logError(ioe);
		} finally {
			reader.closeFile();
		}
		
		String tipoRoteiro = "_ContasPagasRoteiroPadrao.script";
		if (tipoIntegracao.toUpperCase().contains("RECE")) tipoRoteiro = "_ContasRecebidasRoteiroPadrao.script";
		
 			
		try {
			File fileRoteiro = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
  

			//logger.logInfo("fileRoteiro w - 3 " + contabilidade + "/" + empresa);

		    //if (fileRoteiro.exists() && tipoRoteiro.contains("TESTE XAVIER")) {
			if (fileRoteiro.exists() &&
			    !(contabilidade.toUpperCase().contains("MICALI") || contabilidade.toUpperCase().contains("CONCEITOCONTABILIDADE"))) {
				
  				
				FileReader readerRoteiro = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
				try {
					readerRoteiro.openFile();
					String lineRoteiro = "";
					while(readerRoteiro.hasNextLine()) {
						// Le a proxima linha do arquivo
						lineRoteiro = readerRoteiro.nextLine();
						// Processa a linha
						// ....
						
						codigoRoteiro.append(lineRoteiro);
 					}
				} catch (IOException ioe) {
					logger.logError(ioe);
				} finally {
					readerRoteiro.closeFile();
				}
			}
			else {
 
 				PartnerConnection connection = Connector.newConnection(config);  
				codigoRoteiro.append(prepareScript(idRoteiro, "OTTPADRAO" + empresa, "", contabilidade, tipoIntegracao, connection, logger));
				logger.logInfo("WF3 - login salesforce 3350" + contabilidade + "--" + empresa);
				
  				
			}
		} catch (Exception xx) {logger.logInfo("erro w3 " + xx);}
		
 
		if (!codigoRoteiro.toString().equals("")) {
		
			empresaProperties = "";
 			
			if (tipoIntegracao.toUpperCase().contains("PAGA"))  empresaProperties = RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + getNomeContabilidade() + "_ContasPagasEndpointA.script";
			if (tipoIntegracao.toUpperCase().contains("RECE"))  empresaProperties = RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + getNomeContabilidade() + "_ContasRecebidasEndpointA.script";
			writer = new FileWriter(empresaProperties);
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString());			
			
			writer = new FileWriter("c:/inout/tmp/"+contabilidade+"_copia.txt");
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString());
			
		    writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
			writer.writeNewFile(codigoRoteiro.toString());			

		}		
 	}
	catch (Exception xx) {}
	return;
}


public void preparaArquivoEspecifico(String idRoteiro, String tipoIntegracao, String contabilidade, String empresa, String dirName, String dirNameW, InoutLogger logger) {

	try {
		StringBuilder txt1 = new StringBuilder();    
		String empresaProperties = dirName + "empresa.properties";
		FileWriter writer = new FileWriter(empresaProperties);
		txt1.append("NOME_EMPRESA = " + empresa);
		txt1.append("\r\n");
		txt1.append("NOME_CONTABILIDADE = " + contabilidade);
		txt1.append("\r\n");
		txt1.append("MANTEM_ARQUIVO = SIM");
		writer.writeNewFile(txt1.toString());

		empresaProperties = dirNameW + "empresa.properties";
		writer = new FileWriter(empresaProperties);
		writer.writeNewFile(txt1.toString());
		
 		logger.logInfo("preparaArquivoEspecifico w3 " + contabilidade + "/" + empresa);

	
		StringBuilder codigoNovo    = new StringBuilder();
		StringBuilder codigoRoteiro = new StringBuilder();
		String tipoRoteiro = "_ContasPagasRoteiro.script";
		String tipoRota = "_ContasPagasEndpointA.script";
		if (tipoIntegracao.toUpperCase().contains("RECE")) {
			tipoRoteiro = "_ContasRecebidasRoteiro.script";
			tipoRota = "_ContasRecebidasEndpointA.script";
		}
		
		try {
			
			
			FileReader reader = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRota);
			try {
				reader.openFile();
				String line = "";
				while(reader.hasNextLine()) {
					// Le a proxima linha do arquivo
					line = reader.nextLine();
					// Processa a linha
					// ....
					
					codigoNovo.append(line);
					if (line.contains("NAO ALTERAR DAQUI ATE O FINAL")) break;				
				}
			} catch (IOException ioe) {
				logger.logError(ioe);
			} finally {
				reader.closeFile();
			}
 
 			File fileRoteiro = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);

			if (fileRoteiro.exists() &&
			    !(contabilidade.toUpperCase().contains("MICALI") || contabilidade.toUpperCase().contains("CONCEITOCONTABILIDADE"))) {
 				
				FileReader readerRoteiro = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
				try {
					readerRoteiro.openFile();
					String lineRoteiro = "";
					while(readerRoteiro.hasNextLine()) {
						// Le a proxima linha do arquivo
						lineRoteiro = readerRoteiro.nextLine();
						// Processa a linha
						// ....
						
						codigoRoteiro.append(lineRoteiro);
 					}
				} catch (IOException ioe) {
					logger.logError(ioe);
				} finally {
					readerRoteiro.closeFile();
				}
			}
			else {
				ConnectorConfig config = new ConnectorConfig();
				config.setUsername("fabrica@ottimizza.com.br");
				config.setPassword("ottimizza@123HU4ssqt1HCiLyCzj6QStgteM2");
				config.setTraceMessage(false);
				 
				 logger.logInfo("API SALES SHR: preparaArquivoEspecifico workflow3 3");
				//config.setUsername("adm@ottimizza.com.br");
				//config.setPassword("oic@3333222YXZRHYLH8cxrchPu0rjyGH1j8");
				//config.setTraceMessage(true);
				
				PartnerConnection connection = Connector.newConnection(config);  
				
				// retirado o ottpadrao do preparascript (especifico pois em integracoes antigas
				// estava dando erro de compilacao pois exportavamos o metodo mas ha dentro da rota o mesmo metodo
				codigoRoteiro.append(prepareScript(idRoteiro, "" + empresa, "", contabilidade, tipoIntegracao, connection, logger));
				
				logger.logInfo("WF3 - login salesforce 3464" + contabilidade + "--" + empresa);
				
			}
		} catch (Exception xx) {logger.logDebug("XX " + xx);}
		
 
		if (!codigoRoteiro.toString().equals("")) {
		
			empresaProperties = "";
 			
			if (tipoIntegracao.toUpperCase().contains("PAGA"))  empresaProperties = "c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + "_ContasPagasEndpointA.script";
			if (tipoIntegracao.toUpperCase().contains("RECE"))  empresaProperties = "c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + "_ContasRecebidasEndpointA.script";
			writer = new FileWriter(empresaProperties);
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString());			
			
			writer = new FileWriter("c:/inout/tmp/"+contabilidade+"_copia_especifico.txt");
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString());
			
			writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
			writer.writeNewFile(codigoRoteiro.toString());	
		}		
 	}
	catch (Exception xx) {}
	return;
}


public void criaAvisoErroLayout (String arquivo,InoutLogger logger) {

    try {


        FileUtil.deleteFile(arquivo);
        arquivo = arquivo.replaceAll("\\.status",".err");


        FileWriter writerRazao = new FileWriter(arquivo);

        StringBuilder sb1 = new StringBuilder();       
        
        sb1.append("<div class=\"er-content\">").append("\r\n");
        sb1.append("<div class=\"er-message\">").append("\r\n");


        sb1.append("<p>Esta planilha nao pode ser processada pela Ottimizza. Alguns motivos:</p>").append("\r\n");
        sb1.append("</div>").append("\r\n");
        sb1.append("<ul class=\"ul-tips\">").append("\r\n");
		
		StringBuilder mens = new StringBuilder();
		String dirName = cutString(arquivo, 0, "DePara") + "/DePara/Processado";
		logger.logDebug("LENDO workflow script  = " + dirName);
		
		FilesLoader fileLoader2 = new FilesLoader(dirName, "TIPOPLANILHA.txt", dirName+"/lido", true, logger);
		fileLoader2.loadFiles();
		for (MemoryFile memFile: fileLoader2.getMemFiles()) {
			while (memFile.hasNextLine()) {
				try {
					mens.append(memFile.nextLine()).append("    ");
				} catch (Exception xx) {}
			}
		}
							
		if (!mens.toString().equals("")) {
	        sb1.append("<li class=\"it-tip\">").append("\r\n");
			sb1.append("<span><cont color=\red\">").append(mens.toString()).append("</font></span>").append("\r\n");
			sb1.append("</li>").append("\r\n");
		}
        sb1.append("<li class=\"it-tip\">").append("\r\n");
        sb1.append("<span><cont color=\red\">Em 95% dos casos isto ocorre porque o layout do arquivo postado difere do arquivo esperado pela integracao.</font></span>").append("\r\n");
        sb1.append("</li>").append("\r\n");

        sb1.append("<li class=\"it-tip\">").append("\r\n");
        sb1.append("<span><cont color=\red\">Verifique tambem se a planilha esta protegida ou com links a outras planilhas</font></span>").append("\r\n");
        sb1.append("</li>").append("\r\n");
 


        sb1.append("<li class=\"it-tip\">").append("\r\n");
        sb1.append("<span>Verifique se a planilha enviada possui formulas para valores, datas, etc.</span>").append("\r\n");
        sb1.append("</li>").append("\r\n");
        sb1.append("</ul>").append("\r\n");
        sb1.append("<div class=\"er-obs\">").append("\r\n");
        sb1.append("<h6>Caso nao encontre problema na planilha processada, entre em contato com o <a href=\"https://suporte.ottimizza.com.br/\">Suporte Ottimizza</a> </h6>").append("\r\n");
        sb1.append("</div>").append("\r\n");
        sb1.append("</div>").append("\r\n");
        sb1.append("</body>").append("\r\n");

		// if (!arquivo.equals("")) {
			//adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
			// if(arquivo.toUpperCase().contains("_ID")) {
				// String protocolo_id = cutString(arquivo.toUpperCase(), "_ID", "_");
				 
				//roda requisicao para atualizar o satus do protocolo
				// JSONObject bodyProtocolo = new JSONObject();
				
				// bodyProtocolo.put("status", "3");	
				// bodyProtocolo.put("mensagem", "Erro ao ler planilha. Em 95% dos casos isto ocorre porque o layout do arquivo postado difere do arquivo esperado pela integracao. (Codigo erro 2)");
				
				// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
				// String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
			// }
		// }


        writerRazao.writeNewFile(sb1.toString());
    }
    catch (Exception xx) {} 

}





public void  atualizaArquivoRoteiro(String contabilidade, String empresa, InoutLogger logger) throws Exception {
	
	
    SysProperties props  = SysProperties.getInstance();
    SysProperties props2 = SysProperties.getInstance(); 
	 // Carrega as propriedades
    props.load("contabil/" + contabilidade + "/contabil.properties");
    
	String cnpjEmpresa = props.get(empresa.toUpperCase() + "_CNPJ_EMPRESA");
	logger.logInfo("Antes Atualizando Roteiro - " + cnpjEmpresa);


	String arquivoRoteiro  = RouteEngine.INOUT_HOME +  "/contabil/ottimizza/atualizaRoteiros/atualizaRoteiros_"+cnpjEmpresa+"_wf3.txt";
	FileWriter writerWorkflow = new FileWriter(arquivoRoteiro);
 	writerWorkflow.writeNewFile(cnpjEmpresa);
	
	//RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
	RouteEngine.execRoute("Ottimizza.AtualizaRoteiros40");
	
	logger.logInfo("Atualizando arquivo Roteiro 40 - " + cnpjEmpresa);
	
																		
	// aguarda 5 segundo para dar tempo das regras estarem salvas no salesforce.
	// Thread.sleep(5000);

	
 	
}

//-------------------------------------------------------------------------------------
// Manda informacoes para o servidor status
// Vitor 16/05/2022
//-------------------------------------------------------------------------------------


public void postStatus(String servidor, String workflow, String contabilidade, String empresa, String tipo, String id) {
    String url = "https://api-status-server.herokuapp.com/status";


    try {


        JSONObject body = new JSONObject();

        body.put("servidor", servidor);
        body.put("workflow", workflow);
        body.put("contabilidade", contabilidade);
        body.put("empresa", empresa);
        body.put("tipo", tipo);
        body.put("id", servidor + id);

        java.net.URL serviceURL = new java.net.URL(url);

        // Opens java.net.URL as a POST Request
        java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
        connection.setDoOutput(true); // indicates a post
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Accept", "application/json");
        connection.setRequestProperty("Content-Type", "application/json");

        try {
            java.io.OutputStream os = connection.getOutputStream();
            os.write(body.toString().getBytes());
            os.flush();
            os.close();
        } catch (Exception ex1) {
            logger.logError("Erro tentando enviar informa??es para o status server -> " + ex1);
        } 

        try {
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
            String line;
            StringBuilder responseRaw = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                responseRaw.append(line);
            }
            reader.close();
			
			//logger.logDebug("RESPONSE " + responseRaw.toString());
			//logger.logDebug("BODY     " + body.toString());
			
        } catch (Exception ex2) {
            logger.logError("Segundo Catch " + ex2);
        } 

    } catch (Exception ex2) {
        logger.logError("Segundo Catch " + ex2);
    }

}


// xavier




public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
		 String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
		 if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
		 if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
		// roda requisicao para atualizar o satus do protocolo
		JSONObject bodyProtocolo = new JSONObject();
		bodyProtocolo.put("status", statusProtocolo);	
		bodyProtocolo.put("mensagem", mensagem);
		String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
		
		//logger.logInfo("Status WF3 " + protocolo_id + " <<>> " + bodyProtocolo.toString());
		
	return atualizaStatus;
	} catch (Exception xx) {
		logger.logInfo(" Erro ao Atualizar Status " + xx);
		return "";
	}
 
}


public String genericPostId(String uri, JSONObject bodyObj, String token, InoutLogger logger) throws Exception {

    try {
        StringBuilder responseRaw = new StringBuilder();
        java.net.URL serviceURL = new java.net.URL(uri);

        // Opensjava.net.URL as a POST Request
        java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
        connection.setDoOutput(true); // indicates a post
        connection.setRequestMethod("POST");

        // Default Headers.
        connection.setRequestProperty("Accept", "application/json");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setRequestProperty("Authorization", "Bearer " + token); // header for authorization

        // Writes the Request Body...
        try {
            java.io.OutputStream os = connection.getOutputStream();
            os.write(bodyObj.toString().getBytes());
            os.flush();
            os.close();
        } catch (Exception ex1) {
            logger.logError("Primeiro Catch " + ex1);
        } 

        // Writes the Response Body...
        try {
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
            String line;
            while ((line = reader.readLine()) != null) {
                responseRaw.append(line);
            }
            reader.close();
        } catch (Exception ex2) {
            logger.logError("Segundo Catch " + ex2);
        } 

        // checks if it is a valid json
        if (responseRaw.toString().startsWith("{") && responseRaw.toString().endsWith("}")) {
            JSONObject response = new JSONObject(responseRaw.toString());

            // Todo
            return response.toString();
        } 
        else {
            throw new Exception (responseRaw.toString());
        }

    } catch (Exception ex0) { 
        throw ex0;
    }
}


public void atualizaProtocolo(String liberaOic, String tipoErro, String diretoriArquivos, String protocolo_id, LancamentosApi apiWeb, InoutLogger logger) throws Exception {
	
	JSONObject bodyProtocolo = new JSONObject().put("status", "3");
	
	if (tipoErro.contains("NAOLEULINHAS")) {
		bodyProtocolo.put("mensagem", "Ooops. Arquivo com grande volume. Entre em contato com a equipe de atendimento para maiores orientações.");
	}
	else if (tipoErro.contains("NAOLEUIGNORAR")) {
		bodyProtocolo.put("mensagem", "Ooops. Não conseguimos ler nenhum movimento de pagamento/recebimento nesse arquivo. Verifique as regras criadas de IGNORAR.");
	}
	else if (tipoErro.contains("NAOLEUFILTRO")) {
		bodyProtocolo.put("mensagem", "Ooops. Não conseguimos ler nenhum movimento pois não há lançamento no período informado. Verifique a data das movimentações dentro do arquivo.");
	}
	else if (tipoErro.contains("NAOLEUMOVIMENTO")) {
		bodyProtocolo.put("mensagem", "Ooops. O layout do arquivo enviado não está de acordo. Por gentileza, verifique o mesmo. Caso seja um relatório de extrato ou cartão, verifique os modelos disponíveis em nosso portal e certifique-se de ter selecionado a leitura do mesmo.");
	}
	else if (liberaOic.equals("NAO")) {
		bodyProtocolo.put("mensagem", "Ooops. Devido a alguma questão administrativa, seu cadastro não está ativo no sistema. Contate o setor financeiro ( e-mail financeiro01@ottimizza.com.br ou 47 9636-4529)");
	}
	else {
		bodyProtocolo.put("mensagem", "Ooops. Não conseguimos ler nenhum movimento nesse arquivo. Entre em contato com a equipe de atendimento para maiores orientações.");
	}
	
	putStatus(diretoriArquivos, "", new JSONObject(), logger);
	
	String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb) throws Exception {
	//Conversor
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;	
		
		for (File fl: files) {
			if (fl.getAbsolutePath().contains(protocolo_id)) {
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
					String diretorioArquivoCsv = "C:/inout/contabil/";
					String testeCsv = "";									
					String contabilidadeCsv = "";
					String empresaCsv = "";
					
					if (fl.getAbsolutePath().contains("pagar_")) {
						try {											
							testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
							contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
							empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
							empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
							diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
						} catch (Exception e) {
							logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
						}
					}
					else if (fl.getAbsolutePath().contains("receber_")) {
						try {											
							testeCsv = cutString(fl.getAbsolutePath(), "receber_");
							contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
							empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
							empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
							diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
						} catch (Exception e) {
							logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
						}
					}
					String arquivoDeployStr = "";
					try {							

					// mantivemos o ancora no nome do arquivo para saber que foi convertido e usado nos extratos
						arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
					} catch (Exception e) {
						logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
					}
					if (!arquivoDeployStr.equals("")) {
						File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
						FileUtil.copyFolder(fl, arquivoDeploy);
						
						try { 
							FileUtil.deleteFile(fl);
						} catch (Exception XX) {}
					}
					if (!notificouProtocolo) {
						notificouProtocolo = true;
						// String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
					}
					continue;
				}
			}
		}
		if (notificouProtocolo) return true;
	}
	return false;
}

public boolean converteuPDF(String protocolo_id, LancamentosApi apiWeb, InoutLogger logger) throws Exception {
	//Conversor
	// String diretorio = "C:/Conversor/Pdf";
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	// logger.logInfo("ACHANDO");
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;	
		
		for (File fl: files) {
			if (fl.getAbsolutePath().contains(protocolo_id)) {
				// logger.logInfo("ACHOUID " + fl.getAbsolutePath());
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logInfo("ACHOUCSV " + fl.getAbsolutePath());
					return true;
				}
				//2310-020397 adicionado o if abaixo para nao travar quando houver .pdferr
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".PDFERR") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logInfo("ACHOUCSV " + fl.getAbsolutePath());
					try {
						FileUtil.deleteFile(fl);
					} catch (Exception XX) {
						logger.logInfo("PROBLEMA APAGANDO PASTA CONVERSOR " + XX.getMessage());
					}
					return true;
				}
				return false;
			}
		}
	}
	return true;
}

public String apagaArquivoConversor(String diretoriArquivos, String protocolo_id, String nomeArquivo, InoutLogger logger) throws Exception {
	
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	
	// logger.logInfo("AAC " + protocolo_id + " | " + nomeArquivo);
	
	if (FileUtil.dirHasFiles(diretorio)) {
		for (File fl: files) {
			// logger.logInfo("AAPP " + fl.getAbsolutePath().toUpperCase());
			if (fl.getAbsolutePath().contains("_id"+protocolo_id)/* && fl.getAbsolutePath().toUpperCase().contains(nomeArquivo)*/) {
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && /*fl.getAbsolutePath().toUpperCase().contains(".CSV") &&*/ fl.getAbsolutePath().contains("_ancora_")){
					// logger.logInfo("APAGOU " + fl.getAbsolutePath());
					try {
						FileUtil.deleteFile(fl);
					} catch (Exception XX) {
						logger.logInfo("PROBLEMA APAGANDO PASTA CONVERSOR " + XX.getMessage());
					}
					putStatus(diretoriArquivos, "", new JSONObject(), logger);
					// return "APAGOU";
				}
			}
		}
	}
	return "";
	
}