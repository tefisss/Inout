
/////////////////////////////////////////////////////////////////////////////////
// Extrai do ROUTE_ID o nome da Contabilidade
/////////////////////////////////////////////////////////////////////////////////
private String getNomeContabilidadeWorkflow() throws Exception {
    String contabilidade = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf("."));

    return contabilidade;
}

/////////////////////////////////////////////////////////////////////////////////
////////////////////  ////   WORKFLOW  OTW (Endpoint A)    ////  ////////////////
/////////////////////////////////////////////////////////////////////////////////
JSONArray runWorkflowEndpointA(InoutLogger logger) throws Exception {
	JSONArray records    = new JSONArray();
    DataBase dbIOContOtt = null;
	// DBPostgreSQL dbFila = null;
    try {
	
	//logger.logInfo("Iniciou aq");

    SysProperties routesProperties = SysProperties.getInstance();
    SysProperties contabilidadesAtivas = SysProperties.getInstance();
    SysProperties props  = SysProperties.getInstance();
    SysProperties props2 = SysProperties.getInstance();
	SysProperties propsOtt = SysProperties.getInstance();
	try {
		propsOtt.load("contabil/Ottimizza/contabil.properties");
	} catch (Exception e) {
		logger.logError("Problema ao carregar propriedades Ottimizza " + e.getMessage());
	}
	ConnectorConfig config = new ConnectorConfig();

	config.setUsername("fabrica@ottimizza.com.br");
	config.setPassword("ottimizza@123HU4ssqt1HCiLyCzj6QStgteM2");
	//config.setUsername("suporte@ottimizza.com.br");
	//config.setPassword("ottimizza@123qhhKqbBI0kfkInUku3C5q54L");
	config.setTraceMessage(false);
	// logger.logInfo("API SALES SHR: runWorkflowEndpointA WorkflowUnico 1");
	
	//config.setUsername("adm@ottimizza.com.br");
	//config.setPassword("oic@3333222YXZRHYLH8cxrchPu0rjyGH1j8");
	//config.setTraceMessage(true);

	double tempoInicial = System.currentTimeMillis();
	boolean rodouRota = false;
	
    String arquivoGrande = "";
    String jSdir = "";
    String operacao = "";

    boolean converteu = false;
    boolean converteuXlsx = false;
    boolean oicEmpresaNao = false;
	boolean naoGerouDepara = true;
	boolean temConversorXlsx = false;
	boolean gerouArquivoFinal = false;

    double sizeLimit = 4;               //tamanho maximo processavel                        //-
    // if (contabilidade.toUpperCase().contains("TECOLMG")) sizeLimit = 40; // #Fabrica(2019-07-24) @Becker
    sizeLimit = sizeLimit * (Math.pow(1024,2)); //MiB                                       //-

    String extensaoArquivo  = "";
    String diretorioArquivo = "";
    String protocoloAnterior = "";
    String protocoloPrincipal = "";

    boolean rotasOk = false;
    String filename = "";
    String filenameCanal = "";
    String extensaoSuportada = ".csv.xlsx.txt.ofx.dat.pdf.prn.ret.dp1.dp2.dp9.omc.html.ret";

    try {
        // tenta carregar propriedades de rotas.
        try { routesProperties.load(String.format("/contabil/ottimizza/routes.properties", RouteEngine.INOUT_HOME));
            } catch (Exception ex) { logger.logError("Nao foi possivel ler arquivo de propriedades.");
            }
		// tenta carregar propriedades de contabilidades Ativas.
        try { contabilidadesAtivas.load(String.format("/contabil/ottimizza/contabilidadesativas.properties", RouteEngine.INOUT_HOME));
            } catch (Exception ex) { logger.logError("Nao foi possivel ler arquivo de propriedades.");
            }

        File dirInoutContabil = new File(String.format("%s/contabil/", RouteEngine.INOUT_HOME));

		if (dbIOContOtt == null) {
			try {
			dbIOContOtt = connectIOContabil(propsOtt, logger);
			} catch (Exception e) {
				logger.logInfo("Erro ao contectar no banco da ottimizza" + e.getMessage());
				return new JSONArray();
			}
		}
		
		/*DatabasePostgreSQL postgreFila = new DatabasePostgreSQL();
		
		try {
			dbFila = postgreFila.connectDatabase("fila-workers", logger);
		} catch (Exception e) {
			logger.logError("Erro ao conextar fila-workers " + e.getMessage());
			return new JSONArray();
		}*/
		int idFila = 0;
		logger.logInfo("Acima do postStatus");
		postStatus("S1", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), "Ocioso", "Nada Pendente", "Sem Arquivo Para Processar", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), logger);

		JSONObject objetoFila = buscaDiretorioArquivoProcessado(dbIOContOtt, logger);
		// JSONObject objetoFila = buscaDiretorioArquivoProcessado(dbFila, logger);
        if (objetoFila.has("DIRETORIO")) {
			diretorioArquivo = objetoFila.optString("DIRETORIO");
			idFila = objetoFila.optInt("ID");
			logger.logInfo("Narq " + objetoFila.optString("NOMEARQUIVO").toUpperCase());
			
			protocoloPrincipal = getProtocoloId(objetoFila.optString("NOMEARQUIVO"));
			
			// if (quantityOf(objetoFila.optString("NOMEARQUIVO").toUpperCase(), "_ID") == 2) {
				// protocoloPrincipal = cutString(objetoFila.optString("NOMEARQUIVO").toUpperCase(), objetoFila.optString("NOMEARQUIVO").toUpperCase().lastIndexOf("_ID")+3, "_");
			// } else { 
				// protocoloPrincipal = cutString(objetoFila.optString("NOMEARQUIVO").toUpperCase(), "_ID", "_");
			// }
		} else {
			if (dbIOContOtt != null) {
				dbIOContOtt.closeConnection();
				dbIOContOtt = null;
			}
			logger.logInfo("Nada para Pegar");
			return new JSONArray();
		}
		// if (true) return new JSONArray();
  

		logger.logInfo("LENDO ARQV " + diretorioArquivo + " | " + idFila);
		LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
		// if (diretorioArquivo.toUpperCase().contains("MICALICONTABIL")) return records;

		if (!diretorioArquivo.equals("")) {
			insereLog(dbIOContOtt, diretorioArquivo, INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), objetoFila.optString("NOMEARQUIVO"), logger);
			
			
			atualizaLog(protocoloPrincipal, "DATA_ENTRADA_WORKFLOW", dbIOContOtt, logger);
			
			if (dirInoutContabil.exists()) {
                
                String contabilidade = cutString(diretorioArquivo, "contabil/", "/");

                String empresa = diretorioArquivo.substring(0, diretorioArquivo.lastIndexOf("/"));

                
                empresa = cutString(empresa, 0, empresa.lastIndexOf("/"));
                empresa = cutString(empresa, empresa.lastIndexOf("/")+1);

				// Empresas do tipo Bussola sao agora processadas em um workflow especifico e por isto ignoradas no OIC
				if (empresa.toUpperCase().startsWith("BUSSOLA") && !empresa.toUpperCase().endsWith("BUSSOLA")) return records;

                props.load("contabil/" + contabilidade + "/contabil.properties");
                props2.load("contabil/" + contabilidade + "/empresa.properties");

                String dirName = RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/";
                String dirNameW = RouteEngine.INOUT_HOME + "/contabil/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/";
                String dirRouteName = RouteEngine.INOUT_HOME + "/routes/" + contabilidade;

                String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
                String versaoOtzWebApp = "02_Conecta_Via_Portal_Ottimizza";
                String fornecedorUnico = props.get("FORNECEDOR_UNICO");


                String oicContabil  = props.get("OIC_LIBERADO");

                // String diretorioConversorExcel = "C:/Conversor/Excel";
                // File file2 = new File(diretorioConversorExcel);
                
                // File[] files = file2.listFiles();

                String oicEmpresa = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_LIBERA_OIC");


               /* if (FileUtil.dirHasFiles(diretorioConversorExcel)) {
                    for (File fl: files) {
                        if (fl.getAbsolutePath().contains("aba[") && (fl.getAbsolutePath().toUpperCase().contains("PAGAR") || fl.getAbsolutePath().toUpperCase().contains("RECEBER")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
                            String diretorioArquivoCsv = "C:/inout/contabil/";
                            String testeCsv = "";
                            String abaCsv = "";
                            String contabilidadeCsv = "";
                            String empresaCsv = "";
                            
                            // if (fl.getAbsolutePath().toUpperCase().contains("MICALI")) continue;
                            
                            long time1 = fl.lastModified();
                            double timeDouble = (double) time1;
                            
                            double times = (System.currentTimeMillis() - timeDouble) / 1000;
                            
                            // int longTime1 = time1.intValue();
                            // logger.logInfo("ULTIMA MODIFICACAO " + fl.getAbsolutePath() + " | " + time1 + " | " + System.currentTimeMillis());
                            // \("ULTIMA MODIFICACAOTEMPOS " + times);
            
                            if (times > 10) {
                            
                                if (fl.getAbsolutePath().contains("_pagar_")) {
                                    try {
                                        abaCsv = cutString(fl.getAbsolutePath(),"aba[","_pagar_");
                                        testeCsv = cutString(fl.getAbsolutePath(), "_pagar_");
                                        contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
                                        empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
                                        empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
                                        diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
                                    } catch (Exception e) {
                                        logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
                                    }
                                }
                                else if (fl.getAbsolutePath().contains("_receber_")) {
                                    try {
                                        abaCsv = cutString(fl.getAbsolutePath(),"aba[","_receber_");
                                        testeCsv = cutString(fl.getAbsolutePath(), "_receber_");
                                        contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
                                        empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
                                        
                                        // logger.logInfo("ECS " + empresaCsv);
                                        empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
                                        // logger.logInfo("ECS3" + empresaCsv);
                                        diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
                                    } catch (Exception e) {
                                        logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
                                    }
                                }
                                String arquivoDeployStr = "";
                                try {
                                    arquivoDeployStr = "aba_"+abaCsv.replace("[","").replace("]","")+"_"+fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
                                    //arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
                                } catch (Exception e) {
                                    logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
                                }
                                            
                                if (!arquivoDeployStr.equals("")) {
                                    File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
                                    // DHF C:\Conversor\Excel\aba[0]_PAGAR_Micalicontabil_Velasquesamaraldall_ott_oud__id4418_pago0218_modelo 05-2022.csv RODACONVERSOR
                                    FileUtil.copyFolder(fl, arquivoDeploy);
                                
                                    try { 
                                        FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {}
                                }
                            }
                        
                            continue;
                        }
                    }
                }
*/

                if (!contabilidade.equals("")) {
                    ///////////////////////////////////////////////////////////
                    // DEPARA /////////////////////////////////////////////////
                    ///////////////////////////////////////////////////////////
                    operacao = "DePara";
                    String diretorioDePara = cutString(diretorioArquivo, 0, diretorioArquivo.lastIndexOf("/"));
                    diretorioDePara = cutString(diretorioDePara, 0, diretorioDePara.lastIndexOf("/"));
        
                    diretorioDePara += "/DePara";
                    File file2DePara = new File(diretorioDePara);
                    File[] filesDePara = file2DePara.listFiles();
                    
                    logger.logInfo("DDP " + diretorioDePara + " | " + idFila);
                    
                    try {
                        if (FileUtil.dirHasFiles(diretorioDePara)) {
                            for (File fileDePara: filesDePara) {
								
								logger.logInfo("Atualizando pendencias " + protocoloPrincipal + " | " + cutString(fileDePara.getName().toUpperCase(), "_ID", "_"));
								
                                // if (!protocoloPrincipal.equals(cutString(fileDePara.getName().toUpperCase(), "_ID", "_"))) continue;
								if (diretorioArquivo.contains("APagar") && fileDePara.getName().toUpperCase().contains("RECEBER")) continue;
								else if (diretorioArquivo.contains("AReceber") && fileDePara.getName().toUpperCase().contains("PAGAR")) continue;

                                if(fileDePara.length() < sizeLimit || !fileDePara.getName().toUpperCase().endsWith(".XLSX")){
                                    

                                    if (fileDePara.isFile()){ //jjj
                                        logger.logInfo("LENDO OK DEPARA");
										String protocoloArquivoDepara = getProtocoloId(fileDePara.getName());
										// if (quantityOf(fileDePara.getName().toUpperCase(), "_ID") == 2) {
											// protocoloArquivoDepara = cutString(fileDePara.getName().toUpperCase(), fileDePara.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
										// }
										// else {
											// cutString(fileDePara.getName().toUpperCase(), "_ID", "_");
										// }
										
										
										
										
                                        // if (protocoloPrincipal.equals(cutString(fileDePara.getName().toUpperCase(), "_ID", "_"))) {
                                        if (protocoloPrincipal.equals(protocoloArquivoDepara)) {
											atualizaPendencias(versaoPlataforma, diretorioDePara, contabilidade, fileDePara/* = fileDePara.getName() */, empresa, logger);
										} else if ((!protocoloArquivoDepara.equals("") && !protocoloPrincipal.equals(protocoloArquivoDepara)) 
													&& !fileDePara.getName().toUpperCase().contains("PARTICIPANTE") && !fileDePara.getName().toUpperCase().startsWith("PLANO DE CONTA") && !fileDePara.getName().toUpperCase().startsWith("PLANOCONTAS") ){
											logger.logInfo("FLP " + fileDePara.getName());
											// filename = fileDePara.getAbsolutePath();
											// filename = filename.replaceAll("\\\\", "/");
											// FileUtil.moveToDir(filename, diretorioDePara + "/Processado");
											FileUtil.deleteFile(fileDePara);
										}
										
                                        
                                    }
                                }else{
									
									if (diretorioArquivo.contains("APagar") && fileDePara.getName().toUpperCase().contains("RECEBER")) continue;
									else if (diretorioArquivo.contains("AReceber") && fileDePara.getName().toUpperCase().contains("PAGAR")) continue;
									else if (fileDePara.getName().toUpperCase().contains("PARTICIPANTE") || fileDePara.getName().toUpperCase().startsWith("PLANO DE CONTA") || fileDePara.getName().toUpperCase().startsWith("PLANOCONTAS")) continue;

                                    /*filename = fileDePara.getAbsolutePath();
                                    filename = filename.replaceAll("\\\\", "/");
									logger.logInfo("DDP " + diretorioDePara);
                                    FileUtil.moveToDir(filename, diretorioDePara + "/Processado");*/
									
									
                                    
                                    /*if (filename.contains("_ID")) {
										logger.logInfo("Verificando pasta depara " + filename);
                                        LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                        String protocolo_id = cutString(filename.toUpperCase(), "_ID", "_");
                                        
                                        String diretorioProtocolo = "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/";
                                        
                                        atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
                                    }*/
									FileUtil.deleteFile(fileDePara);
                                }
                            }
                        }
                    } catch (Exception deParaException) {
                        logger.logError("Erro executando DePara " + diretorioDePara, deParaException);
                    }
							

                    if (diretorioArquivo.contains("/APagar") && diretorioArquivo.contains("_#")) {
						logger.logInfo("DIREARC " + diretorioArquivo);
                        File file = new File(diretorioArquivo);

                        // renomeia arquivos com extens?o .XLSX 
                        File []  arquivosCaixaAlta = file.listFiles();
                        if (FileUtil.dirHasFiles(diretorioArquivo)) {

                            for (File fl: arquivosCaixaAlta) {
                            
                                logger.logInfo("LENDO EMPRESA pagar = " + empresa + " | " + fl.getName());
                            
                                postStatus("S1", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), contabilidade, empresa.toUpperCase(), "PAGAR", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), logger);


                                if(fl.length() < sizeLimit) {                    // processar apenas arquivos MENORES que o limite
                                    try {
                                        String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").replaceAll("\\.PDF","_\\.pdf").toLowerCase();
                                        if (fl.getAbsolutePath().contains(".XLSX") || fl.getAbsolutePath().contains(".PDF")) {


                                            File fileDestino = new File(arquivoDestino);
                                            FileUtil.copyFolder(fl, fileDestino);
											logger.logInfo("Deletando1 " + fl.getName());
                                            FileUtil.deleteFile(fl);
                                        }
                                    }
                                    catch (Exception xx) {
										logger.logInfo("Quebrou 1 " + xx.getMessage());
										return new JSONArray();
									}
                                    
                                    try {
                                        String arquivoDestino = fl.getAbsolutePath().replace("[","").replace("]","").replace("{","").replace("}","").replace("%","");
                                        if (fl.getAbsolutePath().contains("[") || fl.getAbsolutePath().contains("]") || fl.getAbsolutePath().contains("{") || fl.getAbsolutePath().contains("}") || fl.getAbsolutePath().contains("%")) {
                                            File fileDestino = new File(arquivoDestino);
                                            FileUtil.copyFolder(fl, fileDestino);
											logger.logInfo("Deletando2 " + fl.getName());
                                            FileUtil.deleteFile(fl);
                                        }
                                    }
                                    catch (Exception xx) {
										logger.logInfo("Quebrou 2 " + xx.getMessage());
										return new JSONArray();
									}
                                }
                                
                                if(fl.getName().toUpperCase().contains("..")){
                                    try {
                                        String arquivoExtensaoCorreta = fl.getAbsolutePath().replaceAll("\\..","\\.");
                                        // if (fl.getAbsolutePath().contains(".XLSX")) {

                                            File fileDestino = new File(arquivoExtensaoCorreta);
                                            FileUtil.copyFolder(fl, fileDestino);
											logger.logInfo("Deletando3 " + fl.getName());
                                            FileUtil.deleteFile(fl);
                                        //}
                                    }
                                    catch (Exception xx) {
										logger.logInfo("Quebrou 3 " + xx.getMessage());
										return new JSONArray();
									}
                                }
								if (!fl.getName().toUpperCase().equals("PROCESSADO")) insereLog(dbIOContOtt, diretorioArquivo, INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), fl.getName(), logger);
                            }
                        }


                        // FINAL renomeia arquivos com extens?o .XLSX 
						
						logger.logInfo("ANTES FOR EQUIPE FECHAMENTO");
						
						file = new File(diretorioArquivo);
						File[] files = file.listFiles();

                        if (FileUtil.dirHasFiles(diretorioArquivo)) {
                            for (File fl: files) {
                                
                                String rodaConversor = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_EQUIPE_FECHAMENTO");
								String[] rodaConversorAux = rodaConversor.split(",");
                                //Conversor
                                if (rodaConversor != null) {
                                    if (rodaConversor.contains(",") && ((rodaConversor.toUpperCase().contains("CONVERTE") && rodaConversor.contains("XLSX")) || rodaConversorAux[1].toUpperCase().equals("TRUE")) && !fl.getAbsolutePath().toUpperCase().contains(".CSV")
                                        && fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
                                            
                                        // if (fl.getAbsolutePath().toUpperCase().contains(".XLSX") && rodaConversor.contains("XLSX")) {
                                        if (fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
                                            File arquivoDeploy  = new File("C:/Conversor/Excel/" + "pagar_" + contabilidade + "_" + empresa + "_ancora_" + cutString(fl.getAbsolutePath(), fl.getAbsolutePath().replaceAll("\\\\", "/").lastIndexOf("/")+1));
                                            
                                            try { FileUtil.copyFolder(fl, arquivoDeploy);}
                                            catch (Exception e) {logger.logInfo("ERRO COPIANDO " + e.getMessage());}
                                            logger.logInfo("Del1");
                                            try { 
                                                FileUtil.deleteFile(fl);
                                            } catch (Exception XX) {} 
                                            
											temConversorXlsx = true;
                                            continue;
                                        }
                                    }
                                }
                                
                                if (fl.getAbsolutePath().toUpperCase().contains("ROTA.TXT")) {
                                
                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                    File arquivoPortal  = new File(RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/arquivos/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagasEndpoint.script_APAGAR.txt");
                                    
                                    FileUtil.copyFolder(arquivoDeploy, arquivoPortal);
                                    
                                    try { 
                                            FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {} 
                                    logger.logInfo("Del2");
                                    try { 
                                        FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {} 
                                    
                                    continue;
                                }
                                
                                if (fl.getAbsolutePath().toUpperCase().contains(".SCRIPT")) {
                                
                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                    
                                    FileUtil.copyFolder(fl, arquivoDeploy);
									logger.logInfo("Del3");

                                    try { 
                                            FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {} 
                                    
                                    
                                    continue;
                                }
                                
                                if (arquivoGrande.equals("")) arquivoGrande = verificaArquivoGrande(fl, sizeLimit, "PAG");
                                
									/*
									else {
									
										double sizeBig = (Math.pow(1024,2)); //MiB  

										if(fl.length() >= sizeBig) {
											String filenameGrande = fl.getAbsolutePath();
											filenameGrande = filenameGrande.replaceAll("\\\\", "/");
											if (!filenameGrande.endsWith("/Processado")) {
												if (!FileUtil.fileExists(diretorio + "/Processado/Grande")) {
													FileUtil.mkDir(diretorio + "/Processado/Grande");
												}
												FileUtil.moveToDir(filenameGrande, diretorio + "/Processado/Grande");
											}
										}
									}*/
                                        
                            }
							
							if (temConversorXlsx) {
								converteuXlsx = converteuXlsx(protocoloPrincipal, apiWeb, logger);
								while (!converteuXlsx) {
									converteuXlsx = converteuXlsx(protocoloPrincipal, apiWeb, logger);
									
								}
								buscaConversorXlsx(protocoloPrincipal, apiWeb, logger);
							}
							
							file = new File(diretorioArquivo);
							files = file.listFiles();

                            for (File fl: files) {
								if (fl.getName().equals("Processado")) continue;
                                if (arquivoGrande.equals("")) {
									
									atualizaLog(protocoloPrincipal, "DATA_INICIO_PROCESSAMENTO", dbIOContOtt, logger);
									
									logger.logInfo("AGss " + fl.getName());
									

                                    try {

                                        //renomear arquivo que nao possua extensao para (.txt)
                                        if(fl.isFile() && !fl.getName().contains(".")){
                                            String flStr = fl.getAbsolutePath()+".txt";
                                            File flTemp = new File(flStr);
                                            fl.renameTo(flTemp);
                                        }

                                        //if (protocoloPrincipal.equals("")) protocoloPrincipal = cutString(fl.getName().toUpperCase(), "_ID", "_");

                                        if (fl.isFile() && oicContabil.equals("NAO")) {
                                            filename = fl.getAbsolutePath();
                                            filename = filename.replaceAll("\\\\", "/");
                                            FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
                                            
                                            if (fl.getName().toUpperCase().contains("_ID")){
                        
                                                // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                                // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                // String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                String protocolo_id = getProtocoloId(fl.getName());
                                                
                                                String diretorioProtocolo = "/inout/contabil/" + contabilidade + "/" + empresa + "/DePara/";
                                                
                                                atualizaProtocolo(diretorioArquivo.toUpperCase(), oicContabil, "", diretorioProtocolo, protocolo_id, apiWeb, logger);
                                            }
											return records;

                                        } else if(fl.isFile() && oicContabil.equals("SIM")){
											
											logger.logInfo("Protocolos dentro da leitura " + protocoloPrincipal + " | " + getProtocoloId(fl.getName()) + " | " + protocoloAnterior);
											
											if (/*!protocoloPrincipal.equals(getProtocoloId(fl.getName())) ||*/ protocoloPrincipal.equals(protocoloAnterior)){
												logger.logInfo("BREAK - WORKER - 520");
												break;
											} 
											if (!protocoloPrincipal.equals(getProtocoloId(fl.getName()))) continue;
											
											logger.logInfo("Comecou o processo pagas");

                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                            if(oicEmpresa.equals("NAO")){
                                                //mover para processado arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");

                                                oicEmpresaNao = true;
                                                continue;

                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {
                                                oicEmpresaNao = false;
                                                String nomeRota = contabilidade + "." + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagas";
                                                
                                                // logger.logInfo("TESTANDODOO " + fl.getName() + " | " + extensaoArquivo.toUpperCase());
                                                //Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - In?cio
                                                if (fl.getName().toUpperCase().contains("_ID")) {
                                                    // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                                    // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                    // String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                    String protocolo_id = getProtocoloId(fl.getName());
                                                    
                                                    converteu = converteuPDF(protocolo_id, apiWeb, logger);
                                                    while (!converteu) {
                                                        converteu = converteuPDF(protocolo_id, apiWeb, logger);
                                                    }
													
													String rodaConversor = props.get(empresa.toUpperCase() + "_EQUIPE_FECHAMENTO");
													
													
                                                }
												
                                                
                                                try{
                                                
                                                    logger.logInfo("Antes Padrao   " + contabilidade +"_"+ empresa.substring(0,empresa.indexOf("_#")));
                                                
                                                    String tipoProduto = props.get(empresa.toUpperCase().substring(0,empresa.indexOf("_#")).toUpperCase() + "_TIPO_PRODUTO");
                                                    String idRoteiro  = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_ID_ROTEIRO_PAGAR");
                                                    String codRoteiro  = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_ROTEIRO_PAGAR");
                                                    
                                                    // executa rota que atualiza os roteiros das empresas
                                                    // RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
                                                    atualizaArquivoRoteiro(contabilidade, empresa.substring(0,empresa.indexOf("_#")), logger);
                                                    logger.logInfo("fl.getName() -> " + fl.getName());


                                                    try {
                                                        String rodaPadrao = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_PLANILHA_PADRAO_PAGAR");
                                                        logger.logInfo("PPP " + rodaPadrao + " | " + contabilidade);

                                                        if (rodaPadrao.toUpperCase().trim().equals("TRUE")) {															
                                                            // PartnerConnection connection = Connector.newConnection(config);
															logger.logInfo("EMSS " + idRoteiro + " | " + contabilidade + " | " + empresa.substring(0,empresa.indexOf("_#")) + " | " + dirName + " | " + dirNameW);
                                                            preparaArquivo(idRoteiro, "Contas PAGAS", contabilidade, empresa.substring(0,empresa.indexOf("_#")), dirName, dirNameW, config, logger);

                                                            nomeRota = getNomeContabilidade() + "." + getNomeContabilidade() +  "_ContasPagas";
															logger.logInfo("NRR " + nomeRota);
                                                            double tempoInicio1 = System.currentTimeMillis();
                                                            RouteEngine.execRoute(nomeRota);
                                                            logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
                                                            rodouRota = true;
                                                        }
                                                    }

                                                    catch (Exception xx) {
                                                        logger.logInfo("ERRO AO RODAR ROTEIRO " + xx.getMessage());
                                                    }
                                                    
                                                    logger.logInfo("WFIILI " + tipoProduto);
                                                    
                                                    if (!tipoProduto.contains("ILIMITADA")) {
                                                        preparaArquivoEspecifico(idRoteiro, "Contas PAGAS", contabilidade, empresa.substring(0,empresa.indexOf("_#")), dirName, dirNameW,  logger);

                                                        // Atualia o peoperties eperara para rodar a rota especifica
                                                        // caso o arquvo nao tenha sido rodado na rota padrao

                                                        StringBuilder txt1 = new StringBuilder();    
                                                        String empresaProperties = dirNameW + "empresa.properties";
                                                        FileWriter writer = new FileWriter(empresaProperties);
                                                        txt1.append("NOME_EMPRESA = " + empresa.substring(0,empresa.indexOf("_#")));
                                                        txt1.append("\r\n");
                                                        txt1.append("NOME_CONTABILIDADE = " + contabilidade);
                                                        txt1.append("\r\n");
                                                        txt1.append("MANTEM_ARQUIVO = NAO");
                                                        writer.writeNewFile(txt1.toString());

                                                        empresaProperties = dirName + "empresa.properties";
                                                        writer = new FileWriter(empresaProperties);
                                                        writer.writeNewFile(txt1.toString());  

                                                        File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                                        File eServidor  = new File("C:/inout/docs/processos/producao.txt");
                                                        File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                                        if(eServidor.exists()) {
                                                            FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
                                                            arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                                        }

                                                        File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "_ContasPagasEndpointA.script");
                                                        if (empresa.substring(0,empresa.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !empresa.substring(0,empresa.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/OTWBussola/LeituraBalanceteEndpointA.script");

                                                        logger.logInfo("ORIGEM  " + arquivoOrigem.getName());
                                                        logger.logInfo("DESTINO " + arquivoDestino.getName());
                                                        FileUtil.copyFolder(arquivoOrigem, arquivoDestino);


                                                        nomeRota = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "." + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) +  "_ContasPagas";
                                                        if (empresa.substring(0,empresa.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !empresa.substring(0,empresa.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) nomeRota = "OTWBussola.LeituraBalancete";

                                                        logger.logInfo("ROTA   " + nomeRota + "<>" + arquivoOrigem);

                                                        double tempoInicio1 = System.currentTimeMillis();
                                                        RouteEngine.execRoute(nomeRota);
                                                        logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
                                                        rodouRota = true;
                                                        rotasOk = true;
                                                    }
                                                    
                                                    int antesRodar =  files.length;
                                    
                                    
                                    
                                                    // passos para atualizar o integrador 4.0 
                                                    // PASSO 1: olhar se gerou DEPARA
                                                    // SE ENCONTRAR DEPARA, ATUALIZA STATUS E SEGUE SEM ENVIAR ARQUIVO PRONTO
													
													boolean ignoraStatusOposto = false;
													
													logger.logInfo("NDP " + naoGerouDepara + " | " + fl.getName());
                                                            
                                                    if (naoGerouDepara && fl.getName().toUpperCase().contains("_ID")) {
                                                        String diretoriArquivos = "/inout/contabil/"+contabilidade + "/" + empresa + "/DePara/";
                                                        File fileArq = new File(diretoriArquivos);
                                                        File [] filesArquivos = fileArq.listFiles();
                                                        try {

                                                            String cnpjEmpresa		 = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
                                                            String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
                                                            String idSFContabilidade = props.get("CONTABILIDADE_ID");

                                                            if (FileUtil.dirHasFiles(diretoriArquivos)) {
                                                                for (File fileDePara: filesArquivos) {
																	
																	logger.logInfo("FLGTNM " + fileDePara.getName().toUpperCase());
																	if (fileDePara.getName().equals("Processado")) continue;
																	

                                                                    if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
                                                                        fileDePara.getName().toUpperCase().contains(".STATUS")) && 
                                                                        fileDePara.getName().toUpperCase().contains("PAGAR")) {
                                                                        //sprint conversorpdf
                                                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                        // String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                        String protocolo_id = getProtocoloId(fl.getName());
                                                                        String nomeArquivoApagado = cutString(fl.getName().toUpperCase(), "_ID");
                                                                        nomeArquivoApagado = cutString(nomeArquivoApagado, "_", nomeArquivoApagado.lastIndexOf("."));
                                                                        boolean continuaConversor = false;
                                                                        // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                                                        
                                                                        // if (fileDePara.getName().toUpperCase().contains("LEUCONVERSORANTIGO")) {
                                                                            String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocolo_id, nomeArquivoApagado, logger);
                                                                            // JWR 03072023
                                                                            /*if(fileDePara.exists()) {
                                                                                fileDePara.delete();
                                                                                continue;
                                                                            }*/
                                                                        // }
                                                                        //Sprint conversorpdf
                                                                        //Verifica se encontramos algum erro ou status 3 de 4 na pasta do depara, da empresa
                                                                        //Caso encontre, e tenha um id de protocolo, procura algum arquivo na pasta do conversor de pdf
                                                                        //relacionado ao id do protocolo em questao e caso encontre, usaremos esse arquivo para reprocessar a rota.
                                                                        // if (!fileDePara.getName().toUpperCase().contains(".ERR")) continuaConversor = buscaProtocoloConversor(protocolo_id, apiWeb);
                                                                        // if (continuaConversor) continue;
																		logger.logInfo("Deu erro pasta depara " + diretorioArquivo.toUpperCase() + " | " + diretoriArquivos + " | " + protocolo_id);
                                                                        atualizaProtocolo(diretorioArquivo.toUpperCase(), "", fileDePara.getName(), "", protocolo_id, apiWeb, logger);
																		
                                                                        if(fileDePara.exists()) {
                                                                            fileDePara.delete();
                                                                            // continue;
																			
                                                                        }
																		return records;
                                                                        
                                                                    } else if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
                                                                        fileDePara.getName().toUpperCase().contains(".STATUS")) && 
                                                                        fileDePara.getName().toUpperCase().contains("RECEBER")) {
																		ignoraStatusOposto = true;
																	}



                                                                    if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

                                                                    // String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                    String idLoteFila   = getProtocoloId(fl.getName());
                                                                    // String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");
                                                                    String idfileDePara = getProtocoloId(fileDePara.getName());

                                                                    if (!idLoteFila.equals(idfileDePara)) continue;


                                                                    // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

                                                                    // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                    if(fl.getName().toUpperCase().contains("_ID")) {
                                                                        String apagouConversor = apagaArquivoConversor(diretoriArquivos, getProtocoloId(fl.getName().toUpperCase()), "", logger);
                                                                        String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "1", "Pendencia de preenchimento de contas para este arquivo.",  logger);
                                                                        naoGerouDepara = false;
																		return records;
                                                                    } 
																	
																	if (ignoraStatusOposto) break;

                                                                }

                                                            }
                                                        }
                                                        catch (Exception xx) {}
                                                    }
                                                    
                                                    // PASSO 2: olhar se gerou arquivo pronto e postar no portal.
                                                    if (naoGerouDepara)	{
														
														
														if (!rodouRota) {
															// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOLEULICENCA", "/inout/contabil/"+contabilidade+"/"+empresa+"/DePara/", getProtocoloId(fl.getName()), apiWeb, logger);
															return records;
														}
														verificaPendenciasGeraArquivo(contabilidade, protocoloPrincipal, props);
														
														logger.logInfo("Nao leu depara");
                                                        String diretoriArquivos = "/inout/contabil/"+contabilidade + "/arquivos/";
                                                        File fileArq = new File(diretoriArquivos);
                                                        File [] filesArquivos = fileArq.listFiles();
                                                        
                                                        
                                                        try {

                                                            String cnpjEmpresa		 = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
                                                            String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
                                                            String idSFContabilidade = props.get("CONTABILIDADE_ID");

                                                            JSONObject auxObjBucket		= new JSONObject();
                                                            auxObjBucket.put("server",	SERVER_INTEGRADOR_DEV);
                                                            auxObjBucket.put("mapping",	"/api/v1/arquivos_empresas");

                                                            if (FileUtil.dirHasFiles(diretoriArquivos)) {
                                                                for (File fileDePara: filesArquivos) {
                                                                    

                                                                    if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

																	/*String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                    String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");*/
                                                                    String idLoteFila   = protocoloPrincipal;
                                                                    String idfileDePara = getProtocoloId(fileDePara.getName());
																	// logger.logInfo("Pegou id arquivo pronto " + idLoteFila + " | " + idfileDePara);

                                                                    if (!idLoteFila.equals(idfileDePara)) continue;
                                                                    
																	logger.logInfo("FLDPGN " + fileDePara.getName());

                                                                    // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

                                                                    JSONObject jBucket = new JSONObject();
                                                                    jBucket.put("cnpjContabilidade",	cnpjContabilidade);
                                                                    jBucket.put("cnpjEmpresa",			cnpjEmpresa);
                                                                    if (fileDePara.getName().contains("_RECEBER")) {
                                                                        jBucket.put("tipoMovimento", "REC");
                                                                    }
                                                                    else {
                                                                        jBucket.put("tipoMovimento", "PAG");
                                                                    }
                                                                    String nomeArquivo64 = "";


                                                                    jBucket.put("tipoArquivo", "TXT");
                                                                    jBucket.put("nomeArquivo", fileDePara.getName());
                                                                    nomeArquivo64 = fileDePara.getName();

                                                                    String dirRouteNameId= "c:/buckets/oic-arquivo-pronto/"+contabilidade+"/"+DateUtil.dateToString(new Date(), "yyyy/MM/dd")+"/";
                                                                    if (!FileUtil.fileExists(dirRouteNameId)) {
                                                                        FileUtil.mkDir(dirRouteNameId);
                                                                    }

                                                                    File arquivoOrigemId = new File("c:/inout/contabil/"+contabilidade+"/arquivos/" + nomeArquivo64);
                                                                    

                                                                    if (arquivoOrigemId.exists() && ((!fileDePara.getName().toUpperCase().contains("RESUMO_LOTE_") && !fileDePara.getName().toUpperCase().contains("RESUMO_APOS_IMPORTACAO")
                                                                        && !fileDePara.getName().toUpperCase().contains("RESUMO_LOGS_IMPORTACAO")) || fornecedorUnico.contains("EXIBE_RESUMO"))) {
                                                                        File arquivoDeployId  = new File(dirRouteNameId + nomeArquivo64);
                                                                        
                                                                        //JWR Daqui ateh a linha 2123 nao esta deixando o arquivo pronto na pasta arquivos da contabilidade dmassociados empresa treze
                                                                        //estah jogando direto para o enviados. Obs: eh um arquivo .omc
                                                                        
                                                                        FileUtil.copyFolder(arquivoOrigemId, arquivoDeployId);
                                                                        nomeArquivo64 = "https://s1.ottimizza.com.br:55325/storage/"  + Base64.getEncoder().encodeToString((dirRouteNameId + nomeArquivo64).getBytes());
                                                                        jBucket.put("linkArquivo", nomeArquivo64);
                                                                        try {
                                                                            FileUtil.moveToDir("c:/inout/contabil/"+contabilidade+"/arquivos/" + fileDePara.getName(), "c:/inout/contabil/"+contabilidade+"/arquivos/enviados");
                                                                        } catch (Exception xx) {

                                                                        }
																		
																		logger.logInfo("Enviando arquivo pronto " + fileDePara.getName());

                                                                        try {

                                                                            // colocado para nao enviar arquivo de resumo lote
                                                                            // if (!fileDePara.getName().toUpperCase().contains("RESUMO_") || fornecedorUnico.contains("EXIBE_RESUMO")) {
                                                                                String uriIntegrador = String.format("%s%s", auxObjBucket.optString("server"), auxObjBucket.optString("mapping"));
                                                                                String retorno = genericPostId(uriIntegrador, jBucket, apiWeb.token, logger); 

                                                                            // }
                                                                        }
                                                                        catch (Exception xx) {
                                                                            
                                                                            logger.logInfo(" erro genericPostId 2526 "  + xx);


                                                                        }
																		
																		if(fl.getName().toUpperCase().contains("_ID")) gerouArquivoFinal = true;

                                                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                        /*if(fl.getName().toUpperCase().contains("_ID")) {
                                                                            String apagouConversor = apagaArquivoConversor(diretoriArquivos, idLoteFila, "", logger);
                                                                            String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado.",  logger);
																			
																			gerouArquivoFinal = true;
                                                                        
                                                                        } */
                                                                    }

                                                                }

                                                            }
															if (gerouArquivoFinal) {
																// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocoloPrincipal, "", logger);
																String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado.",  logger);
																if (diretorioArquivo.toUpperCase().contains("MARLIAN")) logger.logInfo("Gerou o arquivo final");
																return records;
															}
														}
                                                        catch (Exception xx) {}
                                                    }



                                                    File fileDepoisLista = new File(diretorioArquivo);
                                                    File [] filesDepois = fileDepoisLista.listFiles();
                                                    int depoisRodar =  filesDepois.length;
                                                    
                                                    // caso encontre algum arquivo com o mesmo empresa de antes de rodar a rota
                                                    // move arquivo para pata processado para nao ficar em loop
                                                    for (File fileDePoisComparar: filesDepois) {
                                                        
                                                        if (fileDePoisComparar.getAbsolutePath().equals(fl.getAbsolutePath()) && fl.exists()) {
                                                            String moveFilename = fl.getAbsolutePath();
                                                            moveFilename = moveFilename.replaceAll("\\\\", "/");
                                                            FileUtil.moveToDir(moveFilename, diretorioArquivo + "/Processado");
                                                        }
                                                    }

                                                    if (antesRodar == depoisRodar) {
                                                        String planilhaErro = dirName + empresa + "/DePara" + "/empresa_PAGAR.err";
                                                        FileWriter writerErro = new FileWriter(planilhaErro);
                                                        writerErro.writeNewFile(planilhaErro.toString() + "<<>>" + antesRodar + "<<>>" + depoisRodar);
														
														if (fl.getName().contains("_ID")) {
															// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "CAIRNOELSE", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
															return records;
														}
						
                                                        if(fl.exists()) {
                                                            //fl.delete();
                                                            filename = fl.getAbsolutePath();
                                                            filename = filename.replaceAll("\\\\", "/");
                                                            FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
                                                        }
                                                        antesRodar--;
                                                    }
                                                    
                                                    
                                                    if (FileUtil.fileExists(dirName + empresa + "/DePara" + "/02--Etapa 2 de 4--PAGAR.status")) {
														if (fl.getName().contains("_ID")) {
															// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "CAIRNOELSE", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
															return records;
														}
                                                        criaAvisoErroLayout( dirName + empresa + "/DePara" + "/02--Etapa 2 de 4--PAGAR.status", logger);

                                                    }


                                                }catch(Exception aa){
                                                    //mover
                                                    filename = fl.getAbsolutePath();
                                                    filename = filename.replaceAll("\\\\", "/");
                                                    FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
													logger.logInfo("Caiu no catch processamento de Pagas " + aa.getMessage());
													// atualizaProtocolo("", "NAOLEUMOVIMENTO", diretoriArquivos, protocolo_id, apiWeb, logger);
													
													return records;

                                                }

                                            } else if(extensaoArquivo.equals(".xls")) {
                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");

                                            } else {
                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
                                            }
                                        }
                                    } catch (Exception eee) {
                                        logger.logError("Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                    }
									atualizaLog(protocoloPrincipal, "DATA_FIM_PROCESSAMENTO", dbIOContOtt, logger);

                                } else{
									// logger.logInfo("oenagg");
                                    filename = fl.getAbsolutePath();
                                    filename = filename.replaceAll("\\\\", "/");
                                    
                                    if (arquivoGrande.toUpperCase().contains("_ID")) {
                                        // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                        String protocolo_id = cutString(arquivoGrande.toUpperCase(), "_ID", "_");
                                        
                                        String diretorioProtocolo = "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/";
                                        
                                        atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
                                    }
                                    
                                    if (!filename.endsWith("/Processado")) FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
									return records;
                                }
								protocoloAnterior = protocoloPrincipal;
                            }
                            if (oicEmpresaNao) {
								logger.logInfo("oen");
                                // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "OICEMPRESANAO", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
								return records;

                            }
							
                        }
						logger.logInfo("Fez o retorno final de pagas " +contabilidade + "<<>>>"  +  empresa + "<<>>" + protocoloPrincipal + "<<>>" + naoGerouDepara + "<<>>" + gerouArquivoFinal);
						
						if (!gerouArquivoFinal && naoGerouDepara) {
							// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
							atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOGEROUARQUIVO", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
						}
						
						return records;

                    }
                    else if (diretorioArquivo.contains("/AReceber") && diretorioArquivo.contains("_#")) {
						naoGerouDepara = true;
						gerouArquivoFinal = false;
						
                        File file = new File(diretorioArquivo);

                        // renomeia arquivos com extens?o .XLSX 
                        File []  arquivosCaixaAlta = file.listFiles();
                        if (FileUtil.dirHasFiles(diretorioArquivo)) {

                            for (File fl: arquivosCaixaAlta) {
                            
                                logger.logInfo("LENDO EMPRESA receber = " + empresa);
                            
                                postStatus("S1", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), contabilidade, empresa.toUpperCase(), "RECEBER", INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), logger);


                                if(fl.length() < sizeLimit) {                    // processar apenas arquivos MENORES que o limite
                                    try {
                                        String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").replaceAll("\\.PDF","_\\.pdf").toLowerCase();
                                        if (fl.getAbsolutePath().contains(".XLSX") || fl.getAbsolutePath().contains(".PDF")) {


                                            File fileDestino = new File(arquivoDestino);
                                            FileUtil.copyFolder(fl, fileDestino);
                                            FileUtil.deleteFile(fl);
                                        }
                                    }
                                    catch (Exception xx) {}
                                    
                                    try {
                                        String arquivoDestino = fl.getAbsolutePath().replace("[","").replace("]","").replace("{","").replace("}","").replace("%","");
                                        if (fl.getAbsolutePath().contains("[") || fl.getAbsolutePath().contains("]") || fl.getAbsolutePath().contains("{") || fl.getAbsolutePath().contains("}") || fl.getAbsolutePath().contains("%")) {
                                            File fileDestino = new File(arquivoDestino);
                                            FileUtil.copyFolder(fl, fileDestino);
                                            FileUtil.deleteFile(fl);
                                        }
                                    }
                                    catch (Exception xx) {}
                                }
                                
                                if(fl.getName().toUpperCase().contains("..")){
                                    try {
                                        String arquivoExtensaoCorreta = fl.getAbsolutePath().replaceAll("\\..","\\.");
                                        // if (fl.getAbsolutePath().contains(".XLSX")) {

                                            File fileDestino = new File(arquivoExtensaoCorreta);
                                            FileUtil.copyFolder(fl, fileDestino);
                                            FileUtil.deleteFile(fl);
                                        //}
                                    }
                                    catch (Exception xx) {}
                                }
								if (!fl.getName().toUpperCase().equals("PROCESSADO")) insereLog(dbIOContOtt, diretorioArquivo, INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")), fl.getName(), logger);
                            }
                        }


                        // FINAL renomeia arquivos com extens?o .XLSX 


                        file = new File(diretorioArquivo);
						File[] files = file.listFiles();

                        if (FileUtil.dirHasFiles(diretorioArquivo)) {
                            for (File fl: files) {
                                
                                String rodaConversor = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_EQUIPE_FECHAMENTO");
								String[] rodaConversorAux = rodaConversor.split(",");
								
								// logger.logInfo("RODA CONVERSOR AUX -> " + rodaConversorAux[1]);
                                //Conversor
                                if (rodaConversor != null) {
                                    if (rodaConversor.contains(",") && (rodaConversor.toUpperCase().contains("CONVERTE") && rodaConversor.contains("XLSX") || rodaConversorAux[1].contains("true")) && !fl.getAbsolutePath().toUpperCase().contains(".CSV")
                                        && fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
                                            
                                        if (fl.getAbsolutePath().toUpperCase().contains(".XLSX")) {
                                            File arquivoDeploy  = new File("C:/Conversor/Excel/" + "receber_" + contabilidade + "_" + empresa + "_ancora_" + cutString(fl.getAbsolutePath(), fl.getAbsolutePath().replaceAll("\\\\", "/").lastIndexOf("/")+1));
                                            
                                            try { FileUtil.copyFolder(fl, arquivoDeploy);}
                                            catch (Exception e) {logger.logInfo("ERRO COPIANDO " + e.getMessage());}
                                            
                                            try { 
                                                FileUtil.deleteFile(fl);
                                            } catch (Exception XX) {} 
                                            
											temConversorXlsx = true;
                                            continue;
                                        }
                                    }
                                }
                                
                                if (fl.getAbsolutePath().toUpperCase().contains("ROTA.TXT")) {
                                
                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                    File arquivoPortal  = new File(RouteEngine.INOUT_HOME + "/contabil/" + contabilidade + "/arquivos/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidasEndpoint.script_ARECEBER.txt");
                                    
                                    FileUtil.copyFolder(arquivoDeploy, arquivoPortal);
                                    
                                    try { 
                                            FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {} 
                                    
                                    try { 
                                        FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {} 
                                    
                                    continue;
                                }
                                
                                if (fl.getAbsolutePath().toUpperCase().contains(".SCRIPT")) {
                                
                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                    
                                    FileUtil.copyFolder(fl, arquivoDeploy);

                                    try { 
                                            FileUtil.deleteFile(fl);
                                    } catch (Exception XX) {} 
                                    
                                    
                                    continue;
                                }
                                
                                if (arquivoGrande.equals("")) arquivoGrande = verificaArquivoGrande(fl, sizeLimit, "REC");
                                
                                /*
                                else {
                                
                                    double sizeBig = (Math.pow(1024,2)); //MiB  

                                    if(fl.length() >= sizeBig) {
                                        String filenameGrande = fl.getAbsolutePath();
                                        filenameGrande = filenameGrande.replaceAll("\\\\", "/");
                                        if (!filenameGrande.endsWith("/Processado")) {
                                            if (!FileUtil.fileExists(diretorio + "/Processado/Grande")) {
                                                FileUtil.mkDir(diretorio + "/Processado/Grande");
                                            }
                                            FileUtil.moveToDir(filenameGrande, diretorio + "/Processado/Grande");
                                        }
                                    }
                                }*/
                                        
                            }
							
							
							if (temConversorXlsx) {
								converteuXlsx = converteuXlsx(protocoloPrincipal, apiWeb, logger);
								while (!converteuXlsx) {
									converteuXlsx = converteuXlsx(protocoloPrincipal, apiWeb, logger);
								}
								buscaConversorXlsx(protocoloPrincipal, apiWeb, logger);
							}
							
							file = new File(diretorioArquivo);
							files = file.listFiles();

                            for (File fl: files) {
								if (fl.getName().equals("Processado")) continue;
                                if (arquivoGrande.equals("")) {
									
									
									atualizaLog(protocoloPrincipal, "DATA_INICIO_PROCESSAMENTO", dbIOContOtt, logger);

                                    try {

                                        //renomear arquivo que nao possua extensao para (.txt)
                                        if(fl.isFile() && !fl.getName().contains(".")){
                                            String flStr = fl.getAbsolutePath()+".txt";
                                            File flTemp = new File(flStr);
                                            fl.renameTo(flTemp);
                                        }

                                        if (fl.isFile() && oicContabil.equals("NAO")) {
                                            //mover para processado arquivo
                                            filename = fl.getAbsolutePath();
                                            filename = filename.replaceAll("\\\\", "/");
                                            FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
                                            
                                            if (fl.getName().toUpperCase().contains("_ID")){
                        
                                                // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                                // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                
                                                String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + empresa + "/DePara/";
                                                
                                                atualizaProtocolo(diretorioArquivo.toUpperCase(), oicContabil, "", diretorioProtocolo, protocolo_id, apiWeb, logger);
                                            }
                                            return records;

                                        } else if(fl.isFile() && oicContabil.equals("SIM")){
											
											
											logger.logInfo("Protocolos dentro da leitura " + protocoloPrincipal + " | " + getProtocoloId(fl.getName()) + " | " + protocoloAnterior);
											
											if (/*!protocoloPrincipal.equals(getProtocoloId(fl.getName())) || */protocoloPrincipal.equals(protocoloAnterior)){
												logger.logInfo("BREAK - WORKER - 1191");
												break;
												
											} 
											
											if (!protocoloPrincipal.equals(getProtocoloId(fl.getName()))) continue;

                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                            if(oicEmpresa.equals("NAO")){
                                                //mover para processado arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
												
                                                oicEmpresaNao = true;
												continue;

                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {
                                                oicEmpresaNao = false;

                                                String nomeRota = contabilidade + "." + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidas";
                                                
                                                // logger.logInfo("TESTANDODOO " + fl.getName() + " | " + extensaoArquivo.toUpperCase());
                                                //Alterado para esperar uns segundos antes de copiar o arquivo dessa contabilidade por causa do tamanho - In?cio
                                                if (fl.getName().toUpperCase().contains("_ID")) {
                                                    // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                                    // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                    String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                    
                                                    converteu = converteuPDF(protocolo_id, apiWeb, logger);
                                                    while (!converteu) {
                                                        converteu = converteuPDF(protocolo_id, apiWeb, logger);
                                                    }
													
                                                }
                                                
                                                try{
                                                
                                                    logger.logInfo("Antes Padrao   " + contabilidade +"_"+ empresa.substring(0,empresa.indexOf("_#")));
                                                
                                                    String tipoProduto = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_TIPO_PRODUTO");
                                                    String idRoteiro  = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_ID_ROTEIRO_RECEBER");
                                                    String codRoteiro  = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_ROTEIRO_RECEBER");
                                                    
                                                    // executa rota que atualiza os roteiros das empresas
                                                    // RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
                                                    atualizaArquivoRoteiro(contabilidade, empresa.substring(0,empresa.indexOf("_#")), logger);
                                                    logger.logInfo("fl.getName() -> " + fl.getName());


                                                    try {
                                                        String rodaPadrao = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_PLANILHA_PADRAO_RECEBER");
                                                        logger.logInfo("PPP " + rodaPadrao + " | " + contabilidade);

                                                        if (rodaPadrao.toUpperCase().trim().equals("TRUE")) {															
                                                            // PartnerConnection connection = Connector.newConnection(config);
                                                            preparaArquivo(idRoteiro, "Contas RECEBIDAS", contabilidade, empresa.substring(0,empresa.indexOf("_#")), dirName, dirNameW, config, logger);

                                                            nomeRota = getNomeContabilidade() + "." + getNomeContabilidade() +  "_ContasRecebidas";
                                                            double tempoInicio1 = System.currentTimeMillis();
                                                            RouteEngine.execRoute(nomeRota);
                                                            logger.logInfo("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
                                                            rodouRota = true;
                                                        }
                                                    }

                                                    catch (Exception xx) {
                                                        logger.logInfo("ERRO AO RODAR ROTEIRO " + xx.getMessage());
                                                    }
                                                    
                                                    logger.logInfo("WFIILI " + tipoProduto + " | " + fl.getName());
                                                    
                                                    if (!tipoProduto.contains("ILIMITADA")) {
                                                        preparaArquivoEspecifico(idRoteiro, "Contas RECEBER", contabilidade, empresa.substring(0,empresa.indexOf("_#")), dirName, dirNameW,  logger);

                                                        // Atualia o peoperties eperara para rodar a rota especifica
                                                        // caso o arquvo nao tenha sido rodado na rota padrao

                                                        StringBuilder txt1 = new StringBuilder();    
                                                        String empresaProperties = dirNameW + "empresa.properties";
                                                        FileWriter writer = new FileWriter(empresaProperties);
                                                        txt1.append("NOME_EMPRESA = " + empresa.substring(0,empresa.indexOf("_#")));
                                                        txt1.append("\r\n");
                                                        txt1.append("NOME_CONTABILIDADE = " + contabilidade);
                                                        txt1.append("\r\n");
                                                        txt1.append("MANTEM_ARQUIVO = NAO");
                                                        writer.writeNewFile(txt1.toString());

                                                        empresaProperties = dirName + "empresa.properties";
                                                        writer = new FileWriter(empresaProperties);
                                                        writer.writeNewFile(txt1.toString());  

                                                        File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                                        File eServidor  = new File("C:/inout/docs/processos/producao.txt");
                                                        File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                                        if(eServidor.exists()) {
                                                            FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
                                                            arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + contabilidade + "/" + empresa.substring(0,empresa.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                                        }

                                                        File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "/" + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "_ContasRecebidasEndpointA.script");
                                                        if (empresa.substring(0,empresa.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !empresa.substring(0,empresa.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/OTWBussola/LeituraBalanceteEndpointA.script");

                                                        logger.logDebug("ORIGEM  " + arquivoOrigem.getName());
                                                        logger.logDebug("DESTINO " + arquivoDestino.getName());
                                                        FileUtil.copyFolder(arquivoOrigem, arquivoDestino);


                                                        nomeRota = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) + "." + INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf(".")) +  "_ContasRecebidas";
                                                        if (empresa.substring(0,empresa.indexOf("_#")).toUpperCase().startsWith("BUSSOLA") && !empresa.substring(0,empresa.indexOf("_#")).toUpperCase().endsWith("BUSSOLA")) nomeRota = "OTWBussola.LeituraBalancete";

                                                        logger.logDebug("ROTA   " + nomeRota + "<>" + arquivoOrigem);

                                                        double tempoInicio1 = System.currentTimeMillis();
                                                        RouteEngine.execRoute(nomeRota);
                                                        logger.logDebug("Tempo Rota; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
                                                        rodouRota = true;
                                                        rotasOk = true;
                                                    }
                                                    
                                                    int antesRodar =  files.length;
                                                    // boolean naoGerouDepara = true;
                                    
                                    
                                    
                                                    // passos para atualizar o integrador 4.0 
                                                    // PASSO 1: olhar se gerou DEPARA
                                                    // SE ENCONTRAR DEPARA, ATUALIZA STATUS E SEGUE SEM ENVIAR ARQUIVO PRONTO
													
													boolean ignoraStatusOposto = false;
                                                            
                                                    if (naoGerouDepara && fl.getName().toUpperCase().contains("_ID")) {
                                                        String diretoriArquivos = "/inout/contabil/"+contabilidade + "/" + empresa + "/DePara/";
                                                        File fileArq = new File(diretoriArquivos);
                                                        File [] filesArquivos = fileArq.listFiles();
                                                        try {

                                                            String cnpjEmpresa		 = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
                                                            String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
                                                            String idSFContabilidade = props.get("CONTABILIDADE_ID");

                                                            if (FileUtil.dirHasFiles(diretoriArquivos)) {
                                                                for (File fileDePara: filesArquivos) {

                                                                    if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
                                                                        fileDePara.getName().toUpperCase().contains(".STATUS")) && 
                                                                        fileDePara.getName().toUpperCase().contains("RECEBER")) {
                                                                        //sprint conversorpdf
                                                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                        String protocolo_id = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                        String nomeArquivoApagado = cutString(fl.getName().toUpperCase(), "_ID");
                                                                        nomeArquivoApagado = cutString(nomeArquivoApagado, "_", nomeArquivoApagado.lastIndexOf("."));
                                                                        boolean continuaConversor = false;
                                                                        // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                                                        
                                                                        // if (fileDePara.getName().toUpperCase().contains("LEUCONVERSORANTIGO")) {
                                                                            String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocolo_id, nomeArquivoApagado, logger);
                                                                            // JWR 03072023
                                                                            /*if(fileDePara.exists()) {
                                                                                fileDePara.delete();
                                                                                continue;
                                                                            }*/
                                                                        // }
                                                                        //Sprint conversorpdf
                                                                        //Verifica se encontramos algum erro ou status 3 de 4 na pasta do depara, da empresa
                                                                        //Caso encontre, e tenha um id de protocolo, procura algum arquivo na pasta do conversor de pdf
                                                                        //relacionado ao id do protocolo em questao e caso encontre, usaremos esse arquivo para reprocessar a rota.
                                                                        // if (!fileDePara.getName().toUpperCase().contains(".ERR")) continuaConversor = buscaProtocoloConversor(protocolo_id, apiWeb);
                                                                        // if (continuaConversor) continue;
                                                                        atualizaProtocolo(diretorioArquivo.toUpperCase(), "", fileDePara.getName(), "", protocolo_id, apiWeb, logger);
                                                                        
                                                                        if(fileDePara.exists()) {
                                                                            fileDePara.delete();
                                                                            // continue;
                                                                        }
																		return records;
                                                                    } else if ((fileDePara.getName().toUpperCase().contains(".ERR") || 
                                                                        fileDePara.getName().toUpperCase().contains(".STATUS")) && 
                                                                        fileDePara.getName().toUpperCase().contains("PAGAR")) {
																		ignoraStatusOposto = true;
																	}



                                                                    if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

                                                                    /*String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                    String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");*/
																	
																	String idLoteFila   = protocoloPrincipal;
                                                                    String idfileDePara = getProtocoloId(fileDePara.getName());

                                                                    if (!idLoteFila.equals(idfileDePara)) continue;


                                                                    // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

                                                                    // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                    if(fl.getName().toUpperCase().contains("_ID")) {
                                                                        String apagouConversor = apagaArquivoConversor(diretoriArquivos, cutString(fl.getName().toUpperCase(), "_ID", "_"), "", logger);
                                                                        String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "1", "Pendencia de preenchimento de contas para este arquivo.",  logger);
                                                                        naoGerouDepara = false;
                                                                    }

																	if (ignoraStatusOposto) break;

                                                                }

                                                            }
                                                        }
                                                        catch (Exception xx) {}
                                                    }
                                                    
                                                    // PASSO 2: olhar se gerou arquivo pronto e postar no portal.
                                                    if (naoGerouDepara)	{
														
														
														if (!rodouRota) {
															// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOLEULICENCA", "/inout/contabil/"+contabilidade+"/"+empresa+"/DePara/", getProtocoloId(fl.getName()), apiWeb, logger);
															return records;
														}
														verificaPendenciasGeraArquivo(contabilidade, protocoloPrincipal, props);
														
                                                        String diretoriArquivos = "/inout/contabil/"+contabilidade + "/arquivos/";
                                                        File fileArq = new File(diretoriArquivos);
                                                        File [] filesArquivos = fileArq.listFiles();
                                                        
                                                        
                                                        try {

                                                            String cnpjEmpresa		 = props.get(empresa.substring(0,empresa.indexOf("_#")).toUpperCase() + "_CNPJ_EMPRESA");
                                                            String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
                                                            String idSFContabilidade = props.get("CONTABILIDADE_ID");

                                                            JSONObject auxObjBucket		= new JSONObject();
                                                            auxObjBucket.put("server",	SERVER_INTEGRADOR_DEV);
                                                            auxObjBucket.put("mapping",	"/api/v1/arquivos_empresas");

                                                            if (FileUtil.dirHasFiles(diretoriArquivos)) {
                                                                for (File fileDePara: filesArquivos) {
																	
																	// if (diretorioArquivo.toUpperCase().contains("MARLIAN")) logger.logInfo("FLDPGN " + fileDePara.getName());
                                                                    

                                                                    if (!fileDePara.getName().toUpperCase().contains("_ID")) continue;

                                                                    /*String idLoteFila   = cutString(fl.getName().toUpperCase(), "_ID", "_");
                                                                    String idfileDePara = cutString(fileDePara.getName().toUpperCase(), "_ID", "_");*/
																	
																	String idLoteFila   = protocoloPrincipal;
                                                                    String idfileDePara = getProtocoloId(fileDePara.getName());

                                                                    if (!idLoteFila.equals(idfileDePara)) continue;
                                                                    

                                                                    // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

                                                                    JSONObject jBucket = new JSONObject();
                                                                    jBucket.put("cnpjContabilidade",	cnpjContabilidade);
                                                                    jBucket.put("cnpjEmpresa",			cnpjEmpresa);
                                                                    if (fileDePara.getName().contains("_RECEBER")) {
                                                                        jBucket.put("tipoMovimento", "REC");
                                                                    }
                                                                    else {
                                                                        jBucket.put("tipoMovimento", "PAG");
                                                                    }
                                                                    String nomeArquivo64 = "";


                                                                    jBucket.put("tipoArquivo", "TXT");
                                                                    jBucket.put("nomeArquivo", fileDePara.getName());
                                                                    nomeArquivo64 = fileDePara.getName();

                                                                    String dirRouteNameId= "c:/buckets/oic-arquivo-pronto/"+contabilidade+"/"+DateUtil.dateToString(new Date(), "yyyy/MM/dd")+"/";
                                                                    if (!FileUtil.fileExists(dirRouteNameId)) {
                                                                        FileUtil.mkDir(dirRouteNameId);
                                                                    }

                                                                    File arquivoOrigemId = new File("c:/inout/contabil/"+contabilidade+"/arquivos/" + nomeArquivo64);
                                                                    

                                                                    if (arquivoOrigemId.exists() && ((!fileDePara.getName().toUpperCase().contains("RESUMO_LOTE_") && !fileDePara.getName().toUpperCase().contains("RESUMO_APOS_IMPORTACAO")
                                                                        && !fileDePara.getName().toUpperCase().contains("RESUMO_LOGS_IMPORTACAO")) || fornecedorUnico.contains("EXIBE_RESUMO"))) {
                                                                        File arquivoDeployId  = new File(dirRouteNameId + nomeArquivo64);
                                                                        
                                                                        //JWR Daqui ateh a linha 2123 nao esta deixando o arquivo pronto na pasta arquivos da contabilidade dmassociados empresa treze
                                                                        //estah jogando direto para o enviados. Obs: eh um arquivo .omc
                                                                        
                                                                        FileUtil.copyFolder(arquivoOrigemId, arquivoDeployId);
                                                                        nomeArquivo64 = "https://s1.ottimizza.com.br:55325/storage/"  + Base64.getEncoder().encodeToString((dirRouteNameId + nomeArquivo64).getBytes());
                                                                        jBucket.put("linkArquivo", nomeArquivo64);
                                                                        try {
                                                                            FileUtil.moveToDir("c:/inout/contabil/"+contabilidade+"/arquivos/" + fileDePara.getName(), "c:/inout/contabil/"+contabilidade+"/arquivos/enviados");
                                                                        } catch (Exception xx) {

                                                                        }
																		
																		logger.logInfo("Enviando arquivo pronto " + fileDePara.getName());

                                                                        try {

                                                                            // colocado para nao enviar arquivo de resumo lote
                                                                            // if (!fileDePara.getName().toUpperCase().contains("RESUMO_") || fornecedorUnico.contains("EXIBE_RESUMO")) {
                                                                                String uriIntegrador = String.format("%s%s", auxObjBucket.optString("server"), auxObjBucket.optString("mapping"));
                                                                                String retorno = genericPostId(uriIntegrador, jBucket, apiWeb.token, logger); 

                                                                            // }
                                                                        }
                                                                        catch (Exception xx) {
                                                                            
                                                                            logger.logInfo(" erro genericPostId 2526 "  + xx);


                                                                        }
																		
																		if (fl.getName().toUpperCase().contains("_ID")) gerouArquivoFinal = true;

                                                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                                                        /*if(fl.getName().toUpperCase().contains("_ID")) {
                                                                            String apagouConversor = apagaArquivoConversor(diretoriArquivos, idLoteFila, "", logger);
                                                                            String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado.",  logger);
																			if (diretorioArquivo.toUpperCase().contains("MARLIAN")) logger.logInfo("Gerou o arquivo final");
																			gerouArquivoFinal = true;
                                                                        
                                                                        } */
                                                                    }

                                                                }
																if (gerouArquivoFinal) {
																	// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
																	String apagouConversor = apagaArquivoConversor(diretoriArquivos, protocoloPrincipal, "", logger);
																	String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "2", "Arquivo Processado.",  logger);
																	if (diretorioArquivo.toUpperCase().contains("MARLIAN")) logger.logInfo("Gerou o arquivo final");
																	return records;
																}

                                                            }
                                                        }
                                                        catch (Exception xx) {}
                                                    }



                                                    File fileDepoisLista = new File(diretorioArquivo);
                                                    File [] filesDepois = fileDepoisLista.listFiles();
                                                    int depoisRodar =  filesDepois.length;
                                                    
                                                    // caso encontre algum arquivo com o mesmo empresa de antes de rodar a rota
                                                    // move arquivo para pata processado para nao ficar em loop
                                                    for (File fileDePoisComparar: filesDepois) {
                                                        
                                                        if (fileDePoisComparar.getAbsolutePath().equals(fl.getAbsolutePath()) && fl.exists()) {
                                                            String moveFilename = fl.getAbsolutePath();
                                                            moveFilename = moveFilename.replaceAll("\\\\", "/");
                                                            FileUtil.moveToDir(moveFilename, diretorioArquivo + "/Processado");
                                                        }
                                                    }

                                                    if (antesRodar == depoisRodar) {
                                                        String planilhaErro = dirName + empresa + "/DePara" + "/empresa_RECEBER.err";
                                                        FileWriter writerErro = new FileWriter(planilhaErro);
                                                        writerErro.writeNewFile(planilhaErro.toString() + "<<>>" + antesRodar + "<<>>" + depoisRodar);
														
														if (fl.getName().contains("_ID")) {
															// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "CAIRNOELSE", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
															return records;
														}
														
                                                        if(fl.exists()) {
                                                            //fl.delete();
                                                            filename = fl.getAbsolutePath();
                                                            filename = filename.replaceAll("\\\\", "/");
                                                            FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
                                                        }
                                                        antesRodar--;
                                                    }
                                                    
                                                    
                                                    if (FileUtil.fileExists(dirName + empresa + "/DePara" + "/02--Etapa 2 de 4--RECEBER.status")) {
														if (fl.getName().contains("_ID")) {
															// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
															atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "CAIRNOELSE", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
															return records;
														}
                                                        criaAvisoErroLayout( dirName + empresa + "/DePara" + "/02--Etapa 2 de 4--RECEBER.status", logger);

                                                    }


                                                }catch(Exception aa){
                                                    //mover
                                                    filename = fl.getAbsolutePath();
                                                    filename = filename.replaceAll("\\\\", "/");
                                                    FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");

                                                }

                                            } else if(extensaoArquivo.equals(".xls")) {
                                                 //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");

                                            } else {
                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
                                            }
                                        }
                                    } catch (Exception eee) {
                                        logger.logError("Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                    }
									
									atualizaLog(protocoloPrincipal, "DATA_FIM_PROCESSAMENTO", dbIOContOtt, logger);

                                } else {
                                    filename = fl.getAbsolutePath();
                                    filename = filename.replaceAll("\\\\", "/");
                                    
                                    if (arquivoGrande.toUpperCase().contains("_ID")) {
                                        // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                        // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                        String protocolo_id = cutString(arquivoGrande.toUpperCase(), "_ID", "_");
                                        
                                        String diretorioProtocolo = "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/";
                                        
                                        atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
                                    }
                                    
                                    if (!filename.endsWith("/Processado")) FileUtil.moveToDir(filename, diretorioArquivo + "/Processado");
									return records;
                                }
								protocoloAnterior = protocoloPrincipal;
                            }

                            if (oicEmpresaNao) {
                                // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "OICEMPRESANAO", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
								return records;

                            }
							
							
                        }
						
						logger.logInfo("Fez o retorno final de recebidas " +contabilidade + "<<>>>"  +  empresa + "<<>>" + protocoloPrincipal + "<<>>" + naoGerouDepara + "<<>>" + gerouArquivoFinal);
						if (!gerouArquivoFinal && naoGerouDepara) {
							// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
							atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOGEROUARQUIVO", "/inout/contabil/"+ contabilidade + "/" + empresa + "/DePara/", protocoloPrincipal, apiWeb, logger);
						}
						
						return records;


                    }
                    else if (diretorioArquivo.contains("/DePara")) {
                        operacao = "DePara";
                        String diretorio = dirName + empresa + "/DePara";
                        
                        // logger.logDebug("DIRETORIO " + diretorio);
                        
                        File file2 = new File(diretorio);
                        File[] files = file2.listFiles();
                        try {
                            if (FileUtil.dirHasFiles(diretorio)) {
                                for (File fileDePara: files) {
                                    if (fileDePara.getName().equals("Processado")) continue; //JWR adicionar esse if caso haja erro de access denied no depara
                                    
                                    // logger.logDebug("LENDO EMPRESA depara = " + empresa + " | " + fileDePara.length() + " | " + sizeLimit + " | " + fileDePara.getName());
                                    if (fileDePara.isFile()){
                                        
                                        //participante
                                        if (fileDePara.getName().toUpperCase().contains("PARTICIPANTE") &&
                                            (fileDePara.getName().toUpperCase().endsWith(".CSV") )){
                                            File ImportaParticipante = new File(String.format("%s/contabil/Ottimizza/ImportaParticipante/Participante_%s.txt", RouteEngine.INOUT_HOME, empresa));
                                            // Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
                                            if (!ImportaParticipante.getParentFile().exists()) ImportaParticipante.getParentFile().mkdirs();

                                            if (!ImportaParticipante.exists()) {
                                                try {
                                                    if (ImportaParticipante.createNewFile()) {
                                                        // String com conteudos do Arquivo '.txt' com os dados para importacao
                                                        // do Plano de Contas da Empresa.
                                                        String txtIPContent = "";
                                                        txtIPContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                                                        txtIPContent += String.format("NOME_EMPRESA : %s%n", empresa.substring(0, empresa.indexOf("_#")));
                                                        txtIPContent += String.format("CODIGO_EMPRESA : %s%n", empresa.substring(empresa.indexOf("#") + 1));
                                                        // Escrever texto no arquivo
                                                        FileWriter writerDePara = new FileWriter(ImportaParticipante.getAbsolutePath());
                                                        writerDePara.writeNewFile(txtIPContent);
                                                    } else {
                                                        logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", ImportaParticipante.getAbsolutePath()));
                                                    }
                                                } catch(Exception createFileException) {
                                                    logger.logError(String.format("Error trying to create file '%s'!", ImportaParticipante.getAbsolutePath()), createFileException);
                                                }
                                            } else {
                                                logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", ImportaParticipante.getAbsolutePath()));
                                            }
                                            String rotaImportaPlano = "Ottimizza.ImportaParticipante";
                                            RouteEngine.execRoute(rotaImportaPlano);

                                            // caso encontre algum arquivo com o mesmo empresa de antes de rodar a rota
                                            // move arquivo para pata processado para nao ficar em loop
                                            File fileDepoisLista = new File(diretorio);
                                            File [] filesDepois = fileDepoisLista.listFiles();
                                            for (File fileDePoisComparar: filesDepois) {
                                                if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
                                                    String moveFilename = fileDePara.getAbsolutePath();
                                                    moveFilename = moveFilename.replaceAll("\\\\", "/");
                                                    FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
                                                }
                                            }

                                        }

                                        

                                        if(fileDePara.length() < sizeLimit || !fileDePara.getName().toUpperCase().endsWith(".XLSX")){
                                            //DE PARA
                                            //atualizaPendencias(versaoPlataforma, diretorio, contabilidade, fileDePara/* = fileDePara.getName() */, empresa);
                                            //PLANO CONTAS
                                            
                                            // logger.logDebug("PLNCNT " + fileDePara.getName() + " | " + contabilidade);
                                            
                                            if (!fileDePara.getName().toUpperCase().contains("PARTICIPANTE") && 
                                                fileDePara.getName().toUpperCase().contains("PLANO") &&
                                            (((fileDePara.getName().toUpperCase().startsWith("PLANO DE CONTA") || fileDePara.getName().toUpperCase().startsWith("PLANOCONTAS")) && fileDePara.getName().toUpperCase().endsWith(".CSV")) || 
                                                fileDePara.getName().toUpperCase().endsWith(".XLSX") || fileDePara.getName().toUpperCase().endsWith(".LST") || fileDePara.getName().toUpperCase().endsWith(".TXT") || fileDePara.getName().toUpperCase().endsWith(".PDF"))) {                    
                                                File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/PlanoContas_%s.txt", RouteEngine.INOUT_HOME, empresa));


                                                // Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
                                                if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

                                                // QUANDO FOR CSV, joga em pasta /inout/contabil/ottimizza/planocontas para poder importar
                                                // sem dar conflito com os .csv de depara. 
                                                if (fileDePara.getName().toUpperCase().endsWith(".CSV") || fileDePara.getName().toUpperCase().endsWith(".PDF")) {
                                                    filename = fileDePara.getAbsolutePath();
                                                    filename = filename.replaceAll("\\\\", "/");

                                                    if (!FileUtil.fileExists(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade))) {
                                                        FileUtil.mkDir(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade));
                                                    }

                                                    
                                                    FileUtil.moveToDir(filename, String.format("%s/contabil/Ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, contabilidade));

                                                }
                                                if (!txtImportaPlanoContas.exists()) {
                                                    try {
                                                        if (txtImportaPlanoContas.createNewFile()) {
                                                            // String com conteudos do Arquivo '.txt' com os dados para importacao 
                                                            // do Plano de Contas da Empresa.
                                                            String txtIPCContent = "";

                                                            txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                                                            txtIPCContent += String.format("NOME_EMPRESA : %s%n", empresa.substring(0, empresa.indexOf("_#")));
                                                            txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", empresa.substring(empresa.indexOf("#") + 1));

                                                            // Escrever texto no arquivo
                                                            FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
                                                            writerDePara.writeNewFile(txtIPCContent);
                                                        } else {
                                                            logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                        }   
                                                    } catch(Exception createFileException) {
                                                        logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
                                                    }
                                                } else {
                                                    logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                }                                            
                                                String rotaImportaPlano = "Ottimizza.ImportaPlanoContas";
                                                RouteEngine.execRoute(rotaImportaPlano);
                                            
                                                // caso encontre algum arquivo com o mesmo empresa de antes de rodar a rota
                                                // move arquivo para pata processado para nao ficar em loop
                                                File fileDepoisLista = new File(diretorio);
                                                File [] filesDepois = fileDepoisLista.listFiles();
                                                for (File fileDePoisComparar: filesDepois) {
                                                    if (fileDePoisComparar.getAbsolutePath().equals(fileDePara.getAbsolutePath()) && fileDePara.exists()) {
                                                        String moveFilename = fileDePara.getAbsolutePath();
                                                        moveFilename = moveFilename.replaceAll("\\\\", "/");
                                                        FileUtil.moveToDir(moveFilename, diretorio + "/Processado");
                                                    }
                                                }

                                            }
                                        }
                                    }else{
                                        filename = fileDePara.getAbsolutePath();
                                        filename = filename.replaceAll("\\\\", "/");
                                        FileUtil.moveToDir(filename, diretorio + "/Processado");
										
										if (diretorioArquivo.contains("APagar") && fileDePara.getName().contains("RECEBER_")) continue;
										else if (diretorioArquivo.contains("AReceber") && fileDePara.getName().contains("PAGAR_")) continue;
                                        
                                        if (filename.contains("_ID")) {
                                            // LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                            // adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
                                            String protocolo_id = cutString(filename.toUpperCase(), "_ID", "_");
                                            
                                            String diretorioProtocolo = "/inout/contabil/"+getNomeContabilidadeWorkflow() + "/" + empresa + "/DePara/";
                                            
                                            atualizaProtocolo(diretorioArquivo.toUpperCase(), "", "NAOLEULINHAS", diretorioProtocolo, protocolo_id, apiWeb, logger);
                                        }
										return records;
                                    }
                                }
                            }
                        } catch (Exception deParaException) {
                            logger.logError("Erro executando DePara " + diretorio, deParaException);
							return records;
                        }

                    }
                }

            }
        }

        /*if (objetoFila.has("ID")) {
            deleteFila(objetoFila.optInt("ID"), dbIOContOtt, logger);
        }*/

        /* if (dbIOContOtt != null) {
            dbIOContOtt.closeConnection();
            dbIOContOtt = null;
        }*/
		
		/*if (dbFila != null) {
            dbFila.closeConnection();
            dbFila = null;
        }*/


    } catch (Exception e) {
		logger.logError("Erro geral worker " + e.getMessage());
	}
		
	} catch (Exception e) {
		logger.logInfo("Caiu no catch worker " + e.getMessage());
	} finally {
		/*if (dbFila != null) {
			dbFila.closeConnection();
			dbFila = null;
		}*/
		if (dbIOContOtt != null) {
            dbIOContOtt.closeConnection();
            dbIOContOtt = null;
        }
	}

	/*if (dbFila != null) {
		dbFila.closeConnection();
		dbFila = null;
	}*/

    return records;
}

////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////  METODOS AUXILIARES  ////
////////////////////////////////////////  METODOS AUXILIARES  //////////////////////
//////////////////////  METODOS AUXILIARES  ////////////////////////////////////////
////  METODOS AUXILIARES  //////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////


public void verificaPendenciasGeraArquivo(String nomeContabilidade, String protocolo, SysProperties props) throws Exception {
	
	String codEmpresa = "";
	String nomeEmpresa = "";
	String loteMovimento = "";
	
	boolean possuiPendencia = false;
	
	JSONObject js = new JSONObject();
	JSONArray records = new JSONArray();
	
	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	dbIOCont = connectIOContabil(props, logger);
	if (dbIOCont == null || !dbIOCont.connectionIsValid()) {
		throw new Exception("GeraArquivoparaImportacaoEndpointA: Could not connect to 'IO_CONTABIL' database.");
	}

	try {
		JSONArray recs = dbIOCont.sql("SELECT DISTINCT LOTE, HISTORICO FROM IO_MOVIMENTO WHERE CLASSIFICACAO = ? AND LOTE LIKE ?")
		.setFields("LOTE,HISTORICO")
		.param("LOTE_ENCERRADO")
		.param("%"+protocolo+"%")
		.query();
		
		logger.logInfo("PROT " + protocolo + " | " + recs.length());

		// Verificar pendencias do lote
		for (int i = 0; i < recs.length(); i++) {
			JSONObject rec1 = recs.optJSONObject(i);

			loteMovimento = rec1.optString("LOTE");

			// Verificar pendencias do registros do lote
			try {
				possuiPendencia = false;
				codEmpresa = "";
				nomeEmpresa = "";


				long total = dbIOCont.sql("SELECT COUNT(*) FROM IO_MOVIMENTO WHERE LOTE = ? AND CONTADEBITO = ?")
				.param(loteMovimento)
				.param("PENDENTE")
				.debug(logger)
				.queryCount();
				if (total > 0) {
					possuiPendencia = true;
				}

				if (!possuiPendencia) {

					total = dbIOCont.sql("SELECT COUNT(*) FROM IO_MOVIMENTO WHERE LOTE = ? AND CONTACREDITO = ?")
					.param(loteMovimento)
					.param("PENDENTE")
					.debug(logger)
					.queryCount();
					if (total > 0) {
						possuiPendencia = true;
					}                            
				}

				if (!possuiPendencia) {
					JSONArray recs2 = dbIOCont.sql("SELECT CODEMPRESA,NOMEEMPRESA,CONTACREDITO,CONTADEBITO FROM IO_MOVIMENTO WHERE LOTE = ? ")
					.setFields("CODEMPRESA,NOMEEMPRESA,CONTACREDITO,CONTADEBITO")
					.param(loteMovimento)
					.maxResults(1)
					.query();

					for (int j = 0; j < recs2.length(); j++) {
						JSONObject rec2 = recs2.optJSONObject(j);
						codEmpresa   = rec2.optString("CODEMPRESA");
						nomeEmpresa  = rec2.optString("NOMEEMPRESA");
						break;
					}
				}
			} catch (Exception eSql2) {
				logger.logError("EndpointA: ERROR SELECT PENDENCIAS IO_MOVIMENTO.", eSql2);
				possuiPendencia = true;
			} // End -> Try/Catch 02.

			// Se lote nao possui pendencia adiciona para o JSONObject.
			if (!possuiPendencia && !nomeEmpresa.equals("")) {
				js = new JSONObject();

				js.put("NOMECONTABILIDADE", nomeContabilidade);
				js.put("CODEMPRESA", codEmpresa);
				js.put("NOMEEMPRESA", nomeEmpresa);
				js.put("LOTE", loteMovimento);
				js.put("HISTORICO", rec1.optString("HISTORICO"));

				records.put(js);
				
				logger.logInfo("LALA " + js.toString());
				
				

				try {
					dbIOCont.delete("IO_MOVIMENTO")
					.where("LOTE=? AND CLASSIFICACAO = ?")
					.param(loteMovimento)
					.param("LOTE_ENCERRADO")
					.execute();
				} catch (Exception eDel) {
					logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
				}						

			}
		} // End -> For LOTE.
		
		if (records.length() > 0) {
			try {
				GeraArquivoPadrao(records, logger);
			} catch (Exception e) {
				logger.logInfo("testt " + e.getMessage());
			}
		}
	} catch (Exception eSql1) {
		logger.logError("EndpointB: ERROR SELECT LOTE IO_MOVIMENTO", eSql1);
	} finally {
		// Fechar conexao com base de dados.
		if (dbIOCont != null) {
			try {
				dbIOCont.closeConnection();
				dbIOCont = null;
			} catch (Exception dbIOContException) {
				logger.logError("Error trying to close connection with database...\n\t'Ottimizza.GeraArquivoParaImportacao' line: \n", dbIOContException);
			}
		}
	} // End -> Try/Catch 01.
}

public String getProtocoloId(String nomeArquivo) {
	return quantityOf(nomeArquivo.toUpperCase(), "_ID") > 1 ? 
			cutString(nomeArquivo.toUpperCase(), nomeArquivo.toUpperCase().lastIndexOf("_ID")+3, "_") : cutString(nomeArquivo.toUpperCase(), "_ID", "_");
}

public String verificaArquivoGrande(File fl, double sizeLimit, String tipoMovimento) {
    if((fl.length() >= sizeLimit * 5) || (fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX"))){                    
        // processar apenas arquivos MENORES que o limite
        String arquivoGrande = fl.getName();
        arquivoGrande = tipoMovimento.equals("PAG") ? "Arquivo-Grande" + arquivoGrande + "_PAGAR" : "Arquivo-Grande" + arquivoGrande + "_RECEBER";
        
        return arquivoGrande;
    }
    return "";
}

public void preparaArquivo(String idRoteiro, String tipoIntegracao, String contabilidade, String empresa, String dirName, String dirNameW, ConnectorConfig config, InoutLogger logger) {
	boolean criaReader = false;
	try {
		StringBuilder txt1 = new StringBuilder();    
		String empresaProperties = dirName + "empresa.properties";
		FileWriter writer = new FileWriter(empresaProperties);
		txt1.append("NOME_EMPRESA = " + empresa);
		txt1.append("\r\n");
		txt1.append("NOME_CONTABILIDADE = " + contabilidade);
		txt1.append("\r\n");
		txt1.append("MANTEM_ARQUIVO = SIM");
		logger.logDebug("tt " + txt1.toString());
		
		writer.writeNewFile(txt1.toString());

		empresaProperties = dirNameW + "empresa.properties";
		writer = new FileWriter(empresaProperties);
		writer.writeNewFile(txt1.toString());
		
		logger.logInfo("preparaArquivo padrao w - 3 " + contabilidade + "/" + empresa);

	
		StringBuilder codigoNovo    = new StringBuilder();
		StringBuilder codigoRoteiro = new StringBuilder();
		
		FileReader reader = new FileReader("c:/ottimizza/dropbox/deploy/routes/ottimizza/TemplateOficialAtualEndpointA.script");
		// if (contabilidade.toUpperCase().contains("MICALI")) reader = new FileReader("c:/ottimizza/dropbox/deploy/routes/ottimizza/TemplateOficialAtualDevEndpointA.script");
		try {
			reader.openFile();
			String line = "";
			while(reader.hasNextLine()) {
				// Le a proxima linha do arquivo
				line = reader.nextLine();
				// Processa a linha
				// ....
				
				codigoNovo.append(line);
				if (line.contains("NAO ALTERAR DAQUI ATE O FINAL")) break;				
			}
		} catch (IOException ioe) {
			logger.logError(ioe);
		} finally {
			reader.closeFile();
		}
		
		String tipoRoteiro = "_ContasPagasRoteiroPadrao.script";
		if (tipoIntegracao.toUpperCase().contains("RECE")) tipoRoteiro = "_ContasRecebidasRoteiroPadrao.script";
		
		logger.logInfo("AQQ " + "c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
		
 			
		try {
			File fileRoteiro = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
  

			//logger.logDebug("fileRoteiro w - 3 " + contabilidade + "/" + empresa);

		    //if (fileRoteiro.exists() && tipoRoteiro.contains("TESTE XAVIER")) {
			//if (fileRoteiro.exists() &&
			//    !(/*contabilidade.toUpperCase().contains("MICALI") ||*/ contabilidade.toUpperCase().contains("CONCEITOCONTABILIDADE"))) {
			if (fileRoteiro.exists()) {
  				
				FileReader readerRoteiro = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
				try {
					readerRoteiro.openFile();
					String lineRoteiro = "";
					while(readerRoteiro.hasNextLine()) {
						// Le a proxima linha do arquivo
						lineRoteiro = readerRoteiro.nextLine();
						// Processa a linha
						// ....
						if (lineRoteiro.contains("public boolean read") || lineRoteiro.contains("public HashMap read")) break;
						
						codigoRoteiro.append(lineRoteiro);
						if (lineRoteiro.contains("FINALPARAMETRIZACAOREGRAS")) break;
 					}
				} catch (IOException ioe) {
					logger.logError(ioe);
				} finally {
					readerRoteiro.closeFile();
				}
			}
			else {
 
 				PartnerConnection connection = Connector.newConnection(config);  
				codigoRoteiro.append(prepareScript(idRoteiro, "OTTPADRAO" + empresa, "", contabilidade, tipoIntegracao, connection, logger));
				logger.logInfo("WF3 - login salesforce 3350" + contabilidade + "--" + empresa);
				criaReader = true;
  				
			}
		} catch (Exception xx) {logger.logDebug("erro w3 " + xx);}
		
 
		if (!codigoRoteiro.toString().equals("")) {
		
			empresaProperties = "";
			
			if (criaReader) {
				writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
				writer.writeNewFile(codigoRoteiro.toString());		
			}
			
			FileReader readerRoteiro = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
			String codigoExtratos = makeCodigoCartoes(readerRoteiro, logger).toString();
 			
			if (tipoIntegracao.toUpperCase().contains("PAGA"))  empresaProperties = RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + getNomeContabilidade() + "_ContasPagasEndpointA.script";
			if (tipoIntegracao.toUpperCase().contains("RECE"))  empresaProperties = RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + getNomeContabilidade() + "_ContasRecebidasEndpointA.script";
			writer = new FileWriter(empresaProperties);
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString() + codigoExtratos);				
			
			writer = new FileWriter("c:/inout/tmp/"+contabilidade+"_copia.txt");
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString());
			
		    writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
			writer.writeNewFile(codigoRoteiro.toString() + codigoExtratos);		

		}		
 	}
	catch (Exception xx) {}
	return;
}


public void preparaArquivoEspecifico(String idRoteiro, String tipoIntegracao, String contabilidade, String empresa, String dirName, String dirNameW, InoutLogger logger) {
	boolean criaReader = false;
	try {
		StringBuilder txt1 = new StringBuilder();    
		String empresaProperties = dirName + "empresa.properties";
		FileWriter writer = new FileWriter(empresaProperties);
		txt1.append("NOME_EMPRESA = " + empresa);
		txt1.append("\r\n");
		txt1.append("NOME_CONTABILIDADE = " + contabilidade);
		txt1.append("\r\n");
		txt1.append("MANTEM_ARQUIVO = SIM");
		writer.writeNewFile(txt1.toString());

		empresaProperties = dirNameW + "empresa.properties";
		writer = new FileWriter(empresaProperties);
		writer.writeNewFile(txt1.toString());
		
 		logger.logDebug("preparaArquivoEspecifico w3 " + contabilidade + "/" + empresa);

	
		StringBuilder codigoNovo    = new StringBuilder();
		StringBuilder codigoRoteiro = new StringBuilder();
		String tipoRoteiro = "_ContasPagasRoteiro.script";
		String tipoRota = "_ContasPagasEndpointA.script";
		if (tipoIntegracao.toUpperCase().contains("RECE")) {
			tipoRoteiro = "_ContasRecebidasRoteiro.script";
			tipoRota = "_ContasRecebidasEndpointA.script";
		}
		
		try {
			
			
			FileReader reader = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRota);
			try {
				reader.openFile();
				String line = "";
				while(reader.hasNextLine()) {
					// Le a proxima linha do arquivo
					line = reader.nextLine();
					// Processa a linha
					// ....
					
					codigoNovo.append(line);
					if (line.contains("NAO ALTERAR DAQUI ATE O FINAL")) break;				
				}
			} catch (IOException ioe) {
				logger.logError(ioe);
			} finally {
				reader.closeFile();
			}
 
 			File fileRoteiro = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);

			//if (fileRoteiro.exists() &&
			//    !(/*contabilidade.toUpperCase().contains("MICALI") ||*/ contabilidade.toUpperCase().contains("CONCEITOCONTABILIDADE"))) {
 			if (fileRoteiro.exists()) {
				FileReader readerRoteiro = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
				try {
					readerRoteiro.openFile();
					String lineRoteiro = "";
					while(readerRoteiro.hasNextLine()) {
						// Le a proxima linha do arquivo
						lineRoteiro = readerRoteiro.nextLine();
						// Processa a linha
						// ....
						if (lineRoteiro.contains("public boolean read")  || lineRoteiro.contains("public HashMap read")) break;
						
						codigoRoteiro.append(lineRoteiro);
						if (lineRoteiro.contains("FINALPARAMETRIZACAOREGRAS")) break;
 					}
				} catch (IOException ioe) {
					logger.logError(ioe);
				} finally {
					readerRoteiro.closeFile();
				}
			}
			else {
				ConnectorConfig config = new ConnectorConfig();
				
				config.setUsername("fabrica@ottimizza.com.br");
				config.setPassword("ottimizza@123HU4ssqt1HCiLyCzj6QStgteM2");
				//config.setUsername("suporte@ottimizza.com.br");
				//config.setPassword("ottimizza@123qhhKqbBI0kfkInUku3C5q54L");
				
				config.setTraceMessage(false);
				 logger.logInfo("API SALES SHR: preparaArquivoEspecifico WorkflowUnico 2");
				//config.setUsername("adm@ottimizza.com.br");
				//config.setPassword("oic@3333222YXZRHYLH8cxrchPu0rjyGH1j8");
				//config.setTraceMessage(true);
				
				PartnerConnection connection = Connector.newConnection(config);  
				
				// retirado o ottpadrao do preparascript (especifico pois em integracoes antigas
				// estava dando erro de compilacao pois exportavamos o metodo mas ha dentro da rota o mesmo metodo
				codigoRoteiro.append(prepareScript(idRoteiro, "" + empresa, "", contabilidade, tipoIntegracao, connection, logger));
				
				criaReader = true;
				
				logger.logDebug("WF3 - login salesforce 3464" + contabilidade + "--" + empresa);
				
			}
		} catch (Exception xx) {logger.logDebug("XX " + xx);}
		
 
		if (!codigoRoteiro.toString().equals("")) {
			
			if (criaReader) {
				writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
				writer.writeNewFile(codigoRoteiro.toString());		
			}
		
			empresaProperties = "";
			FileReader readerRoteiro = new FileReader("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
			String codigoExtratos = makeCodigoCartoes(readerRoteiro, logger).toString();
 			
			if (tipoIntegracao.toUpperCase().contains("PAGA"))  empresaProperties = "c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + "_ContasPagasEndpointA.script";
			if (tipoIntegracao.toUpperCase().contains("RECE"))  empresaProperties = "c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + "_ContasRecebidasEndpointA.script";
			writer = new FileWriter(empresaProperties);
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString() + codigoExtratos);		
			
			writer = new FileWriter("c:/inout/tmp/"+contabilidade+"_copia_especifico.txt");
			writer.writeNewFile(codigoNovo.toString() + codigoRoteiro.toString());
			
			writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
			writer.writeNewFile(codigoRoteiro.toString() + codigoExtratos);
		}		
 	}
	catch (Exception xx) {}
	return;
}
/*
public StringBuilder makeCodigoCartoes(FileReader readerRoteiro, InoutLogger logger) {

	StringBuilder sb = new StringBuilder();
	
	String linha = "";
	String listaPadroes = "";
	String listaPadroesLidos = "";
	
    try {
        readerRoteiro.openFile();
	while(readerRoteiro.hasNextLine()) {
		// Le a proxima linha do arquivo
		linha = readerRoteiro.nextLine();
		if (linha.contains("Planilhas_Padroes")) {
			logger.logInfo("PEPE " + linha);
			listaPadroes = cutString(linha, ", ", ");").replaceAll("\"", "");
			break;
		}
	}

	if (!listaPadroes.equals("")) {
		String [] padroes = listaPadroes.toString().replaceAll(" ", "").split(";");
		String rn = "\r\n";
		
		for(int kk = 0; kk < padroes.length;  kk++){
			
			if (padroes[kk].contains("ExtratosOFX")) continue;
			if (listaPadroesLidos.contains(padroes[kk])) continue;
			listaPadroesLidos += ";"+padroes[kk];
			
			
			
			File toRead;
				toRead = new File(String.format(
					"c:/inout/scriptlib/io_contabil/oicOnDemand/%s.script",
					padroes[kk].trim()
				));
            /*else {
				try {
					toRead = new File(String.format(
						"c:/inout/scriptlib/io_contabil/oicOnDemand/empty/%s.script",
						padroes[kk].trim()
					));
				} catch (Exception e) {
					continue;
				}
			}
			
			try {
				FileReader reader = new FileReader(toRead);		

				reader.openFile();
				sb.append(rn);
				sb.append(reader.readAll());
				/*while (reader.hasNextLine()) {
					String line = reader.nextLine();
					sb.append(line);
				}
				sb.append(rn);
				
				
			} catch (Exception to) {
				//logger.logError("Erro lendo arquivo padrao -> "+padroes[kk]);
				logger.logError("Erro -> "+to.getMessage());
			}
		}
	}
    } catch (Exception e) {}
	return sb;
}*/


public StringBuilder makeCodigoCartoes(FileReader readerRoteiro, InoutLogger logger) {

	StringBuilder sb = new StringBuilder();
	
	String linha = "";
	String listaPadroes = "";
	String listaPadroesLidos = "";
	
	StringBuilder listaEmpty = new StringBuilder().append( "Boticario_Excel.script;BySoft_i-Broker.script;Cartao_Abrapetite_Excel.script;Cartao_Aiquefome_Excel.script;Cartao_Alelo_Csv.script;Cartao_American_Express_Excel.script;Cartao_American_Express_Extrato_Excel.script;Cartao_Ame_Excel .script;Cartao_BenVisa_Excel.script;Cartao_Bin_Excel.script;Cartao_Bonus_Excel.script;Cartao_Cabal_Excel.script;Cartao_Calcard_Excel.script;Cartao_Carrefour_Excel.script;Cartao_Cielo.script;Cartao_Cielo_Simples_Sem_Bandeira.script;Cartao_Coopercard_Excel.script;Cartao_Credito_Santander.script;Cartao_Elavon_Excel.script;Cartao_Fidelidade_Excel.script;Cartao_GetNet_Excel.script;Cartao_Goodcard_Excel.script;Cartao_GreenCard_Excel.script;Cartao_IFood_Excel.script;Cartao_Liv_PDF.script;Cartao_MagaLU_Excel.script;Cartao_Masterfarma_Excel.script;Cartao_MercadoLivre_Excel.script;Cartao_Moip_Excel.script;Cartao_Mooz_CSV.script;Cartao_Netshoes_Excel.script;Cartao_Nutricard_Excel.script;Cartao_Nutricard_PDF.script;Cartao_PagarME_Excel.script;Cartao_PagSeguro_Excel.script;Cartao_Paguecom_CSV.script;Cartao_Paypal_Excel.script;Cartao_PoliCard_Excel.script;Cartao_Redecard_Excel.script;Cartao_Redecard_TXT.script;Cartao_Safra_CSV.script;Cartao_Sem_Parar_Csv.script;Cartao_Senff_Excel.script;Cartao_Sipag_Excel.script;Cartao_Sodexo_Excel.script;Cartao_Stelo_Excel.script;Cartao_Stone_Excel.script;Cartao_Sumup_Excel.script;Cartao_Ticket_Excel.script;Cartao_TrioCard_Excel.script;Cartao_Ubereats_Excel.script;Cartao_ValeCard_PDF.script;Cartao_VRAlimentacao_TXT.script;Citel_Software_frmRelCtpEncQuitados.script;ERP_DetalhamentosSispagItau_EXCEL.script;ERP_FolhaAlterdata_Progresso.script;ERP_FOLHADOMINIO_LELIS.script;ERP_FOLHAWK_RADAR.script;Extrato_Abc_Excel.script;Extrato_ABC_PDF.script;Extrato_AilosCivia_PDF.script;Extrato_Amazonia_PDF.script;Extrato_Amazonia_TXT.script;Extrato_ApliBB_PDF.script;Extrato_Arbi_Excel.script;Extrato_Asaas_Excel.script;Extrato_Asaas_PDF.script;Extrato_BancoDaycoval_PDF.script;Extrato_BancoNordeste_Excel.script;Extrato_BancoPaulista_PDF.script;Extrato_Banese_PDF.script;Extrato_Banestes_Excel.script;Extrato_Banpara_Excel.script;Extrato_Banpara_TXT.script;Extrato_Banrisul_PDF.script;Extrato_Banrisul_TXT.script;Extrato_BBM_PDF.script;Extrato_BBM_TXT.script;Extrato_BB_Excel.script;Extrato_BB_Financiamento.script;Extrato_BB_PDF.script;Extrato_BB_TXT.script;Extrato_BIB_PDF.script;Extrato_BKBank_PDF.script;Extrato_BMG_Excel.script;Extrato_BMG_PDF.script;Extrato_BMPMONEYPLUS_Excell.script;Extrato_Bradesco2_PDF.script;Extrato_Bradesco_Excel.script;Extrato_Bradesco_PDF.script;Extrato_Bradesco_TXT.script;Extrato_Brasilia_Excel.script;Extrato_BRB_PDF.script;Extrato_BS2_PDF.script;Extrato_BSCASH_PDF.script;Extrato_BTG_Excel.script;Extrato_Btg_PDF.script;Extrato_C6Bank_PDF.script;Extrato_C6_Excel.script;Extrato_Cef_Excel.script;Extrato_Cef_Html.script;Extrato_CEF_PDF.script;Extrato_CEF_TXT.script;Extrato_Civia_PDF.script;Extrato_ContaSimples_Excel.script;Extrato_ContaSimples_PDF.script;Extrato_Cora_Excel.script;Extrato_Cora_PDF.script;Extrato_Credisan_Excel.script;Extrato_Credisan_PDF.script;Extrato_Credisis_PDF.script;Extrato_Crehnor_PDF.script;Extrato_Cresol_Excel.script;Extrato_Cresol_PDF.script;Extrato_Daycoval_Excel.script;Extrato_Efi_Excel.script;Extrato_Efi_PDF.script;Extrato_Ewally_Excel.script;Extrato_Fibra_Excel.script;Extrato_Fibra_PDF.script;Extrato_Folha_Sage_Excel.script;Extrato_Grafeno_Excel.script;Extrato_Grafeno_PDF.script;Extrato_Guanabara_PDF.script;Extrato_HDT_Excel.script;Extrato_HSBC_Excel.script;Extrato_HSBC_PDF.script;Extrato_Industrial_Excel.script;Extrato_Infinitepay_PDF.script;Extrato_Inter_PDF.script;Extrato_ItauConsolidado_PDF.script;Extrato_Itau_Excel.script;Extrato_ITAU_PDF.script;Extrato_Itau_Txt.script;Extrato_Juno_Excel.script;Extrato_Linker_PDF.script;Extrato_MercadoPago_Excel.script;Extrato_MercadoPago_PDF.script;Extrato_Mercantil_PDF.script;Extrato_Movilepay_PDF.script;Extrato_NBC_PDF.script;Extrato_Next_PDF.script;Extrato_Nordeste_PDF.script;Extrato_Nubank_PDF.script;Extrato_OmieCash_PDF.script;Extrato_Original_Excel.script;Extrato_Original_PDF.script;Extrato_OTEROBANK_Excel.script;Extrato_Pagbank_PDF.script;Extrato_PagPixBank_PDF.script;Extrato_PagSeguro_Excel.script;Extrato_Paulista_Excel.script;Extrato_Paybrokers_PDF.script;Extrato_PinkPay_PDF.script;Extrato_Planner_PDF.script;Extrato_Poupecredi_PDF.script;Extrato_Safra_Excel.script;Extrato_Safra_PDF.script;Extrato_Santander_Excel.script;Extrato_Santander_PDF.script;Extrato_Sicoob.script;Extrato_SicoobCapital_PDF.script;Extrato_SicoobConvenios_PDF.script;Extrato_Sicoob_PDF.script;Extrato_Sicoob_Txt.script;Extrato_Sicredi_Excel.script;Extrato_Sicredi_PDF.script;Extrato_Sicredi_TXT.script;Extrato_Sisprime_Excel.script;Extrato_Sisprime_PDF.script;Extrato_Sofisa_Excel.script;Extrato_Sofisa_PDF.script;Extrato_Squid_Excel.script;Extrato_Squid_PDF.script;Extrato_Stone_Excel.script;Extrato_Stone_PDF.script;Extrato_Sulcredi_PDF.script;Extrato_Target_Excel.script;Extrato_Target_PDF.script;Extrato_Topazio_Excel.script;Extrato_Transfeera_PDF.script;Extrato_Tribanco2_PDF.script;Extrato_Tribanco_Excel.script;Extrato_Tribanco_PDF.script;Extrato_UBP_PDF.script;Extrato_Unicred2_PDF.script;Extrato_Unicred_Excel.script;Extrato_Unicred_PDF.script;Extrato_Unicred_TXT.script;Extrato_Uniprime_Excel.script;Extrato_Uniprime_PDF.script;Extrato_Uniprime_Txt.script;Extrato_Viacredi_Excel.script;Extrato_Viacredi_PDF.script;Extrato_Votorantim2_PDF.script;Extrato_Votorantim_Excel.script;Extrato_Votorantim_PDF.script;Extrato_XPInvestimentos_Excel.script;Extrato_XPInvestimentos_PDF.script;FaturaCartaoCredito_Banrisul_PDF.script;FaturaCartaoCredito_BB_PDF.script;FaturaCartaoCredito_Bradesco_PDF.script;FaturaCartaoCredito_Itau_EXCEL.script;FaturaCartaoCredito_Itau_PDF.script;FaturaCartaoCredito_Sicoob_PDF.script;FrancesinhaBradesco_PDF.script;FrancesinhaCresol_PDF.script;FrancesinhagrupoAilos_PDF.script;FrancesinhaItau_CSV.script;FrancesinhaItau_PDF.script;FrancesinhaSafra_PDF.script;FrancesinhaSantander_PDF.script;FrancesinhaSicoob_PDF.script;FrancesinhaSicredi_Excel.script;FrancesinhaSicredi_PDF.script;FrancesinhaSisprime_Excel.script;FrancesinhaUnicredi_PDF.script;Francesinha_Banrisul_TXT.script;Francesinha_BB_PDF.script;Francesinha_Bradesco2_Excel.script;Francesinha_Bradesco_Excel.script;Francesinha_Cef_PDF.script;Interfoc_Genesys_mcp002.script;INVESTIMENTO_BRADESCO.script;Layout_ERP_Posto_Ravanello.script;Linx_AutoSystem.script;Linx_Softpharma_fcpa200.script;Notas_Corretagem_XP_PDF.script;Prosyst.script;readExtratoUnicredDefault.script;Santander_RET.script;Sicoob_Comprovantes_PDF.script;Sindisoft_Relatorio_Movimentacao_Caixa.script;SISJURI_BCS_FINANCEIRO.script;Sisplan_Sistema_Planejamento.script;Systextil.script");
	String [] listaEmptyArray = listaEmpty.toString().split(";");

       /* readerRoteiro.openFile();
	while(readerRoteiro.hasNextLine()) {
		// Le a proxima linha do arquivo
		linha = readerRoteiro.nextLine();
		if (linha.contains("Planilhas_Padroes")) {
			logger.logInfo("PEPE " + linha);
			listaPadroes = cutString(linha, ", ", ");").replaceAll("\"", "");
			break;
		}
	}*/
	
	try {
		readerRoteiro.openFile();
		while(readerRoteiro.hasNextLine()) {
			// Le a proxima linha do arquivo
			linha = readerRoteiro.nextLine();
			if (linha.contains("Planilhas_Padroes")) {
				// logger.logInfo("PEPE " + linha);
				listaPadroes = cutString(linha, ", ", ");").replaceAll("\"", "");
				break;
			}
		}
	
// logger.logInfo("depoisss " + linha);
		// if (!listaPadroes.equals("")) {
			// String [] padroes = listaPadroes.toString().replaceAll(" ", "").split(";");
			String rn = "\r\n";
			
			// logger.logInfo("anetes "+ listaEmptyArray.length);
			
			for(int kk = 0; kk < listaEmptyArray.length;  kk++){
				
				if (listaEmptyArray[kk].contains("ExtratosOFX")) continue;
				if (listaPadroesLidos.contains(listaEmptyArray[kk])) continue;
				listaPadroesLidos += ";"+listaEmptyArray[kk];
				
				// logger.logInfo("anetesRead");
				
				File toRead = new File(".");			
				if (listaPadroes.contains(cutString(listaEmptyArray[kk], 0, "."))) {
					// logger.logInfo("Lp " + listaEmptyArray[kk]);
					try {
						toRead = new File(String.format(
							"c:/inout/scriptlib/io_contabil/oicOnDemand/%s",
							listaEmptyArray[kk].trim()
						));
					} catch (Exception e) {
						logger.logInfo("Primeiro problema OicOnDemand " + e.getMessage());
						continue;
					}
				}
				else {
					try {
						// logger.logInfo("LpDois " + listaEmptyArray[kk]);
						toRead = new File(String.format(
							"c:/inout/scriptlib/io_contabil/oicOnDemand/empty/%s",
							listaEmptyArray[kk].trim()
						));
					} catch (Exception e) {
						logger.logInfo("Segundo problema OicOnDemand " + e.getMessage());
						continue;
					}
				}
				
				try {
					// logger.logInfo("Chegou no reader");
					FileReader reader = new FileReader(toRead);		

					reader.openFile();
					sb.append(rn);
					sb.append(reader.readAll());
					/*while (reader.hasNextLine()) {
						String line = reader.nextLine();
						sb.append(line);
					}*/
					sb.append(rn);
					
					
				} catch (Exception to) {
					//logger.logError("Erro lendo arquivo padrao -> "+padroes[kk]);
					logger.logError("Erro -> "+to.getMessage());
				}
			}
		// }
    } catch (Exception e) {
		logger.logError("Deu ruim aqui " + e.getMessage());
	}
	logger.logInfo("Retornou");
	return sb;
}



public void criaAvisoErroLayout (String arquivo,InoutLogger logger) {

    try {


        FileUtil.deleteFile(arquivo);
        arquivo = arquivo.replaceAll("\\.status",".err");


        FileWriter writerRazao = new FileWriter(arquivo);

        StringBuilder sb1 = new StringBuilder();       
        
        sb1.append("<div class=\"er-content\">").append("\r\n");
        sb1.append("<div class=\"er-message\">").append("\r\n");


        sb1.append("<p>Esta planilha nao pode ser processada pela Ottimizza. Alguns motivos:</p>").append("\r\n");
        sb1.append("</div>").append("\r\n");
        sb1.append("<ul class=\"ul-tips\">").append("\r\n");
		
		StringBuilder mens = new StringBuilder();
		String dirName = cutString(arquivo, 0, "DePara") + "/DePara/Processado";
		logger.logDebug("LENDO workflow script  = " + dirName);
		
		FilesLoader fileLoader2 = new FilesLoader(dirName, "TIPOPLANILHA.txt", dirName+"/lido", true, logger);
		fileLoader2.loadFiles();
		for (MemoryFile memFile: fileLoader2.getMemFiles()) {
			while (memFile.hasNextLine()) {
				try {
					mens.append(memFile.nextLine()).append("    ");
				} catch (Exception xx) {}
			}
		}
							
		if (!mens.toString().equals("")) {
	        sb1.append("<li class=\"it-tip\">").append("\r\n");
			sb1.append("<span><cont color=\red\">").append(mens.toString()).append("</font></span>").append("\r\n");
			sb1.append("</li>").append("\r\n");
		}
        sb1.append("<li class=\"it-tip\">").append("\r\n");
        sb1.append("<span><cont color=\red\">Em 95% dos casos isto ocorre porque o layout do arquivo postado difere do arquivo esperado pela integracao.</font></span>").append("\r\n");
        sb1.append("</li>").append("\r\n");

        sb1.append("<li class=\"it-tip\">").append("\r\n");
        sb1.append("<span><cont color=\red\">Verifique tambem se a planilha esta protegida ou com links a outras planilhas</font></span>").append("\r\n");
        sb1.append("</li>").append("\r\n");
 


        sb1.append("<li class=\"it-tip\">").append("\r\n");
        sb1.append("<span>Verifique se a planilha enviada possui formulas para valores, datas, etc.</span>").append("\r\n");
        sb1.append("</li>").append("\r\n");
        sb1.append("</ul>").append("\r\n");
        sb1.append("<div class=\"er-obs\">").append("\r\n");
        sb1.append("<h6>Caso nao encontre problema na planilha processada, entre em contato com o <a href=\"https://suporte.ottimizza.com.br/\">Suporte Ottimizza</a> </h6>").append("\r\n");
        sb1.append("</div>").append("\r\n");
        sb1.append("</div>").append("\r\n");
        sb1.append("</body>").append("\r\n");

		// if (!arquivo.equals("")) {
			//adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
			// if(arquivo.toUpperCase().contains("_ID")) {
				// String protocolo_id = cutString(arquivo.toUpperCase(), "_ID", "_");
				 
				//roda requisicao para atualizar o satus do protocolo
				// JSONObject bodyProtocolo = new JSONObject();
				
				// bodyProtocolo.put("status", "3");	
				// bodyProtocolo.put("mensagem", "Erro ao ler planilha. Em 95% dos casos isto ocorre porque o layout do arquivo postado difere do arquivo esperado pela integracao. (Codigo erro 2)");
				
				// LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
				// String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
			// }
		// }


        writerRazao.writeNewFile(sb1.toString());
    }
    catch (Exception xx) {} 

}



/*
public void  atualizaArquivoRoteiro(String contabilidade, String empresa, InoutLogger logger) throws Exception {
	
	
    SysProperties props  = SysProperties.getInstance();
    SysProperties props2 = SysProperties.getInstance(); 
	 // Carrega as propriedades
    props.load("contabil/" + contabilidade + "/contabil.properties");
    
	String cnpjEmpresa = props.get(empresa.toUpperCase() + "_CNPJ_EMPRESA");
	logger.logDebug("Antes Atualizando Roteiro - " + cnpjEmpresa);


	String arquivoRoteiro  = RouteEngine.INOUT_HOME +  "/contabil/ottimizza/atualizaRoteiros/atualizaRoteiros_"+cnpjEmpresa+"_wf3.txt";
	FileWriter writerWorkflow = new FileWriter(arquivoRoteiro);
 	writerWorkflow.writeNewFile(cnpjEmpresa);
	
	//RouteEngine.execRoute("Ottimizza.Oud_AtualizacaoRoteiros");
	RouteEngine.execRoute("Ottimizza.AtualizaRoteiros40");
	
	logger.logDebug("Atualizando arquivo Roteiro 40 - " + cnpjEmpresa);
	
																		
	// aguarda 5 segundo para dar tempo das regras estarem salvas no salesforce.
	// Thread.sleep(5000);

	
 	
}*/

//-------------------------------------------------------------------------------------
// Manda informacoes para o servidor status
// Vitor 16/05/2022
//-------------------------------------------------------------------------------------


public void postStatus(String servidor, String workflow, String contabilidade, String empresa, String tipo, String id, InoutLogger logger) {
    String url = "https://api-status-server.herokuapp.com/status";
	
	if (servidor == null || servidor.equals("")) return; 
    
	JSONObject body = new JSONObject();

    try {



        body.put("servidor", servidor);
        body.put("workflow", workflow);
        body.put("contabilidade", contabilidade);
        body.put("empresa", empresa);
        body.put("tipo", tipo);
        body.put("id", servidor + id);

        java.net.URL serviceURL = new java.net.URL(url);

        // Opens java.net.URL as a POST Request
        java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
        connection.setDoOutput(true); // indicates a post
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Accept", "application/json");
        connection.setRequestProperty("Content-Type", "application/json");

        try {
            java.io.OutputStream os = connection.getOutputStream();
            os.write(body.toString().getBytes());
            os.flush();
            os.close();
        } catch (Exception ex1) {
            logger.logError("Erro tentando enviar informacoes para o status server -> " + ex1);
        } 

        try {
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
            String line;
            StringBuilder responseRaw = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                responseRaw.append(line);
            }
            reader.close();
			
			//logger.logDebug("RESPONSE " + responseRaw.toString());
			//logger.logDebug("BODY     " + body.toString());
			
        } catch (Exception ex2) {
            logger.logError("Segundo Catch " + ex2);
        } 

    } catch (Exception ex2) {
        logger.logError("Segundo Catch " + ex2);
    }
	
	logger.logInfo("Atualizando status servidor 40 - " + body.toString());


}


// xavier




public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
		 String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
		 if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
		 if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
		// roda requisicao para atualizar o satus do protocolo
		JSONObject bodyProtocolo = new JSONObject();
		bodyProtocolo.put("status", statusProtocolo);	
		bodyProtocolo.put("mensagem", mensagem);
		String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
		
		//logger.logDebug("Status WF3 " + protocolo_id + " <<>> " + bodyProtocolo.toString());
		
	return atualizaStatus;
	} catch (Exception xx) {
		logger.logDebug(" Erro ao Atualizar Status " + xx);
		return "";
	}
 
}


public String genericPostId(String uri, JSONObject bodyObj, String token, InoutLogger logger) throws Exception {

    try {
        StringBuilder responseRaw = new StringBuilder();
        java.net.URL serviceURL = new java.net.URL(uri);

        // Opensjava.net.URL as a POST Request
        java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
        connection.setDoOutput(true); // indicates a post
        connection.setRequestMethod("POST");

        // Default Headers.
        connection.setRequestProperty("Accept", "application/json");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setRequestProperty("Authorization", "Bearer " + token); // header for authorization

        // Writes the Request Body...
        try {
            java.io.OutputStream os = connection.getOutputStream();
            os.write(bodyObj.toString().getBytes());
            os.flush();
            os.close();
        } catch (Exception ex1) {
            logger.logError("Primeiro Catch " + ex1);
        } 

        // Writes the Response Body...
        try {
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
            String line;
            while ((line = reader.readLine()) != null) {
                responseRaw.append(line);
            }
            reader.close();
        } catch (Exception ex2) {
            logger.logError("Segundo Catch " + ex2);
        } 

        // checks if it is a valid json
        if (responseRaw.toString().startsWith("{") && responseRaw.toString().endsWith("}")) {
            JSONObject response = new JSONObject(responseRaw.toString());

            // Todo
            return response.toString();
        } 
        else {
            throw new Exception (responseRaw.toString());
        }

    } catch (Exception ex0) { 
        throw ex0;
    }
}


public void atualizaProtocolo(String tipoLancamento, String liberaOic, String tipoErro, String diretoriArquivos, String protocolo_id, LancamentosApi apiWeb, InoutLogger logger) throws Exception {
	
	JSONObject bodyProtocolo = new JSONObject().put("status", "3");
	
	if (tipoErro.equals("NAOLEULICENCA")) {
        bodyProtocolo.put("mensagem", "Ooops. O tipo do produto est"+(char)225+" com erro no cadastro.Entre em contato com a equipe de atendimento para maiores orienta"+(char)231+(char)245+"es");
    }
    else if (tipoErro.equals("OICEMPRESANAO")) {
        bodyProtocolo.put("mensagem", "Ooops. O Oic empresa est"+(char)225+" desabilitado no cadastro.Entre em contato com a equipe de atendimento para maiores orienta"+(char)231+(char)245+"es");
    }
	else if (tipoErro.contains("NAOLEUOMC")) {
		bodyProtocolo.put("mensagem", "Ooops. N"+(char)227+"o conseguimos ler nenhum movimento desse per"+(char)237+"odo. Entre em contato com a equipe de atendimento para maiores orienta"+(char)231+(char)245+"es.");
	}
	else if (tipoErro.contains("NAOLEULINHAS")) {
		bodyProtocolo.put("mensagem", "Ooops. Arquivo com grande volume. Entre em contato com a equipe de atendimento para maiores orienta"+(char)231+(char)245+"es.");
	}
	else if (tipoErro.contains("NAOLEUIGNORAR")) {
		bodyProtocolo.put("mensagem", "Ooops. N"+(char)227+"o conseguimos ler nenhum movimento de pagamento/recebimento nesse arquivo. Verifique as regras criadas de IGNORAR.");
	}
	else if (tipoErro.contains("NAOLEUFILTRO")) {
		bodyProtocolo.put("mensagem", "Ooops. N"+(char)227+"o conseguimos ler nenhum movimento pois n"+(char)227+"o h"+(char)225+" lan"+(char)231+"amento no per"+(char)237+"odo informado. Verifique a data das movimenta"+(char)231+(char)245+"es dentro do arquivo.");
	}
	else if (tipoErro.contains("NAOGEROUARQUIVO")) {
		bodyProtocolo.put("mensagem", "Ooops. Tivemos um problema ao gerar o arquivo final. Entre em contato com a equipe de atendimento para maiores orienta"+(char)231+(char)245+"es.");
	}
	else if (tipoErro.contains("NAOLEUMOVIMENTO")) {
		bodyProtocolo.put("mensagem", "Ooops. O layout do arquivo enviado n"+(char)227+"o est"+(char)225+" de acordo. Por gentileza, verifique o mesmo. Caso seja um relat"+(char)243+"rio de extrato ou cart"+(char)227+"o, verifique os modelos dispon"+(char)237+"veis em nosso portal e certifique-se de ter selecionado a leitura do mesmo.");
	}
	else if (liberaOic.equals("NAO")) {
		bodyProtocolo.put("mensagem", "Ooops. Devido a alguma quest"+(char)227+"o administrativa, seu cadastro n"+(char)227+"o est"+(char)225+" ativo no sistema. Contate o setor financeiro ( e-mail financeiro01@ottimizza.com.br ou 47 9636-4529)");
	}
	else {
		bodyProtocolo.put("mensagem", "Ooops. N"+(char)227+"o conseguimos ler nenhum movimento nesse arquivo. Entre em contato com a equipe de atendimento para maiores orienta"+(char)231+(char)245+"es.");
	}
	
	
	logger.logInfo("Mensagem " + bodyProtocolo.toString());
	if(!diretoriArquivos.equals("")){
		putStatus(diretoriArquivos, tipoLancamento, new JSONObject(), logger);
	}
	String atualizaStatus = "";
	try {
		atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
	} catch (Exception e) {
		logger.logError("Erro ao atualizar status " + e.getMessage());
	}
	logger.logInfo("Attstts " + atualizaStatus);
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb) throws Exception {
	//Conversor
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;	
		
		for (File fl: files) {
			if (fl.getAbsolutePath().contains(protocolo_id)) {
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
					String diretorioArquivoCsv = "C:/inout/contabil/";
					String testeCsv = "";									
					String contabilidadeCsv = "";
					String empresaCsv = "";
					
					if (fl.getAbsolutePath().contains("pagar_")) {
						try {											
							testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
							contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
							empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
							empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
							diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
						} catch (Exception e) {
							logger.logDebug("ERRO AO CORTAR ARQUIVO " + e.getMessage());
						}
					}
					else if (fl.getAbsolutePath().contains("receber_")) {
						try {											
							testeCsv = cutString(fl.getAbsolutePath(), "receber_");
							contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
							empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
							empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
							diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
						} catch (Exception e) {
							logger.logDebug("ERRO AO CORTAR ARQUIVO " + e.getMessage());
						}
					}
					String arquivoDeployStr = "";
					try {							

					// mantivemos o ancora no empresa do arquivo para saber que foi convertido e usado nos extratos
						arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
					} catch (Exception e) {
						logger.logDebug("NAOCRIOURODACONVERSOR " + e.getMessage());
					}
					if (!arquivoDeployStr.equals("")) {
						File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
						FileUtil.copyFolder(fl, arquivoDeploy);
						
						try { 
							FileUtil.deleteFile(fl);
						} catch (Exception XX) {}
					}
					if (!notificouProtocolo) {
						notificouProtocolo = true;
						// String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
					}
					continue;
				}
			}
		}
		if (notificouProtocolo) return true;
	}
	return false;
}


public void buscaConversorXlsx(String protocoloPrincipal, LancamentosApi apiWeb, InoutLogger logger) throws Exception {
	// logger.logInfo("ENTROU BUSCA CONVERSOR");
	String diretorioConversorExcel = "C:/Conversor/Excel";
	File file2 = new File(diretorioConversorExcel);
	File[] files = file2.listFiles();
	
	if (FileUtil.dirHasFiles(diretorioConversorExcel)) {
		for (File fl: files) {
			// logger.logInfo(" FL -> " + fl.getAbsolutePath());
			if (fl.getAbsolutePath().contains("aba[") && (fl.getAbsolutePath().toUpperCase().contains("PAGAR") || fl.getAbsolutePath().toUpperCase().contains("RECEBER")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().contains("_ancora_") && fl.getAbsolutePath().contains(protocoloPrincipal) && fl.length() > 0){
				String diretorioArquivoCsv = "C:/inout/contabil/";
				String testeCsv = "";
				String abaCsv = "";
				String contabilidadeCsv = "";
				String empresaCsv = "";
				
				// if (fl.getAbsolutePath().toUpperCase().contains("MICALI")) continue;
				
				// long time1 = fl.lastModified();
				// double timeDouble = (double) time1;
				
				// double times = (System.currentTimeMillis() - timeDouble) / 1000;
				
				// int longTime1 = time1.intValue();
				// logger.logInfo("ULTIMA MODIFICACAO " + fl.getAbsolutePath() + " | " + time1 + " | " + System.currentTimeMillis());
				// \("ULTIMA MODIFICACAOTEMPOS " + times);

				// if (times > 10) {
				
					if (fl.getAbsolutePath().contains("_pagar_")) {
						try {
							abaCsv = cutString(fl.getAbsolutePath(),"aba[","_pagar_");
							testeCsv = cutString(fl.getAbsolutePath(), "_pagar_");
							contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
							empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
							empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
							diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
						} catch (Exception e) {
							logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
						}
					}
					else if (fl.getAbsolutePath().contains("_receber_")) {
						try {
							abaCsv = cutString(fl.getAbsolutePath(),"aba[","_receber_");
							testeCsv = cutString(fl.getAbsolutePath(), "_receber_");
							contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
							empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
							
							// logger.logInfo("ECS " + empresaCsv);
							empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
							// logger.logInfo("ECS3" + empresaCsv);
							diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
						} catch (Exception e) {
							logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
						}
					}
					String arquivoDeployStr = "";
					try {
						arquivoDeployStr = "aba_"+abaCsv.replace("[","").replace("]","")+"_"+fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
						//arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_")+8);
					} catch (Exception e) {
						logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
					}
					// logger.logInfo("arquivoDeployStr -> " + arquivoDeployStr);	
					if (!arquivoDeployStr.equals("")) {
						File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
						// DHF C:\Conversor\Excel\aba[0]_PAGAR_Micalicontabil_Velasquesamaraldall_ott_oud__id4418_pago0218_modelo 05-2022.csv RODACONVERSOR
						FileUtil.copyFolder(fl, arquivoDeploy);
					
						try { 
							FileUtil.deleteFile(fl);
						} catch (Exception XX) {}
					}
				// }
			
				continue;
			}
		}
	}
}

public boolean converteuXlsx(String protocolo_id, LancamentosApi apiWeb, InoutLogger logger) throws Exception {
	//Conversor
	
	String diretorio = "C:/Conversor/Excel";
	File file2 = new File(diretorio);
	boolean achouCSV = false;
	
	File [] files = file2.listFiles();
	// logger.logDebug("ACHANDO");
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;	
		
		for (File fl: files) {
			if (fl.getAbsolutePath().contains(protocolo_id)) {
				// logger.logInfo("ACHOUID " + fl.getAbsolutePath());
				// if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logInfo("ACHOUCSV " + fl.getAbsolutePath());
					// return true;
				// }
				//2310-020397 adicionado o if abaixo para nao travar quando houver .pdferr
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".XLSXERR") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logDebug("ACHOUCSV " + fl.getAbsolutePath());
					try {
						FileUtil.deleteFile(fl);
					} catch (Exception XX) {
						logger.logDebug("PROBLEMA APAGANDO PASTA CONVERSOR " + XX.getMessage());
					}
					return true;
				}
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".XLSX") && !fl.getAbsolutePath().toUpperCase().contains(".CSV")/* && fl.getAbsolutePath().contains("aba[")*/ /*&& fl.length() > 0*/) {
					// logger.logDebug("ACHOUCSV " + fl.getAbsolutePath());
					
					return false;
				}
			}
		}
	}
	return true;
}



public boolean converteuPDF(String protocolo_id, LancamentosApi apiWeb, InoutLogger logger) throws Exception {
	//Conversor
	// String diretorio = "C:/Conversor/Pdf";
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	boolean achouCSV = false;
	
	File [] files = file2.listFiles();
	// logger.logDebug("ACHANDO");
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;	
		
		for (File fl: files) {
			if (fl.getAbsolutePath().contains(protocolo_id)) {
				// logger.logInfo("ACHOUID " + fl.getAbsolutePath());
				// if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logInfo("ACHOUCSV " + fl.getAbsolutePath());
					// return true;
				// }
				//2310-020397 adicionado o if abaixo para nao travar quando houver .pdferr
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".PDFERR") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logDebug("ACHOUCSV " + fl.getAbsolutePath());
					try {
						FileUtil.deleteFile(fl);
					} catch (Exception XX) {
						logger.logDebug("PROBLEMA APAGANDO PASTA CONVERSOR " + XX.getMessage());
					}
					return true;
				}
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".PDF") && !fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") /*&& fl.length() > 0*/) {
					// logger.logDebug("ACHOUCSV " + fl.getAbsolutePath());
					
					return false;
				}
			}
		}
	}
	return true;
}

public String apagaArquivoConversor(String diretoriArquivos, String protocolo_id, String nomeArquivo, InoutLogger logger) throws Exception {
	
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	
	logger.logDebug("AAC " + protocolo_id + " | " + nomeArquivo);
	
	if (FileUtil.dirHasFiles(diretorio)) {
		for (File fl: files) {
			// logger.logDebug("AAPP " + fl.getAbsolutePath().toUpperCase());
			if (fl.getAbsolutePath().contains("_id"+protocolo_id)/* && fl.getAbsolutePath().toUpperCase().contains(nomeArquivo)*/) {
				if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && /*fl.getAbsolutePath().toUpperCase().contains(".CSV") &&*/ fl.getAbsolutePath().contains("_ancora_")){
					logger.logDebug("APAGOU " + fl.getAbsolutePath());
					try {
						FileUtil.deleteFile(fl);
					} catch (Exception XX) {
						logger.logDebug("PROBLEMA APAGANDO PASTA CONVERSOR " + XX.getMessage());
					}
					putStatus(diretoriArquivos, "", new JSONObject(), logger);
					// return "APAGOU";
				}
			}
		}
	}

	return "";
	
}

public synchronized JSONObject buscaDiretorioArquivoProcessado(DataBase db, InoutLogger logger) {
	JSONObject jdiretorioArquivo = new JSONObject();
		
	try {
		jdiretorioArquivo = db.sql("SELECT DIRETORIO, ID, NOMEARQUIVO FROM IO_FILA ORDER BY ID ASC")
								.setFields("DIRETORIO, ID, NOMEARQUIVO")
								.debug(logger)
								.queryUnique();
	} catch (Exception e) {
		logger.logInfo("ERRO SELECT NA FILA " + e.getMessage());
	}
	
	if (!jdiretorioArquivo.has("DIRETORIO")) {
		logger.logInfo("buscaDiretorioArquivoProcessado ");
		return new JSONObject();
	}
	
	int numLinhasDeletadas = 0;
    String sql = "DELETE FROM IO_FILA WHERE ID = ?";
    try {
        Connection conn = java.sql.DriverManager.getConnection("jdbc:h2:tcp://localhost:10092//c:/inout/contabil/Ottimizza/database/IO_CONTABIL", "inout", "inout");
    	
        PreparedStatement stmt = conn.prepareStatement(sql);
        
        stmt.setString(1, jdiretorioArquivo.optString("ID"));
        
        numLinhasDeletadas = stmt.executeUpdate();
        
        logger.logInfo(numLinhasDeletadas + " registro(s) deletado(s).");
		
		if (conn != null) {
			conn.close();
		}
    } catch (SQLException e) {
          logger.logInfo("Erro ao deletar da fila: " + e.getMessage());
    }
	
	logger.logInfo("Leu Id " + jdiretorioArquivo.optString("ID"));
	
	
	if (numLinhasDeletadas == 0) {
		logger.logInfo("Deletou nada");
		return new JSONObject();
	}

	return jdiretorioArquivo;
}
/*
public synchronized JSONObject buscaDiretorioArquivoProcessado(DBPostgreSQL db, InoutLogger logger) {
	JSONObject jdiretorioArquivo = new JSONObject();
		
	try {
		jdiretorioArquivo = db.sql("SELECT DIRETORIO, ID, NOMEARQUIVO FROM IO_FILA ORDER BY ID ASC")
								.setFields("DIRETORIO, ID, NOMEARQUIVO")
								.debug(logger)
								.queryUnique();
	} catch (Exception e) {
		logger.logInfo("ERRO SELECT NA FILA " + e.getMessage());
	}
	
	if (!jdiretorioArquivo.has("DIRETORIO")) {
		logger.logInfo("buscaDiretorioArquivoProcessado ");
		return new JSONObject();
	}
	
	int numLinhasDeletadas = 0;
    String sql = "DELETE FROM IO_FILA WHERE ID = " + jdiretorioArquivo.optString("ID");
    try {
        Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://ec2-100-27-73-125.compute-1.amazonaws.com:5432/da46s1mi5dpi25", "uam6495i69kkqt", "p69a20d01650b808caee3340b498ce5f144f017befa24de25c65bcd0292fda4e9");
    	
        PreparedStatement stmt = conn.prepareStatement(sql);
        
        // stmt.setString(1, jdiretorioArquivo.optString("ID"));
        
        numLinhasDeletadas = stmt.executeUpdate();
        
        logger.logInfo(numLinhasDeletadas + " registro(s) deletado(s).");
		
		if (conn != null) {
			conn.close();
		}
    } catch (SQLException e) {
          logger.logInfo("Erro ao deletar da fila: " + e.getMessage());
    }
	
	logger.logInfo("Leu Id " + jdiretorioArquivo.optString("ID"));
	
	
	if (numLinhasDeletadas == 0) {
		logger.logInfo("Deletou nada");
		return new JSONObject();
	}

	return jdiretorioArquivo;
}*/

public void insereLog(DataBase db, String diretorio, String workflow, String nomeArquivo, InoutLogger logger) {
	
	try {
		db.insert("IO_LOG")
		  .fields("DIRETORIO,WORKFLOW,NOMEARQUIVO,DATA_CRIACAO")
		  .param(diretorio)
		  .param(workflow)
		  .param(nomeArquivo)
		  .param(new Date())
		  .debug(logger)
		  .execute();
			
	} catch (Exception e) {
		logger.logError("Nao conseguiu inserir log " + e.getMessage());
	}
	
}

public void atualizaLog(String protocoloId, String field, DataBase db, InoutLogger logger) {
	
	try {
		db.update("IO_LOG")
		  .fields(field)
		  .where("NOMEARQUIVO LIKE ?")
		  .param(new Date())
		  .param("%"+protocoloId+"%")
		  .debug(logger)
		  .execute();
	} catch (Exception e) {
		logger.logError("Erro ao atualizar log " + e.getMessage());
	}
	
}
/*
public void atulizaLogReprocessamento(Strring protocoloId, String status, DataBase db, InoutLogger logger) {
	try {
		db.update("IO_LOG")
		  .fields("REPROCESSAMENTO")
		  .where("NOMEARQUIVO LIKE ?")
		  .param(status)
		  .param("%"+getProtocoloId(fl.getName())+"%")
		  .debug(logger)
		  .execute();
	} catch (Exception e) {
		logger.logError("Erro ao atualizar log reprocessamento " + e.getMessage());
	}
}*/



public void atualizaPendencias(String versaoPlataforma, String diretorioDePara, String contabilidade, File nomeArquivoDepara/* = fileDePara.getName() */, String empresa, InoutLogger logger) {
    //DE PARA
    logger.logInfo("deparing " + nomeArquivoDepara.getName());
    try {
        if(nomeArquivoDepara.getName().startsWith("OK_DePara") && nomeArquivoDepara.getName().toLowerCase().endsWith(".csv")){
                                                

            String rotaDePara = contabilidade+"DePara" + ".AtualizaPendenciasIOMovimento";
            if (versaoPlataforma.equals("02_Conecta_Via_Portal_Ottimizza")) {
                rotaDePara = "Ottimizza.AtualizaPendenciasIOMovimento";
                    
                File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/AtualizaPendenciaIOMovimento/Atualiza_%s.txt", RouteEngine.INOUT_HOME, empresa));

                // Criar diretorio ottimizza/AtualizaPendenciaIOMovimento se n?o existe.
                if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

                if (!txtImportaPlanoContas.exists()) {
                    try {
                        String txtIPCContent = "";

                        txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                        txtIPCContent += String.format("NOME_EMPRESA : %s%n", empresa.substring(0, empresa.indexOf("_#")));
                        txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", empresa.substring(empresa.indexOf("#") + 1));

                        // Escrever texto no arquivo
                        FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
                        writerDePara.writeNewFile(txtIPCContent);
                    } catch(Exception createFileException) {
                        logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
                    }
                } else {
                    logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
                }
            }

            RouteEngine.execRoute(rotaDePara);
            
            // caso encontre algum arquivo com o mesmo nome de antes de rodar a rota
            // move arquivo para pata processado para nao ficar em loop
            File fileDepoisLista = new File(diretorioDePara);
            File [] filesDepois = fileDepoisLista.listFiles();
            for (File fileDePoisComparar: filesDepois) {
                if (fileDePoisComparar.getAbsolutePath().equals(nomeArquivoDepara.getAbsolutePath()) && nomeArquivoDepara.exists()) {
                    String moveFilename = nomeArquivoDepara.getAbsolutePath();
                    moveFilename = moveFilename.replaceAll("\\\\", "/");
                    FileUtil.moveToDir(moveFilename, diretorioDePara + "/Processado");
                }
            }

        }
    } catch (Exception e) {
        logger.logError("Erro ao atualizar pendencias " + e.getMessage());
    } 
}


public void  atualizaArquivoRoteiro(String contabilidade, String empresa, InoutLogger logger) throws Exception {
	
	//logger.logDebug("Chegou 01 atualizaArquivoRoteiro");
	
	
	SysProperties props  = SysProperties.getInstance();
	 // Carrega as propriedades
    props.load("contabil/" + contabilidade + "/contabil.properties");
    
	String cnpjEmpresa = props.get(empresa.toUpperCase() + "_CNPJ_EMPRESA");
	
	
    DatabasePostgreSQL postgre	= new DatabasePostgreSQL();
    DBPostgreSQL db				= null;
    DBPostgreSQL dbIntegrador	= null;
    CloudAPI cloudAPI			= new CloudAPI();

    JSONArray cnpjs				= new JSONArray();
    JSONArray roteiros		= new JSONArray();


    String tipoMov				= "";
    String rn					= "\r\n";
    String aspas				= "\"";

    SysProperties propsCont		   = SysProperties.getInstance();

    String urnExportados = "https://api-regrasoud-listener.herokuapp.com/api/v1/atualiza_roteiros/exportados";

    ConnectorConfig config = new ConnectorConfig();
    PartnerConnection connection = null;


    /* tabela: atualiza_roteiros
	campos
		BigInt - id
		Boolean - exportado
		JSON - info_roteiros -> {"idRoteiro": "a0A6R00000vgk78", "cnpjEmpresa": "92435747000190", "tipoLancamento": "1"}

	POST url: https://api-regrasoud-listener.herokuapp.com/api/v1/atualiza_roteiros/exportados
	BODY(ids da tabela atualiza_roteiros sequence) 
		[
			1,
			2
		]
    */

    try {
        // routes.properties atualizado pelo atualiza_otwpadrao
        propsCont.load("/contabil/Ottimizza/routes.properties");

        db				= DatabasePostgreSQL.connectDatabase("api-listener-exporta-roteiros", logger);

        boolean conectado		= false;
        StringBuilder listaIds	= new StringBuilder();
        listaIds.append("[");

        StringBuilder lancPg		= new StringBuilder();
        StringBuilder lancRc		= new StringBuilder();
        StringBuilder jaLidos       = new StringBuilder();

        String listaIdsStr			= "";
        String codErp				= "";
        String nomeBanco			= "";
        String cnpj = "";
        String idsRoteiros = "";
		
        int contadorArquivos = 0;

        // for (MemoryFile memFile: fileLoader2.getMemFiles()) {
            // while (memFile.hasNextLine()) {

                logger.logInfo("CNPJ EMP == "+cnpjEmpresa);
				try {
                    roteiros = postgre.buscaRoteiros(db, cnpjEmpresa, logger);
                } 
                catch(Exception ex) {
                    logger.logDebug("ERRRO buscaRoteiros -> "+ex.getMessage());
                } 

				logger.logInfo("ROTEIROS LENGTH <> "+roteiros.length());
                if (roteiros.length() > 0) {

                  
                    for (int tt=0; tt<roteiros.length(); tt++) {
						logger.logInfo("lendo " + roteiros.length() + " | " + tt);

                        String roteiroString = roteiros.optJSONObject(tt).toString().replaceAll("\\\\","");
						
						logger.logInfo("Roteiro lido " + roteiroString);

                        roteiroString = roteiroString.replace("\"{","{");                 
                        roteiroString = roteiroString.replace("}\"","}"); 
                        JSONObject roteiroObj = new JSONObject(roteiroString);

                        listaIds.append(roteiroObj.optString("id")).append(",");
						
						if(!listaIds.toString().equals("[")) {
							idsRoteiros = listaIds.toString().substring(0, listaIds.toString().length() - 1)+"]";			
							try {
								cloudAPI.doPost(urnExportados, idsRoteiros);
							}
							catch (Exception xx) {
								logger.logError("ERROR -> "+xx.getMessage());
							}
							listaIds	= new StringBuilder();
							listaIds.append("[");							
						}
						
							logger.logInfo("passou pelo Post worker linha 3170 ");


                        try {
                            JSONObject roteiroInfosObj = new JSONObject(roteiroObj.optString("info_roteiros").replaceAll("\\\\",""));

                            String idRoteiro       =  roteiroInfosObj.optString("idRoteiro");
                            String tipoLancamento  =  roteiroInfosObj.optString("tipoLancamento");


                            idRoteiro = cutString(idRoteiro, 0,15);
							if (idRoteiro.equals("")) {
								continue;
							}


                            if (!roteiroInfosObj.has("cnpjContabilidade")) {
								continue;
							}

                            String cnpjContabilidade  =  roteiroInfosObj.optString("cnpjContabilidade");

                            String codEmpresa		 = "";
							
                            if (jaLidos.toString().contains(idRoteiro)) {
								continue;
                            }
							
							jaLidos.append(idRoteiro).append(";");

                            if (cnpjContabilidade == null || cnpjContabilidade.equals("")) {
								continue;
							}


                            String diretorio = "";

                            String idRoteiroProperties = "";
							
							String licencaProduto = "";

							logger.logInfo("antes do props " + contabilidade + " -- " + cnpjEmpresa);


							try {
								// contabilidade	= toDisplayCase(propsCont.get(cnpjContabilidade));
								props.load("/contabil/" + contabilidade + "/contabil.properties");
								empresa	= props.get(cnpjEmpresa);             
								codEmpresa = props.get(empresa.toUpperCase() + "_COD_EMPRESA");
								idRoteiroProperties = props.get(empresa.toUpperCase() + "_ID_ROTEIRO_PAGAR");
								idRoteiroProperties = idRoteiroProperties + ";" +  props.get(empresa.toUpperCase() + "_ID_ROTEIRO_RECEBER");
								licencaProduto      = props.get(empresa.toUpperCase() + "_TIPO_PRODUTO"); 
								 
							} catch (Exception xx) {
								logger.logInfo("erro props " + xx.getMessage() + " | " + contabilidade + "--" + codEmpresa + "--" + empresa);
								continue;
							}
							logger.logInfo("IRR " + idRoteiroProperties + " | " + idRoteiro);
							
							
							if (!idRoteiroProperties.contains(idRoteiro)){
							
								JSONObject roteiroLog = new JSONObject(roteiroString);
								roteiroLog.put("Erro","ErroID");  
								roteiroLog.put("Contabilidade",contabilidade);
								roteiroLog.put("Empresa",empresa);
								roteiroLog.put("ID Properties",idRoteiroProperties);
								roteiroLog.put("IdRoteiro", idRoteiro);
								
								continue;
							}

								
							if (connection == null) {
								
								config.setUsername("fabrica@ottimizza.com.br");
								config.setPassword("ottimizza@123HU4ssqt1HCiLyCzj6QStgteM2");
								//config.setUsername("suporte@ottimizza.com.br");
								//config.setPassword("ottimizza@123qhhKqbBI0kfkInUku3C5q54L");
								
								config.setTraceMessage(false);
								connection = Connector.newConnection(config);  
								logger.logInfo("API SALES SHR: atualizaArquivoRoteiro WorkflowUnico 3");
							}	
                             

							logger.logInfo("Antes de preparar o arquivo 40 " + tipoLancamento + " | " + idRoteiro);
                            if (tipoLancamento.equals("1"))  preparaArquivo40(idRoteiro, "Contas PAGAS", contabilidade, empresa, "", "", connection, logger);
                            if (tipoLancamento.equals("2"))  preparaArquivo40(idRoteiro, "Contas RECEBIDAS", contabilidade, empresa, "", "", connection, logger);
                            if (tipoLancamento.equals("1"))  preparaArquivoEspecifico40(idRoteiro, "Contas PAGAS", contabilidade, empresa, "", "", connection, logger);
                            if (tipoLancamento.equals("2"))  preparaArquivoEspecifico40(idRoteiro, "Contas RECEBIDAS", contabilidade, empresa, "", "", connection, logger);



                        }
                        catch (Exception xx) {
                            logger.logInfo("ERROR -> "+xx.getMessage());
                        }
                    }

                }
            // }
            if(!listaIds.toString().equals("[")) {
                idsRoteiros = listaIds.toString().substring(0, listaIds.toString().length() - 1)+"]";			
                try {
                    cloudAPI.doPost(urnExportados, idsRoteiros);
                }
                catch (Exception xx) {
                    logger.logInfo("ERROR -> "+xx.getMessage());
                }                    
            }
        // }	


    } catch (Exception e) {
        logger.logDebug("*** por algum motivo cai no catch geral da rota -> "+e.getMessage());
    } finally {
        if (db != null) db.closeConnection();
		
    }
	
	logger.logInfo("Terminou 01 atualizaArquivoRoteiro");
 	
}

public void preparaArquivo40(String idRoteiro, String tipoIntegracao, String contabilidade, String empresa, String dirName, String dirNameW, PartnerConnection connection, InoutLogger logger) {
	try {
        StringBuilder codigoNovo    = new StringBuilder();
        StringBuilder codigoRoteiro = new StringBuilder();


        try {
            String tipoRoteiro = "_ContasPagasRoteiroPadrao.script";
            if (tipoIntegracao.toUpperCase().contains("RECE")) tipoRoteiro = "_ContasRecebidasRoteiroPadrao.script";
            File fileRoteiro = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);

            codigoRoteiro.append(prepareScript(idRoteiro, "OTTPADRAO" + empresa, "", contabilidade, tipoIntegracao, connection, logger));


            if (!codigoRoteiro.toString().equals("")) {
                logger.logDebug("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);

                FileWriter writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
                writer.writeNewFile(codigoRoteiro.toString());			


            }	


        } catch (Exception xx) {logger.logDebug("XX " + xx);}


    }


    catch (Exception xx) {}

    return;
}



public void preparaArquivoEspecifico40(String idRoteiro, String tipoIntegracao, String contabilidade, String empresa, String dirName, String dirNameW, PartnerConnection connection, InoutLogger logger) {
	try {
        StringBuilder codigoNovo    = new StringBuilder();
        StringBuilder codigoRoteiro = new StringBuilder();


        try {
            String tipoRoteiro = "_ContasPagasRoteiro.script";
            if (tipoIntegracao.toUpperCase().contains("RECE")) tipoRoteiro = "_ContasRecebidasRoteiro.script";
            File fileRoteiro = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);

            codigoRoteiro.append(prepareScript(idRoteiro, "OTTPADRAO" + empresa, "", contabilidade, tipoIntegracao, connection, logger));


            if (!codigoRoteiro.toString().equals("")) {
                logger.logDebug("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);

                FileWriter writer = new FileWriter("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + tipoRoteiro);
                writer.writeNewFile(codigoRoteiro.toString());			


            }	


        } catch (Exception xx) {logger.logDebug("XX " + xx);}

	}


    catch (Exception xx) {}

    return;
}

public String trataCampoHistorico(String campo) throws Exception {
    if(campo.contains("descricao")) {
        campo = "Fornecedor/Cliente";
    }
    if(campo.contains("portador")) {
        campo = "Portador";
    }
    if(campo.contains("competencia")) {
        if(campo.contains("Anterior"))
            campo = "Mes-Ano Anterior";
        else
            campo = "Mes-Ano Atual";
    }
    if(campo.contains("documento")) {
        campo = "Documento/NF";
    }
    if (campo.contains("complemento")) {
        campo = campo.replaceFirst("c", "C").replace("o0", "o (0").concat(")");
    }
    if(campo.contains("nenhum")) {
        campo = "";
    }
    return campo;
}

public String trataCampoRegra(String campo, int condicao) {

    if (campo.contains("complemento")) {
        campo = campo.replaceFirst("c", "C").replace("o0", "o (0").concat(")");
    }
    else if (campo.contains("tipoPlanilha")) {
        campo = "Tipo Planilha";
    }
    else if (campo.contains("portador")) {
        campo = "Portador";
    }
    else if (campo.contains("descricao")) {
        campo = "Fornecedor/Cliente";
    }
    else if (campo.contains("documento")) {
        campo = "Documento/NF";
    }
    else if(campo.contains("nomeArquivo")) {
        campo = "Nome do Arquivo";
    }

    //TRATANDO CONDICAO 

    if(condicao == 1) {
        campo = campo.concat(" cont" + (char)233 + "m");
    }
    else if(condicao == 2) {
        campo = campo.concat(" n" + (char)227 + "o " + "cont" + (char)233 + "m");
    }
    else if(condicao == 3) {
        campo = campo.concat(" come" + (char)231 + "a com");
    }
    else if(condicao == 4) {
        campo = campo.concat(" igual a");
    }
    return campo;

}


public JSONArray buscaRegrasPorGrupoRegraId(String grupoRegraId, DBPostgreSQL db, InoutLogger logger) throws SQLException {
    String sql = "select campo as campo, condicao as condicao, valor as valor "
    + "from regras r "
    + "where fk_grupo_regras_id = "+grupoRegraId+" ";			
    try {
        JSONArray records = db.sql(sql)
        .setFields("campo, condicao,  valor")
        .debug(logger)
        .query();

        return records;

    } catch (Exception e) {
        logger.logDebug("ERROR buscaRegrasPorGrupoRegraId: "+e.getMessage());
    }
    return null;
}

public JSONArray buscaGrupoRegras(String cnpjContabilidade, String cnpjEmpresa, String tipoLancamento, DBPostgreSQL db, InoutLogger logger) throws SQLException {
	//String currentDate = "'" + DateUtil.dateToString(new Date(), "yyyy-MM-dd 00:00:00") + "'";
	Calendar cal = Calendar.getInstance();
    try {
		cal = DateUtil.dateToCalendar(new Date());
		cal.add(Calendar.DATE, -30);
    } catch (Exception e) {
        logger.logDebug("ERROR buscaGrupoRegras add date: "+e.getMessage());
    }
	String currentDate = "'" + DateUtil.dateToString(cal.getTime(), "yyyy-MM-dd 00:00:00") + "'";
	
    String sql = "select id as id, conta_movimento as contaMovimento, id_roteiro as idRoteiro, posicao as posicao, conta_desconto as contaDesconto, "
    + "conta_juros as contaJuros, conta_multa as contaMulta, conta_portador as contaPortador, inverte_contas as inverteContas "
    + "from grupo_regras gr "					
    + "where gr.cnpj_empresa = '"+cnpjEmpresa+"' "
    + "and gr.cnpj_contabilidade = '"+cnpjContabilidade+"' "
    + "and gr.tipo_lancamento = "+tipoLancamento+" "
    + "and gr.ativo = true "
	+ "and gr.data_atualizacao >= " + currentDate + "::date "
    + "and (SELECT COUNT(r.id) FROM regras r WHERE r.fk_grupo_regras_id = gr.id) > 0 "
    + "order by gr.posicao asc ";			

    try {
        JSONArray records = db.sql(sql)
        .setFields("id, contaMovimento, idRoteiro, posicao, contaDesconto, contaJuros, contaMulta, contaPortador, inverteContas")
        .debug(logger)
        .query();
        return records;

    } catch (Exception e) {
        logger.logDebug("ERROR buscaGrupoRegras: "+e.getMessage());
    }
    return null;
}

public JSONArray buscaHistoricos(String cnpjContabilidade, String cnpjEmpresa, String tipoLancamento, DBPostgreSQL db, InoutLogger logger) throws SQLException {
	//String currentDate = "'" + DateUtil.dateToString(new Date(), "yyyy-MM-dd 00:00:00") + "'";
	Calendar cal = Calendar.getInstance();
    try {
		cal = DateUtil.dateToCalendar(new Date());
		cal.add(Calendar.DATE, -30);
    } catch (Exception e) {
        logger.logDebug("ERROR buscaHistoricos add date: "+e.getMessage());
    }
	String currentDate = "'" + DateUtil.dateToString(cal.getTime(), "yyyy-MM-dd 00:00:00") + "'";
	
    String sql = "SELECT id as id, conta_movimento as contaMovimento, historico as historico, id_roteiro as idRoteiro, fk_grupo_regras_id as grupoRegraId, historico_padrao as historicoPadrao "
    + "FROM historicos h "
    + "WHERE h.cnpj_contabilidade = '"+cnpjContabilidade+"' "
    + "and h.cnpj_empresa = '"+cnpjEmpresa+"' "
    + "and h.tipo_lancamento = "+tipoLancamento+" "
    + "and h.ativo = true "
	+ "and h.data_atualizacao >= " + currentDate + "::date ";

    try {
        JSONArray records = db.sql(sql)
        .setFields("id, contaMovimento, historico, idRoteiro, grupoRegraId, historicoPadrao")
        .debug(logger)
        .query();

        
		// logger.logDebug("HST RECORDS -> "+records.toString());
		return records;

    } catch (Exception e) {
        logger.logDebug("ERROR buscaHistoricos: "+e.getMessage());
    }
    return null;
}


public JSONObject criaHistoricoSfPorRegra(JSONObject historico, JSONArray regras, InoutLogger logger) throws Exception {
    try{

        String idExternoHistorico = historico.optString("id");
        String historicoCompleto = historico.optString("historico");
        String[] historicoArray = historicoCompleto.split("\\$");
        String codigoHistorico = historicoArray[0].replace("CodigoHistorico:", "").trim();

        int condicao01 = regras.optJSONObject(0).optInt("condicao");
        String campoRegra01 = trataCampoRegra(regras.optJSONObject(0).optString("campo"), condicao01);
        String valor01 = regras.optJSONObject(0).optString("valor");
        String campoRegra02 = " ";
        String valor02 = " ";
        int condicao02 = 1;
        String campoRegra03 = " ";
        String valor03 = " ";
        int condicao03 = 1;
        String campoRegra04 = " ";
        String valor04 = " ";
        int condicao04 = 1;
        String campoRegra05 = " ";
        String valor05 = " ";
        int condicao05 = 1;
        String sequenciaRegras = "110";
        String texto01 = "";
        String campoHistorico01 = "";
        String texto02 = "";
        String campoHistorico02 = "";
        String texto03 = "";
        String campoHistorico03 = "";
        String texto04 = "";
        String campoHistorico04 = "";
        String texto05 = "";
        String campoHistorico05 = "";


        if(regras.length() > 1) {
            condicao02 = regras.optJSONObject(1).optInt("condicao");
            campoRegra02 = trataCampoRegra(regras.optJSONObject(1).optString("campo"), condicao02);
            valor02 = regras.optJSONObject(1).optString("valor");
            sequenciaRegras = "200";
        }
        if(regras.length() > 2) {
            condicao03 = regras.optJSONObject(2).optInt("condicao");
            campoRegra03 = trataCampoRegra(regras.optJSONObject(2).optString("campo"), condicao03);
            valor03 = regras.optJSONObject(2).optString("valor");
            sequenciaRegras = "300";
        }
        if(regras.length() > 3 ) {
            condicao04 = regras.optJSONObject(3).optInt("condicao");
            campoRegra04 = trataCampoRegra(regras.optJSONObject(3).optString("campo"), condicao04);
            valor04 = regras.optJSONObject(3).optString("valor");
            sequenciaRegras = "400";
        }
        if(regras.length() > 4) {
            condicao05 = regras.optJSONObject(4).optInt("condicao");
            campoRegra05 = trataCampoRegra(regras.optJSONObject(4).optString("campo"), condicao05);
            valor05 = regras.optJSONObject(4).optString("valor");
            sequenciaRegras = "500";
        }

        if(historicoArray.length > 1)
            texto01 = historicoArray[1].trim();
        if(historicoArray.length > 2) {
            campoHistorico01 = historicoArray[2].substring(historicoArray[2].indexOf("{")+1,historicoArray[2].indexOf("}"));
            texto02 = historicoArray[2].substring(historicoArray[2].indexOf("}")+1);
        }
        if(historicoArray.length > 3) {
            campoHistorico02 = historicoArray[3].substring(historicoArray[3].indexOf("{")+1,historicoArray[3].indexOf("}"));
            texto03 = historicoArray[3].substring(historicoArray[3].indexOf("}")+1);
        }
        if(historicoArray.length > 4) {
            campoHistorico03 = historicoArray[4].substring(historicoArray[4].indexOf("{")+1,historicoArray[4].indexOf("}"));
            texto04 = historicoArray[4].substring(historicoArray[4].indexOf("}")+1);
        }
        if(historicoArray.length > 5) {
            campoHistorico04 = historicoArray[5].substring(historicoArray[5].indexOf("{")+1,historicoArray[5].indexOf("}"));
            texto05 = historicoArray[5].substring(historicoArray[5].indexOf("}")+1);
        }
        if(historicoArray.length > 6) 
            campoHistorico05 = historicoArray[6].substring(historicoArray[6].indexOf("{")+1,historicoArray[6].indexOf("}"));

        JSONObject historicoSf = new JSONObject();
        historicoSf.put("RecordTypeId","0121500000100GB");
        historicoSf.put("ID_Externo__c", idExternoHistorico.replaceAll("\\.00", ""));
        historicoSf.put("Codigo_Historico__c", codigoHistorico);
        historicoSf.put("Se_Campo__c", campoRegra01);
        historicoSf.put("O_texto_01__c", valor01);
        historicoSf.put("E_02__c", campoRegra02);
        historicoSf.put("O_texto_02__c", valor02);
        historicoSf.put("E_03__c", campoRegra03);
        historicoSf.put("O_texto_03__c", valor03);
        historicoSf.put("E_04__c", campoRegra04);
        historicoSf.put("O_texto_04__c", valor04);
        historicoSf.put("E_05__c", campoRegra05);
        historicoSf.put("O_texto_05__c", valor05);
        historicoSf.put("Texto_01__c", texto01);
        historicoSf.put("Campo_01__c", trataCampoHistorico(campoHistorico01));
        historicoSf.put("Texto_02__c", texto02);
        historicoSf.put("Campo_02__c", trataCampoHistorico(campoHistorico02));
        historicoSf.put("Texto_03__c", texto03);
        historicoSf.put("Campo_03__c", trataCampoHistorico(campoHistorico03));
        historicoSf.put("Texto_04__c", texto04);
        historicoSf.put("Campo_04__c", trataCampoHistorico(campoHistorico04));
        historicoSf.put("Texto_05__c", texto05);
        historicoSf.put("Campo_05__c", trataCampoHistorico(campoHistorico05));
        historicoSf.put("Sequencia_das_Regras__c", sequenciaRegras);
        return historicoSf;
    }
    catch(Exception ex) {
        logger.logDebug("ERROR CRIACAO HISTORICO SALESFORCE POR REGRA -> "+ex.getMessage());
        return null;
    }
}

public JSONObject criaHistoricoSf(JSONObject historico, InoutLogger logger) throws Exception {
    try{
        String idExternoHistorico = historico.optString("id");
        String contaMovimentoHistorico = historico.optString("contaMovimento");
        String historicoCompleto = historico.optString("historico");
		boolean historicoPadrao = false;
		if(historico.has("historicoPadrao") && historico.optString("historicoPadrao").toUpperCase().equals("TRUE")) {
			historicoPadrao = true;
		}

        String codigoHistorico = "";
        String texto01 = "";
        String campoHistorico01 = "";
        String texto02 = "";
        String campoHistorico02 = "";
        String texto03 = "";
        String campoHistorico03 = "";
        String texto04 = "";
        String campoHistorico04 = "";
        String texto05 = "";
        String campoHistorico05 = "";

        String[] historicoArray = historicoCompleto.split("\\$");
        codigoHistorico = historicoArray[0].replace("CodigoHistorico:", "").trim();
        if(historicoArray.length > 1)
            texto01 = historicoArray[1].trim();
        if(historicoArray.length > 2) {
            campoHistorico01 = historicoArray[2].substring(historicoArray[2].indexOf("{")+1,historicoArray[2].indexOf("}"));
            texto02 = historicoArray[2].substring(historicoArray[2].indexOf("}")+1);
        }
        if(historicoArray.length > 3) {
            campoHistorico02 = historicoArray[3].substring(historicoArray[3].indexOf("{")+1,historicoArray[3].indexOf("}"));
            texto03 = historicoArray[3].substring(historicoArray[3].indexOf("}")+1);
        }
        if(historicoArray.length > 4) {
            campoHistorico03 = historicoArray[4].substring(historicoArray[4].indexOf("{")+1,historicoArray[4].indexOf("}"));
            texto04 = historicoArray[4].substring(historicoArray[4].indexOf("}")+1);
        }
        if(historicoArray.length > 5) {
            campoHistorico04 = historicoArray[5].substring(historicoArray[5].indexOf("{")+1,historicoArray[5].indexOf("}"));
            texto05 = historicoArray[5].substring(historicoArray[5].indexOf("}")+1);
        }
        if(historicoArray.length > 6) 
            campoHistorico05 = historicoArray[6].substring(historicoArray[6].indexOf("{")+1,historicoArray[6].indexOf("}"));

        JSONObject historicoSf = new JSONObject();
        historicoSf.put("RecordTypeId","0121500000100GB");
		historicoSf.put("Sequencia_das_Regras__c", "500");
        historicoSf.put("ID_Externo__c", idExternoHistorico.replaceAll("\\.00", ""));
        historicoSf.put("Codigo_Historico__c", codigoHistorico);
        historicoSf.put("Se_Campo__c", "Conta Normal - Movimento - igual a ");
        historicoSf.put("O_texto_01__c", contaMovimentoHistorico);
        historicoSf.put("Texto_01__c", texto01);
        historicoSf.put("Campo_01__c", trataCampoHistorico(campoHistorico01));
        historicoSf.put("Texto_02__c", texto02);
        historicoSf.put("Campo_02__c", trataCampoHistorico(campoHistorico02));
        historicoSf.put("Texto_03__c", texto03);
        historicoSf.put("Campo_03__c", trataCampoHistorico(campoHistorico03));
        historicoSf.put("Texto_04__c", texto04);
        historicoSf.put("Campo_04__c", trataCampoHistorico(campoHistorico04));
        historicoSf.put("Texto_05__c", texto05);
        historicoSf.put("Campo_05__c", trataCampoHistorico(campoHistorico05));
		
		// VALIDANDO SE E UM HISTORICO PADRAO
		if(historicoPadrao == true) {
			if(idExternoHistorico.contains("903117"))
				logger.logDebug("Historico -> "+historico);
			historicoSf.put("Sequencia_das_Regras__c", "100");
			historicoSf.put("Se_Campo__c", "Fornecedor/Cliente n" + (char)227 + "o cont" + (char)233 + "m");
			historicoSf.put("O_texto_01__c", "HISTORICOPADRAO");
		}
		
        return historicoSf;
    }
    catch(Exception ex) {
        logger.logDebug("ERROR CRIACAO HISTORICO SALESFORCE -> "+ex.getMessage());
        return null;
    }
}