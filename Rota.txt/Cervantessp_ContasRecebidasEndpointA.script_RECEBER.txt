{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
{import: io_contabil.Ottimizza_MeuCaixa};

// TEMPLATE 15.2021
public JSONArray run(InoutLogger logger) throws Exception {

	JSONArray  records  = new JSONArray();
	JSONObject ultimoJS = new JSONObject();

	// gera seguranca nas conexoes com Heroku
	// Create a trust manager that does not validate certificate chains
	javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
		new javax.net.ssl.X509TrustManager(){
			public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

			public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

			public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
		}
	};

	// Install the all-trusting trust manager
	try {
		javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
		sc.init(null, trustAllCerts, new java.security.SecureRandom());
		javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	} catch (Exception e) {
		// 
	}
	
	
	// Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	SysProperties propsEmp = SysProperties.getInstance();
	JSONObject roteiroCRMPrincipal = getRoteiro();
	JSONObject roteiroCRM = getRoteiro();
	JSONObject jStatus = new JSONObject();

	JSONObject objetoRoteiro = new JSONObject();
	objetoRoteiro.put("contabilidade", roteiroCRM.optString("contabilidade"));
	props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	//Contectar na Base de Dados depara do heroku(nuvem)
	DBPostgreSQL dbIODepara = null;

 	String empresa = getNomeEmpresa();
	
	
	String codEmpresa = props.get(empresa + "_COD_EMPRESA");
	
	
 
	if (codEmpresa == null) {
		empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
		codEmpresa = props.get(empresa + "_COD_EMPRESA");		
	}
	
 
	String ERPContabil = props.get("ERP_CONTABILIDADE");
	String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
	String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
	String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
	String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM");
	
 	
	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";
	
	String tipoLancamento = getNomeRota();
	if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
	if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


	String compDirName = nomeEmpresa + "_#" + codEmpresa;
	String dirName = "";
	if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
	if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";


	String backupDirName = dirName + "/Processado";

	boolean erroShrink = false;
	boolean geraCabecalhoCordilheira = true;
	boolean cabecalhoNaoEncontrada        = true;
	boolean apagaExtrato        = false;
	boolean geraRegraPortador   = false;
	boolean comparaRazao        = false;
	String tipoEmail            = "";
	String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
	int    contadorArquivo      = 0;

	HashMap mapaVariavel		= new HashMap();
	HashMap mapaLote			= new HashMap();
	HashMap mapaDePara			= new HashMap();
	HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();
	HashMap mapaArquivo 		= new HashMap();
	HashMap mapaDocumento 		= new HashMap();

	JSONObject recordF = new JSONObject();


	String cruzaExtrato			= "";
	String Cruza_Extrato_com_Extrato = "";
	String mesAnoAnterior		= "";
	String mesAno2Anterior		= "";
	String mesAnoAtual			= "";
	int mesRef					= 0;
	int anoRef					= 0;
	String contaJuros			= "";
	String contaDesconto		= "";
	String contaMulta			= "";
	String contaTransitoria		= "";
	String contaEmpresaBranco	= "";
	String movimentoPortador	= "";
	String contaFixaDebito		= "";
	String contaFixaCredito		= "";
	String contaPortador		= "";		//pg - cred | rec - deb
	String contaMovimento		= "";		//pg - deb | rec - cred
	String tabelaContabil       = "";
	String dataMovimento        = "";
	String classificaPlano      = "";
	String classificaFornec     = "";

	boolean geraFiscal			= false;
	String [] loteFiscal		= new String[20];
	boolean apagaStatus         = false;

	String Conta_Fixa_Cruzamento_Extrato = "";
	String contaInvertida	= "";
	String contaBuscaPlano	= "";
	String nomeArquivo      = "";
	String chave			= "";
	String classificacao	= "";
	String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
	String lote						= "";
	boolean enviouEmail 			= false;
	String regraContaMovimento 		= "";
	String regraHistorico 			= "";
	String separadorCsv				= "";
	String separadorTxt				= "";
	String tipoPlanilha				= "";
	String contaTemp				= "";
	String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
	boolean primeiroArquivo 		= true;
	boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	boolean forcarPartidaDobrada	= false;
	
	String zerarColAlternativo		= "";
	JSONObject deParaObj 			= new JSONObject();

	try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
		// liberado em 25/11/2020 @DiMaz
		// se precisar alterar somente as quantidades qX e qY 
		// cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
		// aumentar muito o XLSX pode causar TRAVAMENTOS
		int qX	= 10;	//ofx,csv,txt
		int qY	= 3;	//xlsx,pdf
		int qTotal = (qX*3)+(qY*2);
		String extensao = "";
		for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
			if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC";
			if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".csv,.CSV";
			if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
			if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT";
			if (extArquivo >= (3*qX+qY))							extensao = ".pdf,.PDF"; 
			
			boolean ignoraAbas = false;

			for (int porAba = 0; porAba < 60; porAba++) {

				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
				
				String apagaArquivo		= backupDirName;
				String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
				abasEspecificas 		= abasEspecificas.replace(",",";"); 

				if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
				if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

				// liberado em 25/11/2020 @DiMaz
				// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				String abasFor = "";
				if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
					try {
						int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
						int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
						for (int k = a; k <= b; k++){
							if (k < b) abasFor += k+";";
							else abasFor += k;
						}
					} catch (Exception fr) {}
					if(!abasFor.equals("")) abasEspecificas = abasFor;
				}

				
				if (abasEspecificas.equals("")) {
					if (porAba > 0) break;
				}
				if (!abasEspecificas.equals("")) {
					if (!abasEspecificas.contains(String.valueOf(porAba))) {
						continue;
					}

					String ultimaAba = abasEspecificas;
					if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
					if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
				}

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV e TXt
				
 
 				if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, logger);
  				if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, logger);
				

 
 				
				// #DOCUMENTACAO
				// carregamento do arquivo
				
				if (mantemArquivo.equals("SIM")) apagaArquivo = null;
				// salva arquivo no hasmap para posterior eliminacao 

 
				
				FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
				int[] abas = {porAba};
				fileLoader.setSheetsToRead(abas);
				fileLoader.loadFiles();
				
				try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); } 
				catch (Exception bl) {forcarPartidaDobrada = false;}
				
				for (MemoryFile memFile: fileLoader.getMemFiles()) {
				
					contadorArquivo++;

					
					// =======================  =================   =======================
					// =======================  VARIAVEIS PADROES   =======================
					// =======================  =================   =======================
					String historico      = "";

					String codCcOrigem    = "";
					String cpfCnpj        = "";
					String nomeOrigem     = "";
					String nomePortador   = "";
					String nomePortador2  = "";
					String documento      = "";
					int    parcelaDoc     = 1;
					double valorDocumento = 0.00;
					double valorPagamento = 0.00;
					double valorDesconto  = 0.00;
					double valorJuros     = 0.00;
					double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
					int icodCcOrigem    = -1;
					int icpfCnpj        = -1;
					int inomeOrigem     = -1;
					int inomePortador   = -1;
					int idocumento      = -1;
					int idataMovimento  = -1;
					int ivalorDocumento = -1;
					int ivalorAlternativo = -1;
					int ivalorPagamento = -1;
					int ivalorDesconto  = -1;
					int ivalorJuros     = -1;
					int ivalorMulta     = -1;
					int icomplemento01  = -1;
					int icomplemento02  = -1;
					int icomplemento03	= -1;
					int icomplemento04  = -1;
					int icomplemento05	= -1;
					int icomplemento06	= -1;
					int icomplemento07	= -1;
					int icomplemento08	= -1;
					int icomplemento09	= -1;
					int icomplemento10	= -1;
					int idataFake		= -1;

					String contaGetConta	= "";
					contaPortador	= "";		//pg - cred | rec - deb
					contaMovimento	= "";		//pg - deb | rec - cred 

					String complemento01	= "";
					String complemento02	= "";
					String complemento03	= "";
					String complemento04	= "";
					String complemento05	= "";
					String complemento06	= "";
					String complemento07	= "";
					String complemento08	= "";
					String complemento09	= "";
					String complemento10	= "";
					String codCentroCusto	= "";
					String codFilial        = "";

					double valorTotalDoc	= 0.0;
					double valorTotalJuros	= 0.0;
					double valorTotalDesc	= 0.0;
					
					double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};  

					String classJur			= "";
					String classDes			= "";
					String classMul			= "";

					String codErroString	= "";
					int cont				= 0;
					String linhasProblema	= "";
					String idEmpresa        = "";
					String idRoteiro  	    = "";

					String histAux			= "";
					String anoData			= "";
					boolean zerar			= true;
					boolean filtro			= true;

					String lerAposPrincipal   = "";
					boolean isLinhaPrincipal  = false;
					boolean ignorarAntes	  = false;
					boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";

					double partidaDobradaJuros		= 0;
					double partidaDobradaDesconto	= 0;
					double partidaDobradaMulta		= 0;
					double valorSomaArray			= 0;

					String numSeparadorDuplicata = ""; //convertido em int depois
					
					StringBuilder cabecalhoPlanilha = new StringBuilder();
					StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
					
					int  	      contadorCabecalho = 0; 
					
					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
					if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
					if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
					if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);
					
					if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
						if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
					}
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
					
					 
					nomeArquivo = memFile.getFilename().replace("%",""); 
					
 					
					String abaArquivo = String.valueOf(porAba);
					if (porAba == 0) abaArquivo = "0";

					// colocado para nao importar 2x o mesmo arquivo e mesma aba
					ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
					if (ttArq          == null) {
						ttArq          = new ttArquivo();
						ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;
					
					} else continue;
					mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);
					
					putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);

					
 

					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
					if (dbIOCont == null) {
						dbIOCont = connectIOContabil(props, logger);
					}

					if (dbIODepara == null) {
						dbIODepara = connectDeParaDb(logger);
					}
					
					if(primeiroArquivo) {
						limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
						primeiroArquivo = false;
					}

					//########################################################################

					contaJuros		    = roteiroCRM.optString("contaFixaJuros");
					contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
					contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
					contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
					contaMulta		    = roteiroCRM.optString("contaFixaMulta");
					idEmpresa      	    = roteiroCRM.optString("idEmpresa");
					idRoteiro   	    = roteiroCRM.optString("idRoteiro");
					movimentoPortador   = roteiroCRM.optString("movimentoPortador");
					classificaPlano     = roteiroCRM.optString("classificaPlano");
					classificaFornec    = roteiroCRM.optString("classificaFornec");
					cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
					Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
					numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

					tipoPlanilha = "MOVIMENTO";
					boolean enviaEmailExtrato = false;
					boolean naoLeMais = false;

					tipoEmail = "CLIENTE";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

					String debitoCredito   		 = "";
					String chaveExtrato    		 = ""; 

					//if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano"); 

					// =======================  ========================   =======================
					// =======================  VARIAVEIS PERSONALIZADAS   =======================
					// =======================  ========================   =======================


					JSONObject objetoParametro = new JSONObject();

					// #DOCUMENTACAO
					// busca de indices da planilha principal
					if (tipoPlanilha.equals("MOVIMENTO")) {
						roteiroCRM = getRoteiro();

						inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
					}

					jStatus = new JSONObject();
					putStatus(dirName, "", jStatus, logger);
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {

							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);
								
 
								
								contadorCabecalho++;
								if (contadorCabecalho<10) {
										cabecalhoPlanilha.append(line).append(" "); 
										cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								}
								else {
									cabecalhoPlanilha = new StringBuilder();
									
									// ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario 
									if (mantemArquivo.equals("SIM") && tipoPlanilha.contains("MOVIMENTO") && porAba > 2) ignoraAbas = true;
								}
								if (cont < 10)  putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);  
								   

								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								if (nomeArquivo.toUpperCase().contains(".OMC")) {

									tipoPlanilha = "OTT-MEUCAIXA";
									
									JSONObject jDados = new JSONObject();
									jDados.put("TIPOLANCAMENTO", tipoLancamento);
									jDados.put("NOMEEMPRESA",    nomeEmpresa);
									jDados.put("CODEMPRESA",     codEmpresa);
									jDados.put("NOMEARQUIVO",    nomeArquivo);
									jDados.put("TIPOPLANILHA",   tipoPlanilha);

									mapaVariavel = readOttimizzaMeuCaixa(memFile, jDados, mapaVariavel, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "",  new JSONObject(), logger);
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									break;
								}

								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
								
								if (nomeArquivo.toUpperCase().contains(".OFX") && !mantemArquivo.equals("SIM")) {
									tipoPlanilha = "EXTRATO-OFX";     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
									JSONObject jDados = new JSONObject();
									jDados.put("CODEMPRESA", codEmpresa);
									jDados.put("TIPOLANCAMENTO", tipoLancamento);
									jDados.put("NOMEEMPRESA",    nomeEmpresa);
									jDados.put("NOMEARQUIVO",    nomeArquivo);
									if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDados.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
									readOFXDefault(memFile, jDados, dbIOCont, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "",  new JSONObject(), logger);
									break;
								}
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
																
								if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  && !mantemArquivo.equals("SIM")) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());
									
									
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									} 
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE")){

									JSONObject jDados               = new JSONObject();

									jDados.put("erpContabilidade",  roteiroCRM.optString("erpContabilidade"));
									jDados.put("CODEMPRESA",        codEmpresa);
									jDados.put("NOMEARQUIVO",       nomeArquivo);
									jDados.put("LINE",              line);
									jDados.put("PRIMEIRAVEZ",       primeiraVezDuplicata);   jDados.put("DIRNAME",      		dirName);   jDados.put("DIRNAME",      		dirName);
									jDados.put("TIPOPLANILHA",      tipoPlanilha);
									jDados.put("TIPOLANCAMENTO",    tipoLancamento);
									
									if (!numSeparadorDuplicata.equals("")) jDados.put("NUMSEPARADOR", numSeparadorDuplicata);
									
									if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
										jDados.put("CONTROLAPARCELA",  true);  

									} 
 
									primeiraVezDuplicata = leituraDuplicataPadrao(jDados, memFile, mapaVariavel, dbIOCont, logger);

									if(!primeiraVezDuplicata){
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								} 


								
								/// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
								if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE") && 
								   roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {

 									
									if (line.contains("DOCUMENTO") && 
										line.contains("EMISSAO") && 
										line.contains("V. PARCELA") && 
										line.contains("DEVOLUCAO") && 
										line.contains("SALDO") && 
										line.contains("SITUACAO")) {
										
 
										tipoPlanilha = "DUPLICATA-DOMINIO"; 

										if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

										JSONObject jIndices = new JSONObject();
										 
										jIndices.put("IVENCIMENTO", 9);
										jIndices.put("INOMEORIGEM", 4);
										jIndices.put("IDUPLICATA", 4);
										jIndices.put("IVALORPARCELA", 12);									 
										
										
										jIndices.put("CODEMPRESA", codEmpresa);
										jIndices.put("TIPOPLANILHA", tipoPlanilha);

										primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);

										break;
									}
								}
																
								
									
								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								
 
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									// Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
									if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(porAba))) continue;

								}


								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								try {
									fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
								} catch (IllegalArgumentException e) {
									//TODO: handle exception
									erroShrink = true;
									logger.logError("Deu ruim no shrink \n"+e);
									break;
								}
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
								
 								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "");
									histobj.put("mesAnoAnterior", "");
									histobj.put("mesAno2Anterior", "");
									histobj.put("mesAnoAtual", "");
									histobj.put("contaMovimento", "");
									histobj.put("contaPortador", "");
									histobj.put("contaDebito", "");
									histobj.put("contaCredito", "");
									histobj.put("contaJuros", contaJuros);
									histobj.put("contaDesconto", contaDesconto);
									histobj.put("contaMulta", contaMulta);
									histobj.put("valorDocumento", "");
									histobj.put("valorJuros", "");
									histobj.put("valorDesconto", "");
									histobj.put("valorMulta","");
									histobj.put("codFilial", "");
									histobj.put("numeroAba", String.valueOf(porAba));
									histobj.put("tipoPlanilha", tipoPlanilha);
									histobj.put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;


								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									
									// #Fabrica(2019-05-20)
									if (tipoPlanilha.contains("OTTCARTAO")) {
										try{
											String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
											if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
												dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
											}else{
												dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											}	
 											
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
									if (!tipoPlanilha.contains("OTTCARTAO")) {
										// #Fabrica(2019-05-20)
										try{
											dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
 								   
									// leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
									
									if (!zerarColAlternativo.equals("")) {
										if (zerarColAlternativo.contains("documento"))		documento		= "";
										if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
										if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
										if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
										if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
										if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
										if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
										if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
										if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
										if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
										if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
										if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
										if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
									}
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									
									if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
											try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
											try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
											try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
											try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
											try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
											try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
									}
									
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorDocumentoArray[0] = 0;
									valorDocumentoArray[1] = 0;
									valorDocumentoArray[2] = 0;
									valorDocumentoArray[3] = 0;
									valorDocumentoArray[4] = 0;
									valorDocumentoArray[5] = 0;
									valorDocumentoArray[6] = 0;
									valorDocumentoArray[7] = 0;
									valorDocumentoArray[8] = 0;
									valorDocumentoArray[9] = 0;
									
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									
									// quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto 
									// no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
									// no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
									if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
										try{
											if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
											else valorDesconto = 0;
										} catch(Exception vlrd) {}
									}
									
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									

 
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
										String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
										valorSomaArray = 0;
										for(int iv = 0; iv < indiceValores.length; iv++) {
										
 										 
											double denomidador = 0; 
											int indiceDenominador = -1;
											String sinal = "";
											boolean multiplica100 = false;
											boolean divide100 = false;
											
											if (indiceValores[iv].contains("*100")) multiplica100 = true;
											if (indiceValores[iv].contains("/100")) divide100 = true;
											indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");
											
											if (indiceValores[iv].contains("*")) sinal = "*";
											if (indiceValores[iv].contains("/")) sinal = "/";
											if (indiceValores[iv].contains("+")) sinal = "+";
											if (indiceValores[iv].contains("-")) sinal = "-";										

																					
											if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
 												try {
													if (!indiceValores[iv].contains("#")) {
														denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
													}
													else {
														denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
													}
												} catch (Exception xx) {denomidador = 0;}
												indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
											} 
											 	
											
											try{
											
												valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
												if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
												if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
												if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
												if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
												if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
												if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;
												
 
												
 											}
											catch (Exception vlrd) { 

 
 
												valorDocumentoArray[iv] = 0; 
											}
											
											valorSomaArray += valorDocumentoArray[iv];
										}
									}
									
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
									
									if (tipoLancamento.equals("PAGAR"))
										debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER"))
										debitoCredito = "EXTRATO-CREDITO";
									
									
									////////////////////////////////////////////////
									////	busca Coluna Alternativa
									JSONObject obj1 = new JSONObject();
									String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
									obj1.put("validar",			validar);
									obj1.put("documento",		documento);
									obj1.put("nomeOrigem",		nomeOrigem);
									obj1.put("nomePortador",	nomePortador);
									obj1.put("dataMovimento",	dataMovimento);
									obj1.put("complemento01",	complemento01);
									obj1.put("complemento02",	complemento02);
									obj1.put("complemento03",	complemento03);
									obj1.put("complemento04",	complemento04);
									obj1.put("complemento05",	complemento05);
									obj1.put("complemento06",	complemento06);
									obj1.put("complemento07",	complemento07);
									obj1.put("complemento08",	complemento08);
									obj1.put("complemento09",	complemento09);
									obj1.put("complemento10",	complemento10);
									obj1.put("codCentroCusto",	codCcOrigem);
									obj1.put("tipoPlanilha",	tipoPlanilha);
									obj1.put("numeroAba",		String.valueOf(porAba));
									obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());

									JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
									String changed = alternativeObj.optString("changeIt");
									
									if(!changed.equals("")) {
										zerarColAlternativo = changed;
                                        logger.logInfo("ENTRO IFEM VEM ASSIM: " + dataMovimento);
										if (changed.contains("dataMovimento")) {
											dataMovimento	= alternativeObj.optString("dataMovimento");
											dataLote		= alternativeObj.optString("dataLote");
                                            logger.logInfo("ENTRO IFEM SAI ASSIM: " + dataMovimento);
										}
										if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
										if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
										if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");
										
										if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
										if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
										if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
										if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
										if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
										if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
										if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
										if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
										if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
										if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");
										
										if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");
										if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
										if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
										if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
										if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
									}
									

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento < 0 && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {
										continue;
									}
								}
								
 

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
  
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
  
   
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
 										}
									}
  									
  
									// ajusta data quando vem no formato 01012021  
									if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
										try {
											Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
											dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
											dataLote = DateUtil.dateToString(dts, "yyyy-MM");
											if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
												dataMovimento = "";
												continue;
											}
										} catch (Exception dt1) {
											continue;
										}
									}
  
 
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);



									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									
									if (tipoPlanilha.contains("OTTCARTAO")) {
									    String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
										if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
									}

									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

									if (tipoLancamento.equals("PAGAR")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-CREDITO";

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && valorDocumento > 0)		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								
								
								
								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
								nomeOrigem = stringNormalizer(nomeOrigem, true);
								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
								nomePortador = stringNormalizer(nomePortador, true);
								
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								if(cont == 0) continue;

								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 

								//feita limpeza de campo para poder pegar melhor os juros e descontos.
								documento     = getLimpaCamposAvancado("documento", documento, histobj);


								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
									if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");

								chave = lote + "-" + String.valueOf(porAba) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								histobj.put("line", line.toUpperCase());
								histobj.put("cabecalhoRegra", cabecalhoRegra.toString());
  								
								String modificaData = getModificaData(histobj);
								
								if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
								if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
								if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
								if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
								if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
								if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);
								
								
								// METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
								// EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
								// UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
								nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
								nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
								documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
								complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
								complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
								complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
								complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
								complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
								complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
								complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
								complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
								complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
								complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);
								 

								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								partidaDobradaJuros		= 0;
								partidaDobradaDesconto	= 0;
								partidaDobradaMulta		= 0;

								if (forcarPartidaDobrada) {
									partidaDobradaJuros		= valorJuros;
									partidaDobradaDesconto	= valorDesconto;
									partidaDobradaMulta		= valorMulta;
									valorJuros				= 0;
									valorDesconto			= 0;
									valorMulta				= 0;
								}
								
								if (tipoPlanilha.contains("OTTCARTAO")) {
									
									if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
									if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
									complemento01 = tipoPlanilha;
									complemento02 = "VENDA";
									
									nomePortador = tipoPlanilha;
									
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
 									
								} else {
								
									// quando se mantem o arquivo, somente devem ser processados arquivos padroes
									// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
									if (mantemArquivo.equals("SIM")) continue;
									
								}
					
 
  	 
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(porAba);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
								if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

									for (int iv =0; iv < 10; iv++) { 
										
										if (valorDocumentoArray[iv] == 0) continue;
										
										String rotuloColuna = "";
										String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";"); 
										
										try {
											rotuloColuna = rotuloArray[iv];
										} 
										catch (Exception xx) {
											continue;
										}
										
										if (rotuloColuna.equals("")) continue;
										
									
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + rotuloColuna + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										histobj.put("dataMovimento", dataMovimento);
										
										ttTemp.complemento05 = rotuloColuna;
										histobj.put("complemento05", rotuloColuna);
										
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										
										ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

										if (tipoPlanilha.contains("OTTCARTAO")) {
											ttTemp.complemento01 = tipoPlanilha;
											ttTemp.complemento02 = rotuloColuna;
										}
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
									}
								}
								
								// Para cartoes, criamos o modelo de gerar tafifa por regra
								if (tipoPlanilha.contains("OTTCARTAO")) {

									histobj.put("complemento02", "TARIFA");
									histobj.put("complemento03", complemento03);
									histobj.put("dataMovimento", dataMovimento);
									histobj.put("complemento05", "TARIFA");									
 									
									double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);
  									 
									
									if (taxaTarifa > 0) {
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + "TARIFA" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										
										
										ttTemp.complemento05 = "TARIFA";
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

 										ttTemp.complemento01 = tipoPlanilha;
										ttTemp.complemento02 = "TARIFA";
										
 										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
									}
								}
								
								

									
								if (forcarPartidaDobrada) {
									if (partidaDobradaJuros		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + "-DOBRADA_JUR-" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento = partidaDobradaJuros;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
									}
									
									if (partidaDobradaDesconto	> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(porAba) + "-DOBRADA_DES-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaDesconto;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
									}
									
									if (partidaDobradaMulta		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(porAba) + "-DOBRADA_MUL-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaMulta;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
									}
								}								
							} catch (Exception e) {
								logger.logError("EndpointA:", e);
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

			}
			try {
				Iterator itArquivo = mapaArquivo.keySet().iterator();
				while (itArquivo.hasNext()) { 
					String key = (String)itArquivo.next();
					ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
					
					try {
		 
						FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
					} catch (Exception xx) {}
				}
			} catch (Exception xx) {} 
					
			

		}
	} catch (Exception ee) {
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		logger.logError("EndpointA: ", ee);
	}
	
	
	
	try {
		Iterator itArquivo = mapaArquivo.keySet().iterator();
		while (itArquivo.hasNext()) { 
			String key = (String)itArquivo.next();
			ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
			
			try {
 
				FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
			} catch (Exception xx) {}
 		}
	} catch (Exception xx) {} 
			

	if(erroShrink){
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		throw new Exception();
	}
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
		   
		try {
			JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

			if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
				for (int t=0; t<extratoEmpresa.length(); t++) {

					JSONObject recMov = extratoEmpresa.optJSONObject(t);

					recMov.put("CODEMPRESA", codEmpresa);
					recMov.put("NOMEEMPRESA", nomeEmpresa);

					//QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
					if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
						recMov.put("NOMEARQUIVO", nomeArquivo);
					}
					else {
						recMov.put("NOMEARQUIVO", "");
					}

					recMov.put("TIPOLANCAMENTO", tipoLancamento);
					recMov.put("CONTAMOVIMENTO", "");
					recMov.put("CONTAPORTADOR", "");
					recMov.put("CONTLINHATEXTO", String.valueOf(t));

					ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
					if (nomeArquivo.toUpperCase().contains("FILTRO_")){
						boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
						if(!filtro) continue; 
					} 
					String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
					ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;
					
					mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
					apagaExtrato    = true;

				}
			}
		}
		catch (Exception xx) {
			logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
		}

	} // if tipo planilha nao igual extrato
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
	StringBuilder[] txtFiscal = new StringBuilder[20];
  	for (int i= 0; i < 20; i++) {
		txtFiscal[i] = new StringBuilder("");
		loteFiscal[i] = "";		
	}

	StringBuilder txtFornecedor = new StringBuilder();
	StringBuilder txtPortador   = new StringBuilder();
	String nomePortadorAnterior = "";
	
	// if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("PAGAR")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // JWR 01022021
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("RECEBER")) txtFiscal[0].append("PGTOCLI").append(cnpjEmpresa).append("\r\n"); // JWR 01022021

	StringBuilder ResumoTxt = new StringBuilder();
	String rn = "\r\n";
	ResumoTxt = new StringBuilder();
	ResumoTxt.append("");
	ResumoTxt.append(rn);

	ResumoTxt.append("STATUS;");
	ResumoTxt.append("DATA;TIPO DATA;");
	ResumoTxt.append("VALOR;");
	ResumoTxt.append("DOCUMENTO;");
	ResumoTxt.append("CLIENTE/FORNECEDOR;");
	ResumoTxt.append("PORTADOR;");
	ResumoTxt.append("COMPLEMENTO01;");
	ResumoTxt.append("COMPLEMENTO02;");
	ResumoTxt.append("COMPLEMENTO03;");
	ResumoTxt.append("COMPLEMENTO04;");
	ResumoTxt.append("COMPLEMENTO05;");
	ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
	ResumoTxt.append("DATA;");
	ResumoTxt.append("DEBITO;");
	ResumoTxt.append("CLASS DEB;");
	ResumoTxt.append("NOME CONTA;");
	ResumoTxt.append("CREDITO;");
	ResumoTxt.append("CLASS CRED;");
	ResumoTxt.append("NOME CONTA;");
	ResumoTxt.append("VALOR;");
	ResumoTxt.append("HISTORICO;");
	ResumoTxt.append("ORIGEM");

	StringBuilder txtDePara = new StringBuilder();

	txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
	txtDePara.append("\r\n");

	if (mantemArquivo.equals("SIM")) putStatus(dirName, "", jStatus, logger);


	int contRegra = -1;
	
	try {
		Iterator itExtrato = mapaVariavel.keySet().iterator();
		while (itExtrato.hasNext()) {
			String chaveExtrato     = "";

			String key = (String)itExtrato.next();
			ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			
 
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+  cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");

			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
			ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
			if (ttJ != null && ttJ.valorLido == 0) {
				ttMov.valorJuros  = ttJ.valorJur;
				ttJ.valorLido     = 1;
				mapaJuros.put(chaveJuros,ttJ);

			}

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
			ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
			if (ttD != null && ttD.valorLido == 0) {
				ttMov.valorDesconto  = ttD.valorDesc;
				ttD.valorLido     = 1;
				mapaDesconto.put(chaveDesconto,ttD);

			}
			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

 
 			
			classificaPlano     = roteiroCRM.optString("classificaPlano");
			classificaFornec    = roteiroCRM.optString("classificaFornec");
			cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
			Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
			String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
			String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();

			if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
 
  
			// ------------------------------------------------------------------------------------------------------------------
			// 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------
			String DATAMOVIMENTO   = "";
			String PORTADOR        = "";
			String CHAVE           = "";
			boolean jaCruzou       = false;

			// ajuste 11/2020 @DiMaz
			if (ttMov.valorDocumento == 0) continue;
			logger.logInfo("-----------------------------------------------------------------------------------------------------");
            logger.logInfo("1.ttMov.dataMovimento: "+ ttMov.dataMovimento + " | 1.ttMov.nomeOrigem: "+ ttMov.nomeOrigem);
            logger.logInfo("1.ttMov.complemento07: "+ ttMov.complemento07);
            ttMov.dataMovimento = ttMov.dataMovimento.trim().replaceAll(" ","");
            logger.logInfo("2.ttMov.dataMovimento: "+ ttMov.dataMovimento);
            //if(ttMov.dataMovimento.length() < 10) ttMov.dataMovimento = "0"+ttMov.dataMovimento;  
            logger.logInfo("2.ttMov.dataMovimento: "+ ttMov.dataMovimento);
 

			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
			if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();
				String transferencia = "NAO";

				if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
				if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

				if (transferencia.equals("SIM")) {
					for (int xx = 0;xx<1;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;

							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");

					ttMov.complemento04 = ttMov.nomeOrigem;
					ttMov.nomeOrigem    = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;
					ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();
					jaCruzou = true;

				}
			}

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
			if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

				Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm   = new Date();
				Date dataMovimentoDateMenosDois = new Date();
				Date dataMovimentoDateMenosTres = new Date();
				Date dataMovimentoDateMaisUm    = new Date();
				Date dataMovimentoDateMaisDois  = new Date();
				Date dataMovimentoDateMaisTres  = new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();

				String transferencia = "NAO";

				if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
					for (int xx = 0;xx<7;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;
							if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
							if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
							if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
							if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
							if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
							if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");
					if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

					ttMov.nomePortador  = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();

				}

			}


			// ------------------------------------------------------------------------------------------------------------------
			// 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------




			classificacao = "";

			String key2 = ttMov.chave;

			if(ttMov.dataMovimento.length() > 9){
				mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
				anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
				mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
			}

			String trimestreMesAnoAnterior	    = "";
			String trimestreMesAnoAtual   	    = "";
			String descricaoPlanoContaPortador  = "";
			String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
			if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


			if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
			ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
			if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

			contaJuros        = roteiroCRM.optString("contaFixaJuros");
			contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
			contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
			contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
			contaMulta        = roteiroCRM.optString("contaFixaMulta");



			contaMovimento = "";
			contaPortador  = "";


			if(ttMov.tipoLancamento.contains("PAGAR")) {
				contaMovimento = contaFixaDebito;
				contaPortador  = contaFixaCredito;
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				contaPortador  = contaFixaDebito;
				contaMovimento = contaFixaCredito;
			}

			// Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
			// joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
			if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
				if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
				if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
			}


			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
			contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
			ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
			if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			JSONObject histobj = new JSONObject();

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

			ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			
			// Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
			String parcelaString = "1";
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

			try {
				ttMov.parcelaDoc = Integer.parseInt(parcelaString);
			}
			catch (Exception xx) { ttMov.parcelaDoc = 1;}
			
			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
					if(!ttMov.cpfCnpj.equals("")){
						contaMovimento = ttMov.cpfCnpj;
						if(roteiroCRM.optString("erpContabilidade").toUpperCase().contains("SCI UNICO") && !ttMov.cpfCnpj.equals(""))
						contaMovimento = ttMov.cpfCnpj + "P";
					}
				}
				else {ttMov.cpfCnpj = "";}
			}
			
			contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

 
 
			
			regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


			double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
				ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
				ttMov.valorDocumento = valorPrincipal;
			}
			
			ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
			ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
			ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			// quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
			if (ttMov.chave.contains("DOBRADA_JUR")) contaMovimento = ttMov.contaJuros;
			if (ttMov.chave.contains("DOBRADA_DES")) contaMovimento = ttMov.contaDesconto;
			if (ttMov.chave.contains("DOBRADA_MUL")) contaMovimento = ttMov.contaMulta; 
			

			boolean regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

		   //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaMovimento)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaMovimento)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}
			}

			regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
			if (contaMovimento.equals("")){
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					
					if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
					if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							
							try{
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								if (contaMovimento == null) contaMovimento = "";
							}else contaMovimento = "";
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							if (!contaMovimento.equals("")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							
						}	
					}  
				} catch  (Exception Ee) {}
			}
			
			if(roteiroCRM.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresa)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
				try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
				}
				catch  (Exception Ee) {}
			}

			String contaTipoFornecedor = "999333";

			boolean eFornecedor = false;
			String  razaoSocial = ttMov.nomeOrigem;
			String  razaoSocialDuplicata = ttMov.nomeOrigem;
			if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

			if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresa)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

				if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					eFornecedor = true;
				}  
			}

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaPortador)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaPortador)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = contaPortador;
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
			}
			
			if(ttMov.tipoLancamento.contains("PAGAR")) {
				ttMov.contaDebito  = contaMovimento;
				ttMov.contaCredito = contaPortador;
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				ttMov.contaCredito  = contaMovimento;
				ttMov.contaDebito   = contaPortador;
			}
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
				objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
 				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.valorDocumento);    ResumoTxt.append(";");
				ResumoTxt.append(ttMov.documento);         ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomeOrigem);        ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomePortador);      ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento01);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento02);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento03);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento04);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento05);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento06);     ResumoTxt.append(";;");

				ResumoTxt.append(ttMov.contaDebito);       ResumoTxt.append(";");
				ResumoTxt.append(ttMov.contaCredito);      ResumoTxt.append(";");
				ResumoTxt.append(regraContaMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.historico);         ResumoTxt.append(";");
				
				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.valorDocumento);    ResumoTxt.append(";");
				ResumoTxt.append(ttMov.documento);         ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomeOrigem);        ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomePortador);      ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento01);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento02);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento03);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento04);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento05);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento06);     ResumoTxt.append(";;");

				ResumoTxt.append(ttMov.contaDebito);       ResumoTxt.append(";");
				ResumoTxt.append(ttMov.contaCredito);      ResumoTxt.append(";");
				ResumoTxt.append(regraContaMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.historico);         ResumoTxt.append(";");
				
 				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			String parcelaAtualeFinal = "";
			String parcelaAtual       = "";

			int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
			if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

			ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
										   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
										   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
			histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);
			histobj.put("contaDebito", ttMov.contaDebito);
			histobj.put("contaCredito", ttMov.contaCredito);
			histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("contaDesconto", ttMov.contaDesconto);
			histobj.put("parcelaAtual", parcelaAtual);
			histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
			histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
			histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
			histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
			histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

			if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresa)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
			if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
												   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


			// quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
			if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
			if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
			if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta; 
			
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

			String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			if (!ttMov.codFilial.equals("")) {
				ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
			}
						
			if (!codParticipante.equals("")) {
				ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
			}

			ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
			if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
				ttMov.historico += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
			}

			// ------------------------------------------------
			//           GERA ARQUIVO PARA O FISCAL
			// ------------------------------------------------
			ttMov.documento = ttMov.documento.trim();
			if (ttMov.documento.startsWith("0")) {
				for (int xx=0;xx<10;xx++) {
					if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
				}
			}

			JSONObject jDescricaoDupl = new JSONObject();
			if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

			if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){

				apagaStatus = true;
				
				//JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
				//Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
				if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
					ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
				}
				
				String dataVencimentoTTMov = "";
				
				if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
				}	
					
				 
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
					if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  jDados.put("CODEMPRESA",     codEmpresa + "-%");
 
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  jDados.put("DATAVENCIMENTO", dataVencimentoTTMov); 

					
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					// #Fabrica(2019-05-20)
					// Descomentar a proxima linha para testar a razaoSocial do movimento com a jDescricaoDupl.optString("RAZAOSOCIAL") que vem das duplicatas em aberto!
					// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, razaoSocial);      //IDENTIFICAMOS UMA FALHA LOGICA
					// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem); //USAR ESSE
					// #Fabrica(2019-07-30)
					// Descomentar a proxima linha para testar o codigo de filial do movimento com a jDescricaoDupl.optString("SITUACAO") que vem das duplicatas em aberto! OBS: Lembrando que deve existir regra de c?digo filial no CRM
					// if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorFilial(jDescricaoDupl, ttMov.codFilial);
					// #Fabrica(2019-07-31)
					// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
					
					// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						// if (roteiroCRMPrincipal.has("validaFornecedorFiscal")) jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						// jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					// }
					
					if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
						jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					}
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
					}

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  {
								txtFiscal[0].append(cutString(jDescricaoDupl.optString("CODEMPRESA"), "-"));
							}
							else {
								txtFiscal[0].append(jDescricaoDupl.optString("CODEMPRESA"));
							}
							
							txtFiscal[0].append(";");
							txtFiscal[0].append("1;");
							txtFiscal[0].append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOC"));
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINAL"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil questor
							dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
							contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");
							
							if(dupliNaoEncontContabil){
								contaMovimento = contaTemp;
								if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
								if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

								histobj.put("contaMovimento", contaMovimento);
								ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
							}else {
								if(cabecalhoNaoEncontrada){
									txtFornecedor.append("Codigo");
									txtFornecedor.append(";");
									txtFornecedor.append("Fornecedor/Cliente");
									txtFornecedor.append(";");
									txtFornecedor.append("Duplicata");
									txtFornecedor.append(";");
									txtFornecedor.append("Data");
									txtFornecedor.append(";");
									txtFornecedor.append("Valor bruto");
									txtFornecedor.append(";");
									txtFornecedor.append("Valor liquido");
									txtFornecedor.append(";");
									txtFornecedor.append("Banco");
									txtFornecedor.append(";");
									txtFornecedor.append("Obs:");
									txtFornecedor.append("\r\n");
									cabecalhoNaoEncontrada = false;
								}
								String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
								jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
								txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
								txtFornecedor.append(";");
								txtFornecedor.append(razaoSocialDuplicata);
								txtFornecedor.append(";");
								txtFornecedor.append(ttMov.documento);
								txtFornecedor.append(";");
								txtFornecedor.append(ttMov.dataMovimento);
								txtFornecedor.append(";");
								txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
								txtFornecedor.append(";");
								txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
								txtFornecedor.append(";");
								txtFornecedor.append(ttMov.nomePortador);
								txtFornecedor.append(";");
								txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
								txtFornecedor.append("\r\n");

								jDescricaoDupl.put("TIPO","FORNECEDOR");

								geraFiscal = true;
								loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
								ttMov.tipoPlanilha = "NAO LER";
								mapaVariavel.put(key,ttMov);
								continue;
							}
						}
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
						
						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorJurosAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros));
						
						double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros;
						String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
						
						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {
						
													

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorJurosAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					  
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					
					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							if(geraCabecalhoCordilheira) {
								txtFiscal[0].append("DATA DE VENCIMENTO;DATA DO PAGAMENTO;CNPJ DO CLIENTE;DOCUMENTO;NOME/RAZAO;NUMERO DA PARCELA;VALOR ORIGINAL;VALOR PAGO;VALOR JUROS;VALOR DESCONTO;FORMA DE PAGAMENTO;NUMERO DA NOTA");
								txtFiscal[0].append("\r\n");
								geraCabecalhoCordilheira = false;
							}

							txtFiscal[0].append(jDescricaoDupl.optString("DATAVENCIMENTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.dataMovimento);
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.cpfCnpj);
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal[0].append(";");
							txtFiscal[0].append(cutString(ttMov.documento, 0, "-"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.nomeOrigem);
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOC"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORPARCELA").replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto)).replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(String.format("%.2f",ttMov.valorDesconto).replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.documento);
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
				   
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							String separadorFiscal = "";
							String dataVencimento  = "";
							//String parcela		   = "1";
							String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							txtFiscal[0].append(cnpjEmpresa);
							txtFiscal[0].append("    ");

							if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
							if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

							txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie
							
							txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
							txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));
							
							txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							if(contaPortador.length() > 1){
								contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							}
							
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita
							
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}
				
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					JSONObject jDados = new JSONObject();
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

					// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 
					   if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
					}

					String chaveParcela = ttMov.documento + "-PARCELA";
					ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
					if (ttP == null) {
						ttP  			= new ttParcelaDominio();
						ttP.documento   = ttMov.documento;
						ttP.ultimaParcela = 0;
					}
					ttP.ultimaParcela++;
					
					mapaParcelaDominio.put(chaveParcela,ttP);
					
					jDados.put("PARCELADOC", ttP.ultimaParcela);                 
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);	

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
 
					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";
					
					String serie = "";
					String subSerie = "";
					String especie = "";
					double valorSegmento = 0;

					JSONArray recordsDup = new JSONArray();

					/*
					DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
					VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
					COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
					*/
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 

						 boolean isData = false;
						 Date dtV = new Date();
						 try{ 
							 dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
							isData = true; 
							 if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(dataVencimentoTTMov))) isData = false; 
						 } catch(Exception ii){ 
							isData = false; 
						 }
						 if(!chaveDuplicata.equals("")){
							if(isData){
								try {
									String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? "; 
									recordsDup = dbIOCont.sql(sql)
									  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  .param(chaveDuplicata + "%")
									  .param(dtV)
									  .debug(logger)
									  .query();								
								} catch (Exception e1) {
									logger.logDebug("ERROR: " + e1.getMessage());
								}
							}
							// if(!isData){
								// try {
									// String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
									// recordsDup = dbIOCont.sql(sql)
									  // .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  // .param(chaveDuplicata + "%")
									  // .debug(logger)
									  // .query();								
								// } catch (Exception e1) {
									// logger.logDebug("ERROR: " + e1.getMessage());
								// }
							// }
						 }
					}

					 else  { 
						if(!chaveDuplicata.equals("")){
							try {
								String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
								recordsDup = dbIOCont.sql(sql)
								  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
								  .param(chaveDuplicata + "%")
								  .debug(logger)
								  .query();	

							} catch (Exception e1) {
								logger.logDebug("ERROR: " + e1.getMessage());
							}
						}
					}
					/* EXEMPLO DE COMO TEM QUE SAIR
					
					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject(); 
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);
					
					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");
					}

					double valorSaldoDuplicata = 0;
					double valorSomaSegmentos  = 0;
					
					// soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos 
					// continua sendo o valor origial (total) da nota fiscal
					// utilizado para achar a proporcao do valor para cada segmento
					for (int seg =0; seg<recordsDup.length(); seg ++) {
						recordsDupSeg =  recordsDup.optJSONObject(seg);
						if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
							valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
						}		
					}

					boolean leuDuplicata = false;
					
					// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
					
					if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
						jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					}
					
					if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

					valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));
					
					if (!especie.equals("") || !serie.equals("")) {
						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
							double valorTotalBaixado = 0;
							for (int seg =0; seg<recordsDup.length(); seg ++) {
							
								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";
								
								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE 
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
									if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }	
								}	

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

								// (zerado para validacao)
								diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
                                    ttMov.contaDebito   = contaPortador;
                                    ttMov.contaCredito  = contaMovimento;
                                    codContabil = "5200";
                                    if(especie.equals("39")) codContabil = "5300";
                                }

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal[0].append(tipoSerie);
                                    txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
                                    txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                                    txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append(ttMov.dataMovimento);
                                    txtFiscal[0].append(delimitador);
									
									 
									
									ttDocumento ttDoc    = (ttDocumento)mapaDocumento.get(ttMov.documento+"-"+seg);
									if (ttDoc == null) {
										ttDoc  = new ttDocumento();
										ttDoc.documento  = ttMov.documento;
										ttDoc.valorDocumento  = 0;
 									}
									
									double valorBaixar = 0;
									
									ttDoc.valorDocumento   = ttDoc.valorDocumento + DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));
									valorBaixar = DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));										
									
  
									if ((valorSegmento - ttDoc.valorDocumento) <= 0.02 && (valorSegmento - ttDoc.valorDocumento) > 0) valorBaixar = valorBaixar  + (valorSegmento - ttDoc.valorDocumento);
									if ((ttDoc.valorDocumento - valorSegmento) <= 0.02 && (ttDoc.valorDocumento - valorSegmento) > 0) valorBaixar = valorBaixar  - (ttDoc.valorDocumento - valorSegmento);
									
									 valorTotalBaixado += valorBaixar; 
									 
 									 
 									
									// calcula se o valor a ser baixado somando os segmentos eh maior que o valor pago pelo cliente
									// quando isto ocorrer, deve-se ajustar no ultimo segmento o valor
									 if ((valorTotalBaixado - ttMov.valorDocumento) <= 0.02 && (valorTotalBaixado - ttMov.valorDocumento) > 0) {
										 valorBaixar = valorBaixar  - (valorTotalBaixado - ttMov.valorDocumento);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (valorTotalBaixado - ttMov.valorDocumento);
									 }
									
									 if ((ttMov.valorDocumento - valorTotalBaixado) <= 0.02 && (ttMov.valorDocumento - valorTotalBaixado) > 0) {
										 valorBaixar = valorBaixar  - (ttMov.valorDocumento - valorTotalBaixado);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (ttMov.valorDocumento - valorTotalBaixado);
									 }
									 
 									
									mapaDocumento.put(ttMov.documento+"-"+seg,ttDoc);									
									
									txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    // txtFiscal[0].append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||");
                                    txtFiscal[0].append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||||");
                                    
									if(ttMov.tipoLancamento.contains("PAGAR")) {
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(jDescricaoDupl.optString("CPFCNPJ"));
										txtFiscal[0].append(delimitador);
									}
									txtFiscal[0].append(segmento);
                                    txtFiscal[0].append(delimitador);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
										codContabil = codContabil.replaceAll("00","10");

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.contaDebito);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.contaCredito);
										txtFiscal[0].append(delimitador);
										 
										txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historico.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historico, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(ttMov.historico, 0 ,"Codigo"));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

									if (ttMov.valorDesconto > 0 && seg == 0) {

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(ttMov.contaDebito);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(contaDesconto);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(contaDesconto);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(ttMov.contaCredito);
										}
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(ttMov.historicoDesconto, 0 ,"Codigo"));

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaJuros);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(contaJuros);
										}
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(ttMov.historicoJuros, 0 ,"Codigo"));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaMulta);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(contaMulta);
										}
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(ttMov.historicoMulta, 0 ,"Codigo"));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
							jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
							eFornecedor = true;
						}
					}
				}


				if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
							jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
							jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
							jDescricaoDupl.put("VALORFINAL",  valorFinal);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
								txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
							}
							else {
								txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
																
							}							
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
				}
			}
			
				
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";
					
 				
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
					}	
					
						
					JSONObject jDados = new JSONObject();
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
 					
 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");	 
				
						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logDebug("ERROR: " + e2.getMessage());
						continue;
					}
					
 					
					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) { 

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
	 
						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;
						
						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
						 
 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) { 
 
							String codContabil = "5700";								 							
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}
								
								
							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");								 
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}
							
 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio
							 
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);
							
						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}
			
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaMovimento)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaMovimento)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);


				}
			}
			 //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
			if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			}

			chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
			chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
			ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
			String keyAc = chave;
			

			ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
			if (ttMov3  == null) {
				ttMov3                = new ttMovimentoPadrao(ttMov);
				ttMov3.valorDesconto   = 0;
				ttMov3.valorJuros      = 0;
				ttMov3.valorDocumento  = 0;
				ttMov3.valorMulta      = 0;
				ttMov3.documento       = "";
			}
			if (ttMov3.documento.equals("")) {
				ttMov3.documento         = ttMov.documento;
			} else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


			ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
			ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
			ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
			ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
			ttMov3.chave = chave;


			String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
 			if (!testeChavePortador.equals("")) ttMov3.contador = 3;
			
			if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")) ttMov3.contador = 3;

			mapaVariavel.put(key,ttMov);
			mapaOficial.put(keyAc,ttMov3);
  			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
 			}
			mapaLote.put(ttMov.lote,ttLot);
			 			
 
			if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
				if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			}else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			
			if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
			

			if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
				chave = chave.replaceAll("CTB","CTBPORT");
				if (!testeChavePortador.equals("")) chave = testeChavePortador;

				key = chave;
				ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
				if (ttMov2  == null) {
					ttMov2                = new ttMovimentoPadrao(ttMov);
					ttMov2.contador        = 0;
					ttMov2.valorDesconto   = 0;
					ttMov2.valorJuros      = 0;
					ttMov2.valorDocumento  = 0;
					ttMov2.valorMulta      = 0;
					ttMov2.classificacao     = ttMov.classificacao;

				}
				ttMov2.tipoMovimento     = "CTBPORT";
				ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
				ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
				ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
				ttMov2.chave             = chave;
				ttMov2.chaveExtrato      = "";
				ttMov2.documento         = ttMov3.documento;
				ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
				ttMov2.contador          = ttMov2.contador + ttMov3.contador;
				if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
					ttMov2.naturezaContabil  = "C";
					ttMov2.contaDebito       = "";
					ttMov2.contaCredito      = ttMov.contaCredito;
				}
				if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
					ttMov2.naturezaContabil  = "D";
					ttMov2.contaDebito       = ttMov.contaDebito;
					ttMov2.contaCredito      = "";
				}
				ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
				
				String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
					if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
  					ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
				}

				mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
			}
		}


		//-------------------------------------------------------------------------
		// GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
		//-------------------------------------------------------------------------
		if (geraFiscal) {

			String auxExtencao = ".txt";
			if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtFiscal[0].toString());

			loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

			filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
			writer = new FileWriter(filename);
			writer.writeNewFile(txtFornecedor.toString());
			
			
		}


		//-------------------------------------------------------------------------
		//--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
		//-------------------------------------------------------------------------


		
		mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
		// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
		// =======================================================================================
  	   
		
		Iterator itLote = mapaLote.keySet().iterator();
		while (itLote.hasNext()) {

			String key = (String)itLote.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			 lote = ttLot.lote;

			try {
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_MOVIMENTO")
				.where("LOTE=?")
				.param(lote)
				.execute();
			} catch (Exception eDel) {
				logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
			}
		}

		contRegra = -1;
		Iterator it = mapaOficial.keySet().iterator();
		while (it.hasNext()) {
			String chaveExtrato     = "";

			String key = (String)it.next();
			ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
			try {
				ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
			}
			catch (Exception xx) { continue;}

  
			if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
				if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

			}
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			
 			

			if(tipoLancamento.contains("PAGAR")){
				ttMov.naturezaContabil = "D";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
			}
			if(tipoLancamento.contains("RECEBER")){
				ttMov.naturezaContabil = "C";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
			}

			JSONObject extratoEmpresa = new JSONObject();


			// CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				chaveExtrato = ttMov.chaveExtrato;

				extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
				.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
				.param(chaveExtrato + "%")
				.queryUnique();

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					if (extratoEmpresa.has("EXTRATOLIDO")) {

						double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

						if (extratoLido == 1) continue;

						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(1)
						.param(chaveExtrato)
						.execute();

					}
				}

			}


			// -----------------------------------------------------------------------------------------------------------
			// COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
			// QUANDO O CLIENTE FINAL ESTIVER RODANDO.
			// -----------------------------------------------------------------------------------------------------------

			if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

				String tipoData = "MOVIMENTO";

				comparaRazao = true;


				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm= new Date();
				Date dataMovimentoDateMenosDois= new Date();
				Date dataMovimentoDateMenosTres= new Date();
				Date dataMovimentoDateMaisUm= new Date();
				Date dataMovimentoDateMaisDois= new Date();
				Date dataMovimentoDateMaisTres= new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;

				String valorFinal = String.format("%.2f", ttMov.valorDocumento);
				valorFinal = valorFinal.replaceAll("\\.",",");

				JSONArray registro = new JSONArray();

				for (int xx = 0;xx<5;xx++) {
					try {
						Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
						if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm; tipoData = "D+1";}
						if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm; tipoData = "D-1";}
						if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois; tipoData = "D+2";}
						if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

						registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
						.fields("CONTADEBITO,CONTACREDITO,HISTORICO")
						.param(codEmpresa)
						.param(dataLeitura)
						.param(ttMov.valorDocumento)
						.query();

						if (registro != null && registro.length() > 0) break;
					}
					catch (Exception xx) {
						break;
					}
				}



				JSONObject histobj = new JSONObject();
				ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
				ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
				ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
				ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
				ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
				ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
				ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
				ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
				ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
				ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
				ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
				ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
				ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

				histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
				histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
				histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
				histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
				histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
				histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
				histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
				histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
				histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
				histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
				histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

				String contaPrincipal = "";
				String contraSecundaria = "";

				if (tipoLancamento.contains("PAGAR")) {
					contaPrincipal = ttMov.contaDebito;
					contraSecundaria = ttMov.contaCredito;

				}
				if (tipoLancamento.contains("RECEBER")) {
					contaPrincipal = ttMov.contaCredito;
					contraSecundaria = ttMov.contaDebito;
				}

				regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

				if (registro != null && registro.length() > 0) {
					for (int t=0; t<registro.length(); t++) {

						JSONObject recMov = registro.optJSONObject(t);
						String contaDebitoRazao = recMov.optString("CONTADEBITO");
						String contaCreditoRazao = recMov.optString("CONTACREDITO");
						String historicoRazao = recMov.optString("HISTORICO");

						String descricaoCredito = "";
						String descricaoDebito = "";
						String classificacaoDebito = "";
						String classificacaoCredito = "";

						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO,CONTAANALITICA")
						.param(codEmpresa)
						.param(contaDebitoRazao)
						.queryUnique();

						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
						}
						if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
							classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
						}

						descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO,CONTAANALITICA")
						.param(codEmpresa)
						.param(contaCreditoRazao)
						.queryUnique();

						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
						}
						if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
							classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
						}

						ResumoTxt.append("\r\n");

						if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
						if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
						ResumoTxt.append(ttMov.dataMovimento);
						ResumoTxt.append(";");
						ResumoTxt.append(tipoData);
						ResumoTxt.append(";");
						ResumoTxt.append(valorFinal);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.documento);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.nomeOrigem);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.nomePortador);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.complemento01);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.complemento02);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.complemento03);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.complemento04);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.complemento05);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.complemento06);
						ResumoTxt.append(";;");

						ResumoTxt.append(ttMov.contaDebito);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.contaCredito);
						ResumoTxt.append(";");
						ResumoTxt.append(regraContaMovimento);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.historico.substring(0, ttMov.historico.indexOf("GPLCTO")));
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.historico.substring(0, ttMov.historico.indexOf("GPLCTO")));
						ResumoTxt.append(";;");

						ResumoTxt.append(ttMov.dataMovimento);
						ResumoTxt.append(";");
						ResumoTxt.append(contaDebitoRazao);
						ResumoTxt.append(";");
						ResumoTxt.append(classificacaoDebito);
						ResumoTxt.append(";");


						ResumoTxt.append(descricaoDebito);
						ResumoTxt.append(";");
						ResumoTxt.append(contaCreditoRazao);
						ResumoTxt.append(";");
						ResumoTxt.append(classificacaoCredito);
						ResumoTxt.append(";");
						ResumoTxt.append(descricaoCredito);
						ResumoTxt.append(";");
						ResumoTxt.append(valorFinal);
						ResumoTxt.append(";");
						ResumoTxt.append(historicoRazao);
						ResumoTxt.append(";");
						ResumoTxt.append(ttMov.nomeArquivo);
						ResumoTxt.append(";");

						objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
						objetoRoteiro.put("CHAVE", ttMov.chave + contaDebitoRazao);

						objetoRoteiro.put("contaCreditoRazao", contaCreditoRazao);
						objetoRoteiro.put("contaDebitoRazao", contaDebitoRazao);
						objetoRoteiro.put("historicoRazao", historicoRazao);
						objetoRoteiro.put("regraConta", regraContaMovimento);
						objetoRoteiro.put("regraHistorico", regraHistorico);
						objetoRoteiro.put("codigoHistorico", "");

						objetoRoteiro.put("classificacaoDebito", classificacaoDebito);
						objetoRoteiro.put("classificacaoCredito", classificacaoDebito);
						objetoRoteiro.put("descricaoDebito", descricaoDebito);
						objetoRoteiro.put("descricaoCredito", descricaoCredito);



						if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
					}
				}
				else {
					ResumoTxt.append("\r\n");
					ResumoTxt.append("NAO ENCONTRADO;");
					ResumoTxt.append(ttMov.dataMovimento);
					ResumoTxt.append(";");
					ResumoTxt.append(tipoData);
					ResumoTxt.append(";");
					ResumoTxt.append(valorFinal);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.documento);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.nomeOrigem);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.nomePortador);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.complemento01);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.complemento02);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.complemento03);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.complemento04);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.complemento05);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.complemento06);
					ResumoTxt.append(";;");

					ResumoTxt.append(ttMov.contaDebito);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.contaCredito);
					ResumoTxt.append(";");
					ResumoTxt.append(regraContaMovimento);
					ResumoTxt.append(";");
					ResumoTxt.append(ttMov.historico);
					ResumoTxt.append(";");
					ResumoTxt.append(regraHistorico);
					ResumoTxt.append(";;");
					ResumoTxt.append(ttMov.nomeArquivo);
					ResumoTxt.append(";");
					objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
					if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);

				}
			}

			if(tipoLancamento.contains("PAGAR")){

				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
				if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
			}
			if(tipoLancamento.contains("RECEBER")){
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
				if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
			}

			if (roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

			String classificacaoFinal = classificacao + ttMov.classificacao + "01";

			if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}

 
			if (classificacao.startsWith("X")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("CONTADEBITO", ttMov.contaDebito);
				js.put("CONTACREDITO", ttMov.contaCredito);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave  + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRM.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
 				

				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

					//records.put(rec3);
				}
				continue;
			}

			String classJur = "";
			String classDes = "";
			String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
				if(classificacao.startsWith("C") || classificacao.startsWith("V")){
					if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
					if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
					classDes = classificacao + ttMov.classificacao + "02";
					classJur = classificacao + ttMov.classificacao + "04";
					classMul = classificacao + ttMov.classificacao + "05";
				}
				if(classificacao.startsWith("D")){
					if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
					if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
					classDes = classificacao + ttMov.classificacao + "05";
					classJur = classificacao + ttMov.classificacao + "02";
					classMul = classificacao + ttMov.classificacao + "03";
				}
			}
			
			
			if(tipoLancamento.contains("RECEBER")){
				if(classificacao.startsWith("D") || classificacao.startsWith("V")){
					if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
					if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
					classDes = classificacao + ttMov.classificacao + "02";
					classJur = classificacao + ttMov.classificacao + "04";
					classMul = classificacao + ttMov.classificacao + "05";
				}
				if(classificacao.startsWith("C")){
					if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
					if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
					classDes = classificacao + ttMov.classificacao + "05";
					classJur = classificacao + ttMov.classificacao + "02";
					classMul = classificacao + ttMov.classificacao + "03";
				}
			}
			  


			if (ttMov.tipoMovimento.equals("CTBPORT")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTBPORT");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTBPORT");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRM.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
			 
				//records.put(js);
			}
			if (ttMov.tipoMovimento.equals("CTB")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTB");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRM.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);

				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
					//records.put(rec3);
				}

				 
				if (ttMov.valorJuros > 0)  {
					classificacaoFinal = classJur;
					JSONObject jsJUR = new JSONObject(js.toString());
					jsJUR.put("LOTE", ttMov.lote);
					jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
					jsJUR.put("DOCUMENTO", ttMov.documento);
					jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
					jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
					jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsJUR.put("HISTORICO", ttMov.historicoJuros);
					jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
					jsJUR.put("VALORJUROS", ttMov.valorJuros);
					jsJUR.put("VALORMULTA", ttMov.valorMulta);
					jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
					jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
					jsJUR.put("NATUREZACONTABIL", "D");
					jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
					jsJUR.put("SERIE", ttMov.serie);
					jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
					jsJUR.put("CLASSIFICACAO", classificacaoFinal);

					jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
					jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
					jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
					jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
					jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
					jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
					jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
					jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
					jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
					jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
					jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
						jsJUR.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsJUR.put("CONTADEBITO",  "");
						jsJUR.put("CONTACREDITO", ttMov.contaJuros);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
				
					//records.put(jsJUR);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsJUR.toString());
						 rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorDesconto > 0)  {
					classificacaoFinal = classDes;
					JSONObject jsDES = new JSONObject(js.toString());
					jsDES.put("LOTE", ttMov.lote);
					jsDES.put("CNPJEMPRESA", cnpjEmpresa);
					jsDES.put("DOCUMENTO", ttMov.documento);
					jsDES.put("CODEMPRESA", ttMov.codEmpresa);
					jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsDES.put("TIPOMOVIMENTO", "CTBDES");
					jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsDES.put("HISTORICO", ttMov.historicoDesconto);
					jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
					jsDES.put("VALORJUROS", ttMov.valorJuros);
					jsDES.put("VALORMULTA", ttMov.valorMulta);
					jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
					jsDES.put("CENTROCUSTO", ttMov.centroCusto);
					jsDES.put("NATUREZACONTABIL", "C");
					jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
					jsDES.put("SERIE", ttMov.serie);
					jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
					jsDES.put("CLASSIFICACAO", classificacaoFinal);

					jsDES.put("COMPLEMENTO01", ttMov.complemento01);
					jsDES.put("COMPLEMENTO02", ttMov.complemento02);
					jsDES.put("COMPLEMENTO03", ttMov.complemento03);
					jsDES.put("COMPLEMENTO04", ttMov.complemento04);
					jsDES.put("COMPLEMENTO05", ttMov.complemento05);
					jsDES.put("COMPLEMENTO06", ttMov.complemento06);
					jsDES.put("COMPLEMENTO07", ttMov.complemento07);
					jsDES.put("COMPLEMENTO08", ttMov.complemento08);
					jsDES.put("COMPLEMENTO09", ttMov.complemento09);
					jsDES.put("COMPLEMENTO10", ttMov.complemento10);
					jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsDES.put("CONTADEBITO", "");
						jsDES.put("CONTACREDITO", ttMov.contaDesconto);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
						jsDES.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
					//records.put(jsDES);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsDES.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorMulta > 0)  {
					classificacaoFinal = classMul;
					JSONObject jsMUL = new JSONObject(js.toString());
					jsMUL.put("LOTE", ttMov.lote);
					jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
					jsMUL.put("DOCUMENTO", ttMov.documento);
					jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
					jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
					jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsMUL.put("HISTORICO", ttMov.historicoMulta);
					jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
					jsMUL.put("VALORJUROS", ttMov.valorJuros);
					jsMUL.put("VALORMULTA", ttMov.valorMulta);
					jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
					jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
					jsMUL.put("NATUREZACONTABIL", "D");
					jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
					jsMUL.put("SERIE", ttMov.serie);
					jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
					jsMUL.put("CLASSIFICACAO", classificacaoFinal);

					jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
					jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
					jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
					jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
					jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
					jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
					jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
					jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
					jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
					jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
					jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
						jsMUL.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsMUL.put("CONTADEBITO",  "");
						jsMUL.put("CONTACREDITO", ttMov.contaMulta);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
					
					//records.put(jsMUL);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsMUL.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
					   //records.put(rec3);
					}
				}
			}
		}

		if (apagaExtrato) {
			dbIOCont.delete("IO_EXTRATO")
			.where("CODEMPRESA=?")
			.param(codEmpresa)
			.execute();
		}
		// resumo comparativo com razao
		if (comparaRazao) {
			String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
			writerRazao.writeNewFile(ResumoTxt.toString());
		}

		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
		//-------------------------------------------------------------------------------------
		String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
		// Cria o arquivo de DE-PARA FORNECEDOR
		FileWriter writer = new FileWriter(filename);
		writer.writeNewFile(txtDePara.toString());

		Iterator ite = mapaLote.keySet().iterator();
		while (ite.hasNext()) {
			String key = (String)ite.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			// =======================================================================================
			// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
			// =======================================================================================
			lote = ttLot.lote;     

 			
			ultimoJS = new JSONObject();
			ultimoJS.put("LOTE", lote);
			ultimoJS.put("DOCUMENTO", "");
			ultimoJS.put("CODEMPRESA", codEmpresa);
			ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
			ultimoJS.put("DATAMOVIMENTO", "");
			ultimoJS.put("TIPOMOVIMENTO", "");
			ultimoJS.put("TIPOLANCAMENTO", "");
			ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
			ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
			ultimoJS.put("HISTORICO", "");
			ultimoJS.put("VALORLIQUIDACAO", 0);
			ultimoJS.put("VALORDOCUMENTO", 0);
			ultimoJS.put("VALORDESCONTO", 0);
			ultimoJS.put("VALORJUROS", 0);
			ultimoJS.put("VALORMULTA", 0);
			ultimoJS.put("NOMEPORTADOR", "");
			ultimoJS.put("CENTROCUSTO", "");
			ultimoJS.put("NATUREZACONTABIL", "");
			ultimoJS.put("NOMEORIGEM", "");
			ultimoJS.put("CPFCNPJ", "");
			ultimoJS.put("SERIE", "");
			ultimoJS.put("STATUSMOVIMENTO", 0);
			ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
			ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
			ultimoJS.put("STATUSMOVIMENTO", 1);
			records.put(ultimoJS);
			// Resumo Planilha
			try {
				String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
				File file = new File(dirName1);
				try {
					String diretorio = dirName1;
					File file2 = new File(diretorio);
					File[] files = file2.listFiles();
					if (FileUtil.dirHasFiles(diretorio)) {
						for (File fl: files) {
							if (fl.isFile()){
								if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
									// ELIMINA ARQUIVO IMPORTADO
									file = new File(dirName1);
									if (file.exists()){
										FileUtil.deleteFile(dirName1+fl.getName());
									}
								}
							}
						}
					}
				} catch (Exception ee) {
					logger.logError(ee);
				}
			}catch (Exception e) {
				logger.logError(e);
			}
		}
	} catch (Exception ee) {
		logger.logError("EndpointA: ", ee);
	} finally {
	
		try {
			if (dbIOCont != null) {
				dbIOCont.closeConnection();
			}
			if (dbIODepara != null) {
				dbIODepara.closeConnection();
			}
		} catch (Exception ee) {}
	}
	return records;
}

class ttLote {
	public String lote;
	public ttLote(){}
	public ttLote(ttLote tt){
		lote=tt.lote;
	}
}

class ttArquivo {
	public String arquivo;
	public String abas;
	public ttArquivo(){}
	public ttArquivo(ttArquivo tt){
		arquivo=tt.arquivo;
		abas=tt.abas;
	}
}

class ttDocumento {
    public String documento;
	public double valorDocumento;
     public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
 		valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
	public String documento;
	public double valorJur;
	public int valorLido;
	public ttJuros(){}
	public ttJuros(ttJuros ttJ){
		documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
	}
}

class ttDesconto {
	public String documento;
	public double valorDesc;
	public int valorLido;
	public ttDesconto(){}
	public ttDesconto(ttDesconto ttD){
		documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
	}
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttFornecedor {
	public String nomeOrigem;
	public String contaMovimento;
	public ttFornecedor(){}
	public ttFornecedor(ttFornecedor ttF){
		nomeOrigem 	 = ttF.nomeOrigem;
		contaMovimento = ttF.contaMovimento;
	}
}


public String verificaSeparador(String separadorCsv, String dirName, String extensao, InoutLogger logger) {

	try {
		if(extensao.contains("CSV")) {

			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger);
				if (memFile.getFilename().toUpperCase().contains("CSV")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length < fields2.length) { separadorCsv = ","; break; }
								if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
		
		
		
		if(extensao.contains("TXT")) {
			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							String [] fields3 = line.split("\t");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
								if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
								if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
	
	}
	 catch(Exception xx) {}
	
	return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
	int validaCampo = -1;
	try {
		if (!roteiroIndice.optString(nomeCampo).equals("")) {
			try {
				validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
			}
			catch (Exception xx) { validaCampo = -1;}
		}
	}
	catch (Exception xx) {validaCampo = -1;}
	return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
	ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
	if (ttMov4 == null) {
		ttMov4 = new ttMovimentoPadrao(ttMov2);
		ttMov4.chave                    = chave;
		if(gerarApenasValorDocumento){
			ttMov4.valorDesconto            = 0;
			ttMov4.valorMulta               = 0;
			ttMov4.valorJuros               = 0;
		}
		ttMov4.classificacao            = classificacao;
		switch(complemento){
			case 1: ttMov4.complemento01 = textoComplemento; break;
			case 2: ttMov4.complemento02 = textoComplemento; break;
			case 3: ttMov4.complemento03 = textoComplemento; break;
			case 4: ttMov4.complemento04 = textoComplemento; break;
			case 5: ttMov4.complemento05 = textoComplemento; break;
			case 6: ttMov4.complemento06 = textoComplemento; break;
		}
		mapaVariavel.put(chave, ttMov4);
	}
	return mapaVariavel;
}

public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
	JSONObject response	= new JSONObject();
	String validar		= objIn.optString("validar");
	String [] validaArr	= validar.split(";");
	String changeIt		= "";
	String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
	String changeDate	= "dataMovimento";
	String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

	for (String parameter : validaArr) {
		response.put(parameter,	"");

		// String indiceAux = "";
		String indiceAux = getColunaAlternativa(parameter,	objIn);
		if (!indiceAux.equals("")) {
			if (changeDate.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						if (!dataStrAux.equals("")) {
							String dataMovAux = getCampoDate(dataStrAux);
							if (dataMovAux.contains("/")) {
								String dataAlternativa = getCampoDate(dataStrAux);
								response.put(parameter,	dataAlternativa);
								response.put("dataLote", dataAlternativa);
								changeIt = changeIt+";"+parameter;
								
								//feito pra que as proximas iteracoes ja tenham o dado atualizado
								objIn.put(parameter, dataAlternativa);
							}
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
				}
				
			} else if (changeValue.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try {
						int iAux  = Integer.parseInt(indiceAux);
						if(iAux >=0){
							double valorAlternativo = memFile.getDoubleField(iAux);
							response.put(parameter, valorAlternativo);
							changeIt = changeIt+";"+parameter;
							
							//feito pra que as proximas iteracoes ja tenham o dado atualizado
							objIn.put(parameter, valorAlternativo);
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

				}
				if (indiceAux.contains(";")) {
					double valorAlternativo = 0;
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux = Integer.parseInt(k);
							valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
						}
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }
					
					if (valorAlternativo != 0) {
						response.put(parameter, valorAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, valorAlternativo);
					}
				}
			} else if (changeText.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
				}
				if (indiceAux.contains(";")) {
					String textoAlternativo = "";
					
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux	 = Integer.parseInt(k);
							textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
							textoAlternativo = textoAlternativo.trim();
						}
						if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();
						
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }
					
					if (!textoAlternativo.equals("")) {
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					}
				}
			} else {
				response.put(parameter, "");
				objIn.put(parameter, "");
			}
		}
	}
	
	response.put("changeIt",	changeIt);
	return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

	if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
	if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
	if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
	if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
	if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}






















































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2021-0713205");
    js.put("idRoteiro", "a0A6R00000vgedq");
    js.put("idEmpresa", "a0q6R000007KE5zQAG");
    js.put("idContabilidade", "a091C00002PHEYE");
    js.put("CnpjContabilidade", "08.423.727/0001-93");
    js.put("CnpjEmpresa", "38.065.337/0001-50");
    js.put("fornecedor", "15");
    js.put("dataMovimento", "3");
    js.put("portador", "2");
    js.put("documentoNF", "");
    js.put("valorDocumento", "8");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "13");
    js.put("complemento02", "18");
    js.put("complemento03", "12");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Intelligence");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Cervantessp");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "ALTERDATA");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PRINCIPAL");
    js.put("Planilhas_Padroes", "Extrato_Itau_Excel;Extratos OFX;Extrato_Itau_Txt;Extrato_ITAU_PDF;Extrato_ItauConsolidado_PDF");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "OBSERVACOES");
    js.put("Rotulo_Complemento_02", "CONTA CONTABIL");
    js.put("Rotulo_Complemento_03", "HISTORICO");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 4 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2021) { //ROT-2021-0713205
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2020) { //ROT-2021-0713205
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("ACERTO/DIF")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("REAPR") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("APP")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("PIX TRANSF") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("DEP DIN") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TBI") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("TED") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomePortador.contains("8470686448")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8470686448") && nomeOrigem.contains("TBI")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DINHEIRO") && nomeOrigem.contains("CEI")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("TEF") && nomeOrigem.contains("CXE")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("1530PARANAENSE") && nomePortador.contains("8498529026") && nomeOrigem.contains("DOC") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("MAT") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("DOC")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("TRANSF") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("PIX")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("REND") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("APLIC")) {
        conta = "170";
        contaMovimento = "170";
    }
    if (nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("MATERI")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("ANTONIO") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("BRASILEIRAO") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("CASA") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("CLAUDIANA") && nomeOrigem.contains("SISPAG") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("CONST") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("DEPOSITO") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("EMPREENDIMENTO") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG") && nomeOrigem.contains("ESMERALDA") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("BEZERRA")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomePortador.contains("8498529026") && nomeOrigem.contains("GILSON")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG") && nomeOrigem.contains("GILSON") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("HERO") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("IMOVEIS") && nomeOrigem.contains("SISPAG")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG") && nomeOrigem.contains("IND") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("J") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("SOUSA") && nomeOrigem.contains("SISPAG")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("SISPAG") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("MAO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("MARCIA") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("MARIA")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("PITARELO") && nomeOrigem.contains("SISPAG")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("RENATO") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("WANDERLEY")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("DEP") && nomeOrigem.contains("TEC")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("DEP") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("TEC")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("1530PARANAENSE") && nomeOrigem.contains("TED") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("TED") && nomeOrigem.contains("4437COM") && nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("TED") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("COM") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("TED") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("2154IDEAL")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TED") && nomeOrigem.contains("4150GENILDO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TED") && nomeOrigem.contains("P") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("TED") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("AL") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TED") && nomeOrigem.contains("0000ESTANDILAU") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("TED") && nomeOrigem.contains("0000ESTANDILAU")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8470686448") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SALDO ANTERIOR")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("COB") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8470686448") && nomeOrigem.contains("MOV")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8470686448") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PIX") && nomeOrigem.contains("TRANSF")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("PIX") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8470686448") && nomeOrigem.contains("TRANSF")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8470686448") && nomeOrigem.contains("REND") && nomeOrigem.contains("APLIC") && tipoPlanilha.contains("EXTRATO")) {
        conta = "170";
        contaMovimento = "170";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8470686448") && nomeOrigem.contains("DEPOSITO") && nomeOrigem.contains("TEC")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TED") && nomeOrigem.contains("0000IRENISVALDO") && nomePortador.contains("8470686448")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8470686448") && nomeOrigem.contains("0000JOSE") && nomeOrigem.contains("TED")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("CXE") && nomeOrigem.contains("CHQ") && nomeOrigem.contains("DEP") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG TCC TRANSPORTES")) {
        conta = "550";
        contaMovimento = "550";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("DINH") && nomeOrigem.contains("DEP") && nomeOrigem.contains("CEI") && tipoPlanilha.contains("EXTRATO")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8498529026") && nomeOrigem.contains("COB") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DISP") && nomeOrigem.contains("MOV")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("COM") && nomeOrigem.contains("CON") && nomeOrigem.contains("SISPAG") && nomePortador.contains("8498529026")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("R") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("C")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8470686448") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PIX") && nomeOrigem.contains("TRANSF") && nomeOrigem.contains("ABC")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomeOrigem.contains("SISPAG TCC TRANSP GO LT") && tipoPlanilha.contains("EXTRATO")) {
        conta = "3448";
        contaMovimento = "3448";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG TCC TRANSP SP LT")) {
        conta = "559";
        contaMovimento = "559";
    }
    if (nomeOrigem.contains("SISPAG TCC TRANSP SP LT") && tipoPlanilha.contains("EXTRATO")) {
        conta = "559";
        contaMovimento = "559";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8470686448") && nomeOrigem.contains("SISPAG TCC CERV SP")) {
        conta = "559";
        contaMovimento = "559";
    }
    if (nomeOrigem.contains("0137FUNICELLO") && tipoPlanilha.contains("EXTRATO") && nomePortador.contains("8498529026") && nomeOrigem.contains("DOC")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (nomePortador.contains("8470686448") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("0413DELFINO") && nomeOrigem.contains("TED")) {
        conta = "15";
        contaMovimento = "15";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8470686448")) { //ROT-2021-0713205
        conta = "33";
        contaMovimento = "33";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8498529026")) { //ROT-2021-0713205
        conta = "8";
        contaMovimento = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 4 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2021) { //ROT-2021-0713205
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2020) { //ROT-2021-0713205
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 4 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2021) {
        conta = "Quando Mes Movimento menor ou igual a '04', Ano Movimento menor ou igual a '2021', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2020) {
        conta = "Quando Ano Movimento menor ou igual a '2020', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'TRANSFERENCIA', Fornecedor/Cliente contem '8470686448', CONTA MOVIMENTO SERA = '33'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'TRANSFERENCIA', Fornecedor/Cliente contem '8498529026', CONTA MOVIMENTO SERA = '8'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACERTO/DIF")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'ACERTO/DIF', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REAPR")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'REAPR', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TBI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TBI', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TBI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TBI', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DINHEIRO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'CEI', Fornecedor/Cliente contem 'DINHEIRO', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO ANTERIOR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SALDO ANTERIOR', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG TCC CERV SP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG TCC CERV SP', Portador contem '8470686448', CONTA MOVIMENTO SERA = '559'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CXE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'CXE', Fornecedor/Cliente contem 'TEF', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1530PARANAENSE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DOC', Fornecedor/Cliente contem '1530PARANAENSE', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAT") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DOC', Fornecedor/Cliente contem 'MAT', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PIX', Fornecedor/Cliente contem 'TRANSF', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REND") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'REND', Fornecedor/Cliente contem 'APLIC', Portador contem '8498529026', CONTA MOVIMENTO SERA = '170'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'MATERI', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'ANTONIO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'COMERCIO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASILEIRAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'BRASILEIRAO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'CASA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDIANA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'CLAUDIANA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONST") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'CONST', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'DEPOSITO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPREENDIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'EMPREENDIMENTO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESMERALDA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'ESMERALDA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEZERRA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'BEZERRA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILSON") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'GILSON', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HERO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'HERO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMOVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'IMOVEIS', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'IND', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'J', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUSA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'SOUSA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'MAO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'MARCIA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'MARIA', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PITARELO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'PITARELO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'RENATO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WANDERLEY") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'WANDERLEY', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TEC', Fornecedor/Cliente contem 'DEP', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TEC', Fornecedor/Cliente contem 'DEP', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1530PARANAENSE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '1530PARANAENSE', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4437COM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '4437COM', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem 'COM', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2154IDEAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '2154IDEAL', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4150GENILDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '4150GENILDO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem 'P', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem 'AL', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000ESTANDILAU") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '0000ESTANDILAU', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000ESTANDILAU") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '0000ESTANDILAU', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'MOV', Fornecedor/Cliente contem 'COB', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PIX', Fornecedor/Cliente contem 'TRANSF', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PIX', Fornecedor/Cliente contem 'TRANSF', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REND") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'REND', Fornecedor/Cliente contem 'APLIC', Portador contem '8470686448', CONTA MOVIMENTO SERA = '170'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TEC', Fornecedor/Cliente contem 'DEPOSITO', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000IRENISVALDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '0000IRENISVALDO', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000JOSE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '0000JOSE', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHQ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CXE")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DEP', Fornecedor/Cliente contem 'CHQ', Fornecedor/Cliente contem 'CXE', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0137FUNICELLO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DOC', Fornecedor/Cliente contem '0137FUNICELLO', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0413DELFINO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem '0413DELFINO', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DINH") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'CEI', Fornecedor/Cliente contem 'DEP', Fornecedor/Cliente contem 'DINH', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'MOV', Fornecedor/Cliente contem 'DISP', Fornecedor/Cliente contem 'COB', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '8498529026', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'CON', Fornecedor/Cliente contem 'COM', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'R', Fornecedor/Cliente contem 'C', Portador contem '8498529026', CONTA MOVIMENTO SERA = '15'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ABC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PIX', Fornecedor/Cliente contem 'TRANSF', Fornecedor/Cliente contem 'ABC', Portador contem '8470686448', CONTA MOVIMENTO SERA = '15'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("8470686448")) {
        conta = "33";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("8498529026")) {
        conta = "8";
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA CLASSIFICACAO")) {
        retornoClassificacao = "1.1.2.01�";
    }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADRAOOTTIMIZZA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem PADRAOOTTIMIZZA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("15"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 15, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("170"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 170, HISTORICO = Fornecedor/Cliente";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADRAOOTTIMIZZA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS
