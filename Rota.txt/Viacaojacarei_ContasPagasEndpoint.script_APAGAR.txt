{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
//TEMPLATE 16.05.2017
public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    JSONObject roteiroCRMPrincipal = getRoteiro();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();

    JSONObject objetoRoteiro = new JSONObject();
    objetoRoteiro.put("contabilidade", roteiroCRM.optString("contabilidade"));
    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String empresa = getNomeEmpresa();
    String codEmpresa = props.get(empresa + "_COD_EMPRESA");
    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");

    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";


    String backupDirName = dirName + "/Processado";

    boolean apagaExtrato        = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    String tipoEmail            = "";

    HashMap mapaVariavel		= new HashMap();
    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();

    String cruzaExtrato    	= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";

    boolean geraFiscal = false;
    String loteFiscal  = "";

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida   = "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote				= "";
    boolean enviouEmail 	= false;
    boolean primeiraVezDuplicata = true;
    boolean primeiroArquivo 			= true;
    String regraContaMovimento 			= "";
    String regraHistorico 				= "";
	String separadorCsv	= "";
    String tipoPlanilha = "";


    try {

        String extensao = "";
        for(int extArquivo = 0; extArquivo < 15; extArquivo++){
            if(extArquivo == 0) extensao = ".ofx,.OFX";
            if(extArquivo == 1) extensao = ".ofx,.OFX";
            if(extArquivo == 2) extensao = ".ofx,.OFX";
            if(extArquivo == 3) extensao = ".csv,.CSV";
            if(extArquivo == 4) extensao = ".csv,.CSV";
            if(extArquivo == 5) extensao = ".csv,.CSV";
            if(extArquivo == 6) extensao = ".xlsx,.XLSX";
            if(extArquivo == 7) extensao = ".xlsx,.XLSX";
            if(extArquivo == 8) extensao = ".xlsx,.XLSX";
            if(extArquivo == 9) extensao = ".txt,.TXT";
            if(extArquivo == 10) extensao = ".txt,.TXT";
            if(extArquivo == 11) extensao = ".txt,.TXT";
			if(extArquivo == 12) extensao = ".pdf,.PDF";
            if(extArquivo == 13) extensao = ".pdf,.PDF";
            if(extArquivo == 14) extensao = ".pdf,.PDF";


            for (int porAba = 0; porAba < 60; porAba++) {



                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRM.optString("Abas_Especificas");
				abasEspecificas 		= abasEspecificas.replace(",",";");
				if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba))) apagaArquivo = null;
                }

				if(extensao.contains("CSV")){
					FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
					fileLoader2.loadFiles();
                    for (MemoryFile memFile: fileLoader2.getMemFiles()) {


						if (memFile.getFilename().toUpperCase().contains("CSV")) {

							while (memFile.hasNextLine()) {

								try {
									String line = memFile.nextLine();
									line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");

									if (line.length() < 10) continue;

									String [] fields1 = line.split(";");
									String [] fields2 = line.split(",");
									if(fields1.length > 0 && fields2.length > 0){
										if(fields1.length < fields2.length) { separadorCsv = ","; break; }
										if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
									}
								}
								catch(Exception xx) {}
							}
							break;
						}


                    }
				}

                FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                fileLoader.loadFiles();

                for (MemoryFile memFile: fileLoader.getMemFiles()) {

					putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);

                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;

                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;
					int idataFake		= -1;

                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred


                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData			= "";
					boolean zerar			= true;


                    if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
					if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
                    nomeArquivo = memFile.getFilename();

                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

					 if(primeiroArquivo) {
						limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
						primeiroArquivo = false;
					}

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRM.optString("Cruza_Extrato_com_Extrato").toUpperCase();

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";


                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    //########################################################################

                    // COLOCAR AQUI funcao para carregar variaveis do cliente
                    // CNPJ, EMAIL, contas fixas, etc.


                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================

					boolean aceitaCpf = true;


                    JSONObject objetoParametro = new JSONObject();

                    if (tipoPlanilha.equals("MOVIMENTO")) {
						roteiroCRM = getRoteiro();

						try {inomeOrigem     = getIndiceRoteiro("fornecedor", roteiroCRM);}		catch (Exception xx) {inomeOrigem		= -1;}
						try {idataMovimento  = getIndiceRoteiro("dataMovimento", roteiroCRM);}	catch (Exception xx) {idataMovimento	= -1;}
						try {inomePortador   = getIndiceRoteiro("portador", roteiroCRM);}		catch (Exception xx) {inomePortador		= -1;}
						try {idocumento      = getIndiceRoteiro("documentoNF", roteiroCRM);}	catch (Exception xx) {idocumento		= -1;}
						try {ivalorDocumento = getIndiceRoteiro("valorDocumento", roteiroCRM);}	catch (Exception xx) {ivalorDocumento	= -1;}
						try {ivalorJuros     = getIndiceRoteiro("valorJuros", roteiroCRM);}		catch (Exception xx) {ivalorJuros		= -1;}
						try {ivalorDesconto  = getIndiceRoteiro("valorDesconto", roteiroCRM);}	catch (Exception xx) {ivalorDesconto	= -1;}
						try {ivalorMulta     = getIndiceRoteiro("valorMulta", roteiroCRM);}		catch (Exception xx) {ivalorMulta		= -1;}
						try {icodCcOrigem    = getIndiceRoteiro("centroCusto", roteiroCRM);}	catch (Exception xx) {icodCcOrigem		= -1;}
						try {ivalorPagamento = getIndiceRoteiro("valorPagamento", roteiroCRM);}	catch (Exception xx) {ivalorPagamento	= -1;}
						try {icomplemento01  = getIndiceRoteiro("complemento01", roteiroCRM);}	catch (Exception xx) {icomplemento01	= -1;}
						try {icomplemento02  = getIndiceRoteiro("complemento02", roteiroCRM);}	catch (Exception xx) {icomplemento02	= -1;}
						try {icomplemento03  = getIndiceRoteiro("complemento03", roteiroCRM);}	catch (Exception xx) {icomplemento03	= -1;}
						try {icomplemento04  = getIndiceRoteiro("complemento04", roteiroCRM);}	catch (Exception xx) {icomplemento04	= -1;}
						try {icomplemento05  = getIndiceRoteiro("complemento05", roteiroCRM);}	catch (Exception xx) {icomplemento05	= -1;}
						try {icomplemento06  = getIndiceRoteiro("complemento06", roteiroCRM);}	catch (Exception xx) {icomplemento06	= -1;}
                        try {idataFake		 = getIndiceRoteiro("dataFake", roteiroCRM);}		catch (Exception xx) {idataFake			= -1;}
                        try {icpfCnpj		 = getIndiceRoteiro("cpfCnpj", roteiroCRM);}		catch (Exception xx) {icpfCnpj			= -1;}
 						zerar 				 = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                    }

					try{
						while (memFile.hasNextLine()) {

							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);

								if (cont < 10)  putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);    


								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////


								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								if (nomeArquivo.toUpperCase().contains(".OFX")) {
									tipoPlanilha = "EXTRATO-OFX";     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);
									JSONObject jDados = new JSONObject();
									jDados.put("CODEMPRESA", codEmpresa);
									jDados.put("TIPOLANCAMENTO", tipoLancamento);
									jDados.put("NOMEEMPRESA",    nomeEmpresa);
									jDados.put("NOMEARQUIVO",    nomeArquivo);
									//jDados.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
									readOFXDefault(memFile, jDados, dbIOCont, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									break;
								} // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
								// ----------------------------------------------------------------------------------------------------------
								if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									// variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());
									
									
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									} 
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}
								

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
								if(roteiroCRM.optString("erpContabilidade").contains("QUESTOR")){
									if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").equals("BAIXAR") && memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").equals("CHAVE DUPLICATA") && memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").equals("RAZAO SOCIAL")) {
										tipoPlanilha = "DUPLICATA";
										if(primeiraVezDuplicata) {
											limparIODuplicata(codEmpresa, dbIOCont, logger);
										}
										JSONObject jIndices = new  JSONObject();

										jIndices.put("IBAIXAR", 0);
										jIndices.put("ICODIGOFORNECEDOR", 1);
										jIndices.put("INOMEORIGEM", 2);
										jIndices.put("ICHAVEDUPLICATA", 3);
										jIndices.put("IDUPLICATA", 4);
										jIndices.put("ISERIE", 5);
										jIndices.put("IPARCELA", 6);
										jIndices.put("IVENCIMENTO", 7);
										jIndices.put("IVALORPARCELA", 8);
										jIndices.put("ISITUACAO", 10);
										jIndices.put("IVALORJUROS", -1);
										jIndices.put("IVALORDESCONTO", -1);
										jIndices.put("IVALORMULTA", -1);

										jIndices.put("CODEMPRESA", codEmpresa);

										primeiraVezDuplicata = inserirIODuplicata(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}


								if(roteiroCRM.optString("erpContabilidade").contains("DOMINIO")){

									if (line.contains("DOCUMENTO") &&
										line.contains("EMISSAO") &&
										line.contains("V. PARCELA") &&
										line.contains("DEVOLUCAO") &&
										line.contains("SALDO") &&
										line.contains("SITUACAO")) {

										tipoPlanilha = "DUPLICATA-DOMINIO";

										if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

										JSONObject jIndices = new JSONObject();
										if(tipoLancamento.equals("PAGAR")){
											jIndices.put("IVENCIMENTO", 8);
											jIndices.put("INOMEORIGEM", 4);
											jIndices.put("IDUPLICATA", 4);
											jIndices.put("IVALORPARCELA", 10);
										}
										if(tipoLancamento.equals("RECEBER")){
											jIndices.put("IVENCIMENTO", 9);
											jIndices.put("INOMEORIGEM", 4);
											jIndices.put("IDUPLICATA", 4);
											jIndices.put("IVALORPARCELA", 12);
										}


										jIndices.put("CODEMPRESA", codEmpresa);
										jIndices.put("TIPOPLANILHA", tipoPlanilha);

										primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);

										break;
									}
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (line.contains("CODIGO") && line.contains("SERIE") && (line.contains("FORNECEDOR") || line.contains("CLIENTE")) && line.contains("VALOR CONTABIL") && line.contains("BASE CALCULO")) {

										tipoPlanilha = "DUPLICATA-DOMINIO-SERIE";

										if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

										JSONObject jIndices = new JSONObject();

										jIndices.put("ICODIGOFORNECEDOR", 9);
										jIndices.put("INOMEORIGEM", 12);
										jIndices.put("IDUPLICATA", 4);
										jIndices.put("ISERIE", 6);
										jIndices.put("ICHAVEDUPLICATA", 8);

										jIndices.put("CODEMPRESA", codEmpresa);
										jIndices.put("TIPOPLANILHA", tipoPlanilha);

										primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha01(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
									if(line.contains("SEGMENTO") && line.contains("SERIE") && line.contains("VALOR CONTABIL") && (line.contains("FORNECEDOR") || line.contains("CLIENTE")) && line.contains("EMISSAO")){
										tipoPlanilha = "DUPLICATA-DOMINIO-SEG";

										if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);
										JSONObject jIndices = new  JSONObject();

										jIndices.put("ICODIGOFORNECEDOR", 21);
										jIndices.put("INOMEORIGEM", 21);
										jIndices.put("IDUPLICATA", 12);
										jIndices.put("ISERIE", 5);
										jIndices.put("ISEGMENTO", 17);
										jIndices.put("ICHAVEDUPLICATA", 0);
										jIndices.put("IVALORPARCELA", 15);
										jIndices.put("CODEMPRESA", codEmpresa);
										jIndices.put("TIPOPLANILHA", tipoPlanilha);

										primeiraVezDuplicata = inserirIODuplicata_DominioPlanilhaSegmento(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}
								// ----------------------------------------------------------------------------------------------------------

								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								JSONObject jDadosObj = new JSONObject();
								tipoPlanilha = getTipoPlanilha(line, tipoPlanilha, nomeArquivo, jDadosObj);
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									if(roteiroCRM.optString("fornecedor").length() < 3)		{try {inomeOrigem     = getIndiceRoteiro("fornecedor", roteiroCRM);}	catch (Exception xx) {inomeOrigem		= -1;}}
									if(roteiroCRM.optString("dataMovimento").length() < 3)	{try {idataMovimento  = getIndiceRoteiro("dataMovimento", roteiroCRM);}	catch (Exception xx) {idataMovimento	= -1;}}
									if(roteiroCRM.optString("portador").length() < 3)		{try {inomePortador   = getIndiceRoteiro("portador", roteiroCRM);}		catch (Exception xx) {inomePortador		= -1;}}
									if(roteiroCRM.optString("documentoNF").length() < 3)	{try {idocumento      = getIndiceRoteiro("documentoNF", roteiroCRM);}	catch (Exception xx) {idocumento		= -1;}}
									if(roteiroCRM.optString("valorDocumento").length() < 3)	{try {ivalorDocumento = getIndiceRoteiro("valorDocumento", roteiroCRM);}catch (Exception xx) {ivalorDocumento	= -1;}}
									if(roteiroCRM.optString("valorJuros").length() < 3)		{try {ivalorJuros     = getIndiceRoteiro("valorJuros", roteiroCRM);}	catch (Exception xx) {ivalorJuros		= -1;}}
									if(roteiroCRM.optString("valorDesconto").length() < 3)	{try {ivalorDesconto  = getIndiceRoteiro("valorDesconto", roteiroCRM);}	catch (Exception xx) {ivalorDesconto	= -1;}}
									if(roteiroCRM.optString("valorMulta").length() < 3)		{try {ivalorMulta     = getIndiceRoteiro("valorMulta", roteiroCRM);}	catch (Exception xx) {ivalorMulta		= -1;}}
									if(roteiroCRM.optString("centroCusto").length() < 3)	{try {icodCcOrigem    = getIndiceRoteiro("centroCusto", roteiroCRM);}	catch (Exception xx) {icodCcOrigem		= -1;}}
									if(roteiroCRM.optString("valorPagamento").length() < 3)	{try {ivalorPagamento = getIndiceRoteiro("valorPagamento", roteiroCRM);}catch (Exception xx) {ivalorPagamento	= -1;}}
									if(roteiroCRM.optString("complemento01").length() < 3)	{try {icomplemento01  = getIndiceRoteiro("complemento01", roteiroCRM);}	catch (Exception xx) {icomplemento01	= -1;}}
									if(roteiroCRM.optString("complemento02").length() < 3)	{try {icomplemento02  = getIndiceRoteiro("complemento02", roteiroCRM);}	catch (Exception xx) {icomplemento02	= -1;}}
									if(roteiroCRM.optString("complemento03").length() < 3)	{try {icomplemento03  = getIndiceRoteiro("complemento03", roteiroCRM);}	catch (Exception xx) {icomplemento03	= -1;}}
									if(roteiroCRM.optString("complemento04").length() < 3)	{try {icomplemento04  = getIndiceRoteiro("complemento04", roteiroCRM);}	catch (Exception xx) {icomplemento04	= -1;}}
									if(roteiroCRM.optString("complemento05").length() < 3)	{try {icomplemento05  = getIndiceRoteiro("complemento05", roteiroCRM);}	catch (Exception xx) {icomplemento05	= -1;}}
									if(roteiroCRM.optString("complemento06").length() < 3)	{try {icomplemento06  = getIndiceRoteiro("complemento06", roteiroCRM);}	catch (Exception xx) {icomplemento06	= -1;}}
									if(roteiroCRM.optString("dataFake").length() < 3)		{try {idataFake		  = getIndiceRoteiro("dataFake", roteiroCRM);}		catch (Exception xx) {idataFake			= -1;}}
									if(roteiroCRM.optString("cpfCnpj").length() < 3)		{try {icpfCnpj		  = getIndiceRoteiro("cpfCnpj", roteiroCRM);}		catch (Exception xx) {icpfCnpj			= -1;}}
									zerar = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;



								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
								if(line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase()) &&
								   line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase()) &&
								   line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase()) &&
								   roteiroCRM.optString("fornecedor").length() > 4) {

									for (int i = 0; i < memFile.getFieldsSize(); i++) {
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) continue;

										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase())) idataMovimento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataFake")).toUpperCase())) idataFake = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase())) inomeOrigem = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase())) ivalorDocumento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorPagamento")).toUpperCase())) ivalorPagamento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorJuros")).toUpperCase())) ivalorJuros = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDesconto")).toUpperCase())) ivalorDesconto = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorMulta")).toUpperCase())) ivalorMulta = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("centroCusto")).toUpperCase())) icodCcOrigem = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("portador")).toUpperCase())) inomePortador = i;


										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("documentoNF")).toUpperCase())) idocumento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento01")).toUpperCase())) icomplemento01 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento02")).toUpperCase())) icomplemento02 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento03")).toUpperCase())) icomplemento03 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento04")).toUpperCase())) icomplemento04 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento05")).toUpperCase())) icomplemento05 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento06")).toUpperCase())) icomplemento06 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento07")).toUpperCase())) icomplemento07 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento08")).toUpperCase())) icomplemento08 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento09")).toUpperCase())) icomplemento09 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento010")).toUpperCase())) icomplemento10 = i;
									}
								}

								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(")) {

									if(idataMovimento >= 0) {
										try {
											Date dt = memFile.getDateField(idataMovimento);
											dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
											dataLote = DateUtil.dateToString(dt, "yyyy-MM");
										} catch (Exception dt1) {
											try {
												Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
												dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
												dataLote = DateUtil.dateToString(dt, "yyyy-MM");
											} catch (Exception dt2) {
												try {
													String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
													Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
													dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
													dataLote = DateUtil.dateToString(dt, "yyyy-MM");
												} catch (Exception dt2) { dataMovimento = ""; }
											}
										}
									}
									zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;


									cpfCnpj	= getCampoString(cpfCnpj,	icpfCnpj, line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);

									if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


									if(ivalorDocumento >=0){
										try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
										catch (Exception vlrd) { valorDocumento = 0; }
									}

									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}

									if(ivalorPagamento >=0){
										try{valorPagamento	= Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

									if(ivalorDocumento < 0 && valorDocumento == 0 && valorPagamento > 0){
										valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
									}
									if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
										if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
										if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
									}

									if(idataFake >=0 ){
										try {Date dtFake = memFile.getDateField(idataFake);}
										catch (Exception dtFake1) {
											try {Date dtFake = memFile.getDateField(idataFake, "dd/MM/yyyy");}
											catch (Exception dtFake2) {logger.logDebug(">>> Linha Ignorada: " + dtFake2); continue;}
										}
									}
									if (valorDocumento == 0) continue;

								}


								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {

									if(line.startsWith("---")) continue;
									if(line.startsWith("RAZAO") && line.contains("FINANCEIRO")) continue;
									if(line.startsWith("EMPRESA(S):")) continue;
									if(line.startsWith("TIPO DE DESP")) continue;
									if(line.startsWith("TOTAL")) continue;
									if(line.startsWith("PAGAMENTO/RECEBIMENTO")) continue;
									if(line.startsWith("BGMRODOTEC")) continue;
								
									if(line.contains("DOCUMENTO") && line.contains("OBSERVACOES")) continue;
									
									
									if(line.charAt(1) == '.' && line.charAt(9) == '-') {
										complemento01 = getStringTXT(roteiroCRM.optString("complemento01").toUpperCase(), line, objetoParametro);
										continue;
									}

									dataMovimento = getDateTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro);
									//if (dataMovimento.equals("")) continue;

									//quando nao encontra data joga a linha como portador e complemento03
									try {
										Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
										dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
										dataLote = DateUtil.dateToString(dt, "yyyy-MM");

										nomePortador  = getStringTXT(roteiroCRM.optString("portador").toUpperCase(), line, objetoParametro);
										complemento03 = getStringTXT(roteiroCRM.optString("complemento03").toUpperCase(), line, objetoParametro);

										cont++;
									} catch (Exception xx) {
										nomePortador  = "";
										complemento03 = "";

										nomePortador  = line;
										complemento03 = line;
									}

									complemento02 = stringNormalizer(getStringTXT(roteiroCRM.optString("complemento02").toUpperCase(), line, objetoParametro), true).replace("/[\u0300-\u036f]/g", "");
									
									complemento04 = getStringTXT(roteiroCRM.optString("complemento04").toUpperCase(), line, objetoParametro);
									complemento05 = getStringTXT(roteiroCRM.optString("complemento05").toUpperCase(), line, objetoParametro);
									complemento06 = getStringTXT(roteiroCRM.optString("complemento06").toUpperCase(), line, objetoParametro);
									complemento07 = getStringTXT(roteiroCRM.optString("complemento07").toUpperCase(), line, objetoParametro);
									complemento08 = getStringTXT(roteiroCRM.optString("complemento08").toUpperCase(), line, objetoParametro);
									complemento09 = getStringTXT(roteiroCRM.optString("complemento09").toUpperCase(), line, objetoParametro);
									complemento10 = getStringTXT(roteiroCRM.optString("complemento10").toUpperCase(), line, objetoParametro);
									cpfCnpj		  = getStringTXT(roteiroCRM.optString("cpfCnpj").toUpperCase(), line, objetoParametro);

									documento     = getStringTXT(roteiroCRM.optString("documentoNF").toUpperCase(), line, objetoParametro);
									codCcOrigem   = getStringTXT(roteiroCRM.optString("centroCusto").toUpperCase(), line, objetoParametro);
									nomeOrigem    = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);


									valorDocumento = getDoubleTXT(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									valorJuros	   = getDoubleTXT(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

								}

								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								//---~---~---~---~---~---~-

								if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();
								nomeOrigem = stringNormalizer(nomeOrigem, true);
								
								
								complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

								//##########################################################

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								nomeOrigem = stringNormalizer(nomeOrigem, true);

								//if(dataMovimento.equals("")) continue;

								if(!tipoPlanilha.equals("MOVIMENTO")) cont++;

								int restoLinha = 0;
								restoLinha = (cont % 100);
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);

								aceitaCpf = false; // pagamentos nao deve ser feito a PF (Kleber)

								if(!cpfCnpj.equals("")){
									if(roteiroCRM.optString("cnpjSomenteNumeros").toUpperCase().contains("TRUE")) {
										if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, true, false);
										else			cpfCnpj = trataCpfCnpj(cpfCnpj);
									}
									if(roteiroCRM.optString("cnpjSomenteNumeros").toUpperCase().contains("FALSE")) {
										if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, false, false);
										else			cpfCnpj = trataCpfCnpj(cpfCnpj, false, true);
									}
								}
								complemento04 = cpfCnpj;

								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								lote = nomeEmpresa + "_" + codEmpresa + "_" + nomeArquivo  + "_" + dataLote + "_" + tipoLancamento;
								chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;

								if(chave.length() > 200)  chave = chave.substring(0, 200);
								String key = chave  + "-CTB";

								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.documento         = documento;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.nomePortador      = "";
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.nomeOrigem        = nomeOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento01     = complemento01;
									ttMov2.complemento02     = complemento02;
									ttMov2.complemento03     = "";
									ttMov2.complemento04     = complemento04;
									ttMov2.complemento05     = complemento05;
									ttMov2.complemento06     = complemento06;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(porAba);
								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------



								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								ttMov2.nomePortador     = ttMov2.nomePortador    +  nomePortador;
								
								if (ttMov2.complemento01.contains("TERCEIROS")) ttMov2.complemento03    = ttMov2.complemento03   + " " + complemento03;
								else ttMov2.complemento03    = ttMov2.complemento03 + complemento03;

								//limpa os espacos em branco no meio do portador e complemento03
								for(int i = 0; i < 15; i++) {
									ttMov2.nomePortador = ttMov2.nomePortador.replaceAll("  "," ");
									ttMov2.complemento03 = ttMov2.complemento03.replaceAll("  "," ");
								}

								ttMov2.nomePortador = ttMov2.nomePortador.trim();
								ttMov2.complemento03 = ttMov2.complemento03.trim();

								if ((ttMov2.complemento01.contains("DARF") && ttMov2.complemento01.contains("TERCEIRO")) || (ttMov2.complemento01.contains("GPS") && ttMov2.complemento01.contains("TERCEIROS"))) ttMov2.documento = cutString(ttMov2.complemento03, "NF");

								mapaVariavel.put(key,ttMov2);

							} catch (Exception e) {
								logger.logError("EndpointA:", e);
							}
						}
					}finally {
								
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
								
					}

                } // while
            }
			try{
				FileUtil.moveToDir(dirName+"/"+nomeArquivo, backupDirName);
			}catch(Exception ee){}

        }
    } catch (Exception ee) {
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        logger.logError("EndpointA: ", ee);
    }

    // --------------------------------------------------------------------------------------------------------------------
    if (!tipoPlanilha.contains("EXTRATO") && (cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) ||
        (tipoPlanilha.contains("EXTRATO") && (cruzaExtrato.contains("FALSE") || cruzaExtrato.contains("FALSO"))) ||
        (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE"))) {

        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (!tipoPlanilha.contains("EXTRATO") && (cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO"))) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento);
                    recMov.put("CONTAMOVIMENTO", "");
                    recMov.put("CONTAPORTADOR", "");
                    recMov.put("CONTLINHATEXTO", String.valueOf(t));

                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);

                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;

                }
            }
        }
        catch (Exception xx) {
            logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    } // if tipo planilha nao igual extrato
    // --------------------------------------------------------------------------------------------------------------------

    StringBuilder txtFiscal     = new StringBuilder();
    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    String nomePortadorAnterior = "";

    int contRegra = 0;
    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			if(ttMov.valorDocumento == 0) continue;
            if(ttMov.dataMovimento.equals("")) continue;

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

			if (ttMov.tipoPlanilha.contains("EXTRATO")) ttMov.complemento03 = ttMov.tipoPlanilha;


			classificaPlano     = roteiroCRM.optString("classificaPlano");
			classificaFornec    = roteiroCRM.optString("classificaFornec");
			cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
			Cruza_Extrato_com_Extrato = roteiroCRM.optString("Cruza_Extrato_com_Extrato").toUpperCase();
			String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();

            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;

            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;


            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem    = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();
                    jaCruzou = true;

                }

            }

            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();

                }

            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

            contaJuros        = roteiroCRMPrincipal.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRMPrincipal.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRMPrincipal.optString("contaFixaDebito");
            contaDesconto     = roteiroCRMPrincipal.optString("contaFixaDesconto");
            contaMulta        = roteiroCRMPrincipal.optString("contaFixaMulta");



            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }

            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                          ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                          ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			//remover zeros a esquerda
			ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

			if(ttMov.tipoPlanilha.contains("MOVIMENTO")){
				ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
				ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
				ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
				ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
				ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
				ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
				ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
				ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
				ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
				ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
				ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
				ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
				ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);
				
				histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
				histobj.put("nomePortador", ttMov.nomePortador);

				ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
				ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
				ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
				ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
				ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
				ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
				ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
				ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
				ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
				ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
				ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
				ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
				ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

				histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
				histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
				histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
				histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
				histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
				histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
				histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
				histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
				histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
				histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
				histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
				histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());
			}
            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE") && contaMovimento.equals("")) contaMovimento = ttMov.cpfCnpj; else ttMov.cpfCnpj = "";

            regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


            double valorPrincipal = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }

            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil    		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            if (contaPortador.equals("") && !ttMov.nomePortador.equals("") && !nomePortadorAnterior.equals(ttMov.nomePortador)) {
                txtPortador.append(roteiroCRMPrincipal.optString("contabilidade"));
                txtPortador.append(";");
                txtPortador.append(roteiroCRMPrincipal.optString("idRoteiro"));
                txtPortador.append(";");
                txtPortador.append(nomeEmpresa);
                txtPortador.append(";");
                txtPortador.append(ttMov.tipoLancamento);
                txtPortador.append(";");
                txtPortador.append(ttMov.nomePortador);
                txtPortador.append("\r\n");
                nomePortadorAnterior = ttMov.nomePortador;
                geraRegraPortador = true;
            }




            boolean regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

            // FAXER INVERTE CONTA DIRETO NO EXPORTADOR (GERA ARQUIVO)
            /*if (contaMovimento.contains("INVERTE") || contaPortador.contains("INVERTE")) {
                contaInvertida   = contaMovimento.replaceAll("INVERTE","");
                contaMovimento   = contaPortador.replaceAll("INVERTE","");
                contaPortador    = contaInvertida.replaceAll("INVERTE","");
            }*/

            //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaMovimento)
                .queryUnique();

                if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                    dbIOCont.insert("IO_PLANOCONTA")
                    .fields("CODEMPRESA,CONTACONTABIL")
                    .param(codEmpresa)
                    .param(contaMovimento)
                    .execute();
                }
            }

            if (contaMovimento.equals("")){
                try {
                    JSONObject ret = buscaConta(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, ttMov.tipoLancamento, logger, dbIOCont);
                    if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
                    if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
                    if (contaMovimento == null || contaMovimento.trim().length() == 0) {
                        contaMovimento = "";
                    }
                }
                catch  (Exception Ee) {continue;}
            }


            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;
			if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

            if (!contaMovimento.equals("")){

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO,CONTAANALITICA")
                .param(codEmpresa)
                .param(contaMovimento)
                .queryUnique();

                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {

                    descricaoPlanoContaMovimento = descricaoPlano.optString("DESCRICAOPLANO").replaceAll("EAMP;","&").replaceAll(";","").trim();

                    if (!classificaFornec.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                        razaoSocial = descricaoPlano.optString("DESCRICAOPLANO").trim();
                    }

                    // Joga no nome do fornecedor o que esta no plano de contas
                    if (!classificaPlano.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
                        ttMov.nomeOrigem = descricaoPlano.optString("DESCRICAOPLANO").trim();
                    }
                    if (descricaoPlano.optString("DESCRICAOPLANO").length() < 2 || descricaoPlano.optString("DESCRICAOPLANO").equals("") || descricaoPlano.optString("DESCRICAOPLANO") == null) {
                        eFornecedor = true;
                    }
                }

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }

            }

            if (!contaPortador.equals("")){
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO,CONTAANALITICA")
                .param(codEmpresa)
                .param(contaPortador)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoPlanoContaPortador = descricaoPlano.optString("DESCRICAOPLANO").replaceAll("EAMP;","&").replaceAll(";","").trim();
                }
            }


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = contaMovimento;
                ttMov.contaCredito = contaPortador;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = contaMovimento;
                ttMov.contaDebito   = contaPortador;
            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);



            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                           ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                           ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);

            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());


            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                          ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                          ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
            }


            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                                       ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                                       ttMov.nomeArquivo, ttMov.centroCusto, "");
            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();


            if (!ttMov.contaDebito.equals("")){

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(ttMov.contaDebito)
                .queryUnique();

                if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                    dbIOCont.insert("IO_PLANOCONTA")
                    .fields("CODEMPRESA,CONTACONTABIL")
                    .param(codEmpresa)
                    .param(ttMov.contaDebito)
                    .execute();
                }
            }

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------

            JSONObject jDescricaoDupl = new JSONObject();
			if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

            if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");


                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                        txtFiscal.append(jDescricaoDupl.optString("CODEMPRESA"));
                        txtFiscal.append(";");
                        txtFiscal.append("1;");
                        txtFiscal.append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("VALORFINAL"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
                        txtFiscal.append(";");
                        txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO"));
                        txtFiscal.append("\r\n");

                        geraFiscal = true;
                        loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                        if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                        ttMov.tipoPlanilha = "NAO LER";
                        mapaVariavel.put(key,ttMov);
                        continue;
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {


					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");



					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-" +  jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-DUPLICATA-DOMINIO-SEG" + "-" + ttMov.documento + "-";

					String serie = "";
					String especie = "";
					double valorSegmento = 0;

					JSONArray recordsDup = new JSONArray();

					try {
						String sql = "SELECT SERIE, CHAVEDUPLICATA, VALORPARCELA, CHAVE FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? ";
						recordsDup = dbIOCont.sql(sql)
						  .setFields("SERIE, CHAVEDUPLICATA, VALORPARCELA, CHAVE")
						  .param(chaveDuplicata + "%")
						  .debug(logger)
						  .query();


					} catch (Exception e1) {
						logger.logDebug("ERROR: " + e1.getMessage());
					}

					/* EXEMPLO DE COMO TEM QUE SAIR

					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject();
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);

					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");

					}

					double valorSaldoDuplicata = 0;
                    double valorSomaSegmentos  = 0;

                    // soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos
                    // continua sendo o valor origial (total) da nota fiscal
                    // utilizado para achar a proporcao do valor para cada segmento
                    for (int seg =0; seg<recordsDup.length(); seg ++) {
                        recordsDupSeg =  recordsDup.optJSONObject(seg);
                        if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                            valorSomaSegmentos = valorSomaSegmentos + recordsDupSeg.optDouble("VALORPARCELA");
                        }
                    }

                    boolean leuDuplicata = false;

                    // valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					if (!especie.equals("") || !serie.equals("")) {

					   if (ttMov.valorDocumento <= valorSaldoDuplicata ) {

							for (int seg =0; seg<recordsDup.length(); seg ++) {

								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";

								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
                                    if (segmento.contains("-")) segmento = segmento.substring(segmento.lastIndexOf("-")+1).trim();

								}
								//recebidas 5200
								String codContabil = "5100";
								String delimitador = "|";
								String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + "0" + delimitador;

								if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
									txtFiscal.append(tipoSerie);
									txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
									txtFiscal.append(delimitador);
									txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
									txtFiscal.append(delimitador);
									txtFiscal.append(ttMov.dataMovimento);
									txtFiscal.append(delimitador);
									txtFiscal.append(String.format("%.2f", (ttMov.valorDocumento * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
									txtFiscal.append(delimitador);
									if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
									if (seg > 0)  txtFiscal.append("0");
									txtFiscal.append(delimitador);
									if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
									if (seg > 0)  txtFiscal.append("0");
									txtFiscal.append(delimitador);
									if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
									if (seg > 0)  txtFiscal.append("0");
									txtFiscal.append("||||||||||");
                                    txtFiscal.append(segmento);
									txtFiscal.append("|");
                                    txtFiscal.append("\r\n");


									if (ttMov.valorDocumento > ttMov.valorDesconto) {
										//recebidas 5210
										codContabil = "5110";
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaPortador);
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", (ttMov.valorDocumento * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("5");
										txtFiscal.append(delimitador);
										txtFiscal.append("PG BOLETO "+ttMov.documento + " " + ttMov.nomeOrigem);
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									if (ttMov.valorDesconto > 0  && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaPortador);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaDesconto);
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("5");
										txtFiscal.append(delimitador);
										txtFiscal.append("PG BOLETO "+ttMov.documento + " " + ttMov.nomeOrigem);
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaJuros);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaPortador);
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("5");
										txtFiscal.append(delimitador);
										txtFiscal.append("PG BOLETO "+ttMov.documento + " " + ttMov.nomeOrigem);
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaJuros);
										txtFiscal.append(delimitador);
										txtFiscal.append(contaPortador);
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("5");
										txtFiscal.append(delimitador);
										txtFiscal.append("PG BOLETO "+ttMov.documento + " " + ttMov.nomeOrigem);
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}



									geraFiscal = true;
									loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
									eFornecedor = false;
									leuDuplicata = true;

								}
							}
                           if (leuDuplicata) continue;
						} else {

							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
						}
					}
					else {
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
							jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
							eFornecedor = true;
						}
					}
				}

                if (eFornecedor) {
                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
                        String valorFinal = String.format("%.2f", ttMov.valorDocumento);

						jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
						jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
						jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    	jDescricaoDupl.put("VALORFINAL",  valorFinal);

                        txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
                        txtFornecedor.append("\r\n");


                        geraFiscal = true;
                        loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                        ttMov.tipoPlanilha = "NAO LER";
                        mapaVariavel.put(key,ttMov);
                        continue;


                    }
                }
            }

            chave = ttMov.chave;
            chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			chave = chave + "-CTB";
			ttMov.chave = ttMov.chave + "-CTB";

            String keyAc = chave;

            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
				ttMov3.documento       = "";
            }
			if (ttMov3.documento.equals("")) {
				ttMov3.documento         = ttMov.documento;
			} else ttMov3.documento = ttMov3.documento + ", " + ttMov.documento;

            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            ttMov3.chave = chave;

            if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;
            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);

            if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                }
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chave             = chave;
                ttMov2.chaveExtrato      = "";
				ttMov2.documento         = ttMov3.documento;
                ttMov2.classificacao     = ttMov.classificacao;
                ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador          = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR")){
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }

                mapaOficial.put(key,ttMov2);
            }
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".txt";
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal.toString());

            loteFiscal = loteFiscal.replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());
        }




        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------


        StringBuilder ResumoTxt = new StringBuilder();
        String rn = "\r\n";
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");
        ResumoTxt.append(rn);

        ResumoTxt.append("STATUS;");
        ResumoTxt.append("DATA;TIPO DATA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("DOCUMENTO;");
        ResumoTxt.append("CLIENTE/FORNECEDOR;");
        ResumoTxt.append("PORTADOR;");
        ResumoTxt.append("COMPLEMENTO01;");
        ResumoTxt.append("COMPLEMENTO02;");
        ResumoTxt.append("COMPLEMENTO03;");
        ResumoTxt.append("COMPLEMENTO04;");
        ResumoTxt.append("COMPLEMENTO05;");
        ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
        ResumoTxt.append("DATA;");
        ResumoTxt.append("DEBITO;");
        ResumoTxt.append("CLASS DEB;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("CREDITO;");
        ResumoTxt.append("CLASS CRED;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("HISTORICO;");
		ResumoTxt.append("ORIGEM");

        StringBuilder txtDePara = new StringBuilder();

        txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
        txtDePara.append("\r\n");

		mapaVariavel		= new HashMap();

        contRegra = 0;
        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}

            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            JSONObject extratoEmpresa = new JSONObject();


            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                .param(chaveExtrato + "%")
                .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(1)
                        .param(chaveExtrato)
                        .execute();

                    }
                }

            }


 // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;


                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();

                for (int xx = 0;xx<5;xx++) {
                    try {
                        Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                        if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm; tipoData = "D+1";}
                        if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm; tipoData = "D-1";}
                        if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois; tipoData = "D+2";}
                        if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

                        registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
                        .fields("CONTADEBITO,CONTACREDITO,HISTORICO")
                        .param(codEmpresa)
                        .param(dataLeitura)
                        .param(ttMov.valorDocumento)
                        .query();

                        if (registro != null && registro.length() > 0) break;
                    }
                    catch (Exception xx) {
                        break;
                    }
                }



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

                if (registro != null && registro.length() > 0) {
                    for (int t=0; t<registro.length(); t++) {

                        JSONObject recMov = registro.optJSONObject(t);
                        String contaDebitoRazao = recMov.optString("CONTADEBITO");
                        String contaCreditoRazao = recMov.optString("CONTACREDITO");
                        String historicoRazao = recMov.optString("HISTORICO");

                        String descricaoCredito = "";
                        String descricaoDebito = "";
                        String classificacaoDebito = "";
                        String classificacaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaDebitoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaCreditoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        ResumoTxt.append("\r\n");

                        if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
                        if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(tipoData);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.documento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeOrigem);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomePortador);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento01);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento02);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento03);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento04);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento05);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento06);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.contaDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.contaCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraContaMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraHistorico);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaDebitoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoDebito);
                        ResumoTxt.append(";");


                        ResumoTxt.append(descricaoDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaCreditoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(descricaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(historicoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeArquivo);
                        ResumoTxt.append(";");

						objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                        objetoRoteiro.put("CHAVE", ttMov.chave + contaDebitoRazao);

						objetoRoteiro.put("contaCreditoRazao", contaCreditoRazao);
						objetoRoteiro.put("contaDebitoRazao", contaDebitoRazao);
						objetoRoteiro.put("historicoRazao", historicoRazao);
						objetoRoteiro.put("regraConta", regraContaMovimento);
						objetoRoteiro.put("regraHistorico", regraHistorico);
						objetoRoteiro.put("codigoHistorico", "");

						objetoRoteiro.put("classificacaoDebito", classificacaoDebito);
						objetoRoteiro.put("classificacaoCredito", classificacaoDebito);
						objetoRoteiro.put("descricaoDebito", descricaoDebito);
						objetoRoteiro.put("descricaoCredito", descricaoCredito);



						if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                    }
                }
                else {
                    ResumoTxt.append("\r\n");
                    ResumoTxt.append("NAO ENCONTRADO;");
                    ResumoTxt.append(ttMov.dataMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(tipoData);
                    ResumoTxt.append(";");
                    ResumoTxt.append(valorFinal);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.documento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomeOrigem);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomePortador);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento01);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento02);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento03);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento04);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento05);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento06);
                    ResumoTxt.append(";;");

                    ResumoTxt.append(ttMov.contaDebito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.contaCredito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraContaMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.historico);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraHistorico);
                    ResumoTxt.append(";;");
                    ResumoTxt.append(ttMov.nomeArquivo);
                    ResumoTxt.append(";");
                    objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                    if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);

                }
            }


            if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";

            if (classificacao.startsWith("X") && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}


            if (ttMov.tipoMovimento.equals("CTB")) {
                if (ttMov.contaDebito.equals("") || ttMov.contaDebito.equals("") || ttMov.contaDebito.equals(ttMov.contaCredito)) {
                    String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                    valorFinal = valorFinal.replaceAll("\\.",",");
                    txtDePara.append(ttMov.dataMovimento).append(";");
                    txtDePara.append(valorFinal).append(";");
                    txtDePara.append(ttMov.nomeOrigem).append(";");
                    txtDePara.append(ttMov.nomePortador).append(";");
                    txtDePara.append(ttMov.contaDebito).append(";");
                    txtDePara.append(ttMov.contaCredito).append(";");
                    txtDePara.append(ttMov.documento).append(";");
                    txtDePara.append(ttMov.complemento01).append(";");
                    txtDePara.append(ttMov.complemento02).append(";");
                    txtDePara.append(ttMov.complemento03).append(";");
                    txtDePara.append(ttMov.complemento04).append(";");
                    txtDePara.append(ttMov.complemento05).append(";");
                    txtDePara.append(ttMov.centroCusto).append(";");
                    txtDePara.append(ttMov.nomeArquivo);
                    txtDePara.append(rn);
                }

            }


            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
            }
            mapaLote.put(ttMov.lote,ttLot);

            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
                    //records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

            if(tipoLancamento.contains("PAGAR")){
                if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    classDes = classificacao + ttMov.classificacao + "01";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "02";
                }
                if(classificacao.startsWith("D")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "01";
                    classMul = classificacao + ttMov.classificacao + "01";
                }
            }
            if(tipoLancamento.contains("RECEBER")){
                if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    classDes = classificacao + ttMov.classificacao + "01";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "02";
                }
                if(classificacao.startsWith("C")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "01";
                    classMul = classificacao + ttMov.classificacao + "01";
                }
            }


            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
                records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
                    //records.put(rec3);
                }

                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                    }
                    records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
                        //records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                    }
                    records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        //records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                    }
                    records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
                        //records.put(rec3);
                    }
                }
            }
        }

        if (apagaExtrato) {
            dbIOCont.delete("IO_EXTRATO")
            .where("CODEMPRESA=?")
            .param(codEmpresa)
            .execute();
        }

        // resumo comparativo com razao

        if (comparaRazao) {

            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
            writerRazao.writeNewFile(ResumoTxt.toString());
        }


        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());


        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {

            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
            // =======================================================================================
            lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(lote)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", "");
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }

    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {
        if (dbIOCont != null) {
            dbIOCont.closeConnection();
        }
    }

    return records;
}

class ttLote {
    public String lote;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
    }
}





public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {

    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo));
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;

}






















































































































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2018-042977");
    js.put("idRoteiro", "a0A1C00000j7Haj");
    js.put("idEmpresa", "a0q1C000004nDPuQAM");
    js.put("idContabilidade", "a091C00001RT2KY");
    js.put("CnpjContabilidade", "06.727.115/0001-69");
    js.put("CnpjEmpresa", "50.479.476/0001-25");
    js.put("fornecedor", "COLUNA(31,67)");
    js.put("dataMovimento", "COLUNA(20,29)");
    js.put("portador", "COLUNA(5,7)");
    js.put("documentoNF", "COLUNA(75,84)");
    js.put("valorDocumento", "COLUNA(94,109)");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "COLUNA(1,62)");
    js.put("complemento02", "COLUNA(110,113)");
    js.put("complemento03", "COLUNA(113,133)");
    js.put("complemento04", "COLUNA(31,45)");
    js.put("complemento05", "COLUNA(9,19)");
    js.put("complemento06", "");
    js.put("centroCusto", "coluna(116,121)");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "COLUNA(31,44)");
    js.put("gravaCnpjMovimento", "TRUE");
    js.put("cnpjSomenteNumeros", "TRUE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Grupofatossp");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Viacaojacarei");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "SCI");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "FINANCEIRO_01012018_A_15012018");
    js.put("Planilhas_Padroes", "Extrato_Bradesco_Excel;Extrato_Itau_Excel");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".TXT - ARQUIVO TEXTO");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("RESCISOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1309";
        contaMovimento = "1309";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DROGARIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100184";
        contaMovimento = "100184";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FINAME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "201026";
        contaMovimento = "201026";
    }
    if (complemento01.contains("DOACOES") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100379";
        contaMovimento = "100379";
    }
    if (complemento01.contains("ARTESP") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100492";
        contaMovimento = "100492";
    }
    if (complemento01.contains("RESEGE") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100492";
        contaMovimento = "100492";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ESTACIONAMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100363";
        contaMovimento = "100363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CONSORCIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "949";
        contaMovimento = "949";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BAZAR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "200912";
        contaMovimento = "200912";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("PLR")) {
        conta = "1325";
        contaMovimento = "1325";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RESTAURANTE")) {
        conta = "3280";
        contaMovimento = "3280";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.startsWith("TAR")) {
        conta = "3506";
        contaMovimento = "3506";
    }
    if (tipoPlanilha.contains("BRADESCO") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("APLIC")) {
        conta = "100665";
        contaMovimento = "100665";
    }
    if (nomeOrigem.contains("APLIC") && tipoPlanilha.contains("ITAU") && tipoPlanilha.contains("EXTRATO")) {
        conta = "100668";
        contaMovimento = "100668";
    }
    if (complemento01.contains("ASSALTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3689";
        contaMovimento = "3689";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ALIMENTICIA") && complemento01.contains("PENSAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100028";
        contaMovimento = "100028";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TRABALHISTAS") && complemento01.contains("INDENIZACOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100428";
        contaMovimento = "100428";
    }
    if (complemento01.contains("CONTRIBUICAO") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CONFEDERATIVA")) {
        conta = "1406";
        contaMovimento = "1406";
    }
    if (complemento01.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BREDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100877";
        contaMovimento = "100877";
    }
    if (complemento01.contains("REFEICOES") && complemento01.contains("LANCHES") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3280";
        contaMovimento = "3280";
    }
    if (complemento01.contains("CONDOMINIO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100047";
        contaMovimento = "100047";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARE") && nomeOrigem.contains("SP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100365";
        contaMovimento = "100365";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DOC") && nomeOrigem.contains("TED")) {
        conta = "3506";
        contaMovimento = "3506";
    }
    if (complemento01.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("RESSARCIDO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3484";
        contaMovimento = "3484";
    }
    if (nomeOrigem.contains("SUPERMERCADO") && complemento01.contains("MATERIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3158";
        contaMovimento = "3158";
    }
    if (complemento01.contains("TRABALHOXX") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DO") && complemento01.contains("XXSEGURANCA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1341";
        contaMovimento = "1341";
    }
    if (complemento01.contains("CUSTO") && complemento01.contains("REFEICAO") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("AJUDA")) {
        conta = "200909";
        contaMovimento = "200909";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CONTRIBUICOES") && complemento01.contains("SINDICAIS") && complemento01.contains("EMPREGADOS")) {
        conta = "1406";
        contaMovimento = "1406";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ALUGUEIS") && nomeOrigem.contains("FUNDACAO") && nomeOrigem.contains("AVIBRAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100047";
        contaMovimento = "100047";
    }
    if (nomeOrigem.contains("COMBUSTIVEIS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("POSTOS") && nomeOrigem.contains("DE")) {
        conta = "100358";
        contaMovimento = "100358";
    }
    if (complemento01.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CONDOMINIO") && nomeOrigem.contains("FUNDACAO") && nomeOrigem.contains("AVIBRAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100047";
        contaMovimento = "100047";
    }
    if (nomeOrigem.contains("PREFEITURA") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LOCACAO") && complemento01.contains("DE") && complemento01.contains("BENS")) {
        conta = "100047";
        contaMovimento = "100047";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TRANSITO") && complemento01.contains("DE") && complemento01.contains("ACIDENTE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("INDENIZACAO")) {
        conta = "100091";
        contaMovimento = "100091";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("ACORDO") && complemento01.contains("SEGURANCA") && complemento01.contains("DO") && complemento01.contains("TRABALHO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "201013";
        contaMovimento = "201013";
    }
    if (nomeOrigem.contains("CHQ") && nomeOrigem.contains("OUTRA") && nomeOrigem.contains("AGENCIA") && nomeOrigem.contains("RECEBIMENTOS") && tipoPlanilha.contains("EXTRATO") && tipoPlanilha.contains("BRADESCO") && nomeOrigem.contains("PAGO")) {
        conta = "100879";
        contaMovimento = "100879";
    }
    if (nomeOrigem.contains("S") && complemento01.contains("LOCACAO") && nomeOrigem.contains("G") && nomeOrigem.contains("M") && nomeOrigem.contains("K") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3239";
        contaMovimento = "3239";
    }
    if (complemento01.contains("METRO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("PASSAGENS") && complemento01.contains("RODOV") && complemento01.contains("AEREAS") && complemento01.contains("TAXI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "200995";
        contaMovimento = "200995";
    }
    if (complemento01.contains("COPIA") && complemento01.contains("CHAVE") && complemento01.contains("XEROX") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("PLASTIFICACOES") && complemento01.contains("CARIMBO")) {
        conta = "3174";
        contaMovimento = "3174";
    }
    if (complemento01.contains("PROCESSO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("GUIA") && complemento01.contains("DE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TRABALHISTA") && complemento01.contains("RECURSO")) {
        conta = "100428";
        contaMovimento = "100428";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FERIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (complemento01.contains("FGTS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1392";
        contaMovimento = "1392";
    }
    if (complemento01.contains("EMPRESTIMOS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100495";
        contaMovimento = "100495";
    }
    if (complemento01.contains("CORREIOS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3204";
        contaMovimento = "3204";
    }
    if (nomeOrigem.contains("CONDOMINIO") && nomeOrigem.contains("ROD") && nomeOrigem.contains("DE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CONDOMINIO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LOCACAO") && nomeOrigem.contains("EST")) {
        conta = "100047";
        contaMovimento = "100047";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("AGUA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3115";
        contaMovimento = "3115";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("IPVA")) {
        conta = "590";
        contaMovimento = "590";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("IRPJ")) {
        conta = "1554";
        contaMovimento = "1554";
    }
    if (complemento01.contains("COFINS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1600";
        contaMovimento = "1600";
    }
    if (complemento01.contains("PIS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1619";
        contaMovimento = "1619";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DPVAT")) {
        conta = "604";
        contaMovimento = "604";
    }
    if (nomeOrigem.contains("ICMS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1597";
        contaMovimento = "1597";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INSS")) {
        conta = "1384";
        contaMovimento = "1384";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ISS")) {
        conta = "1503";
        contaMovimento = "1503";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CSLL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1562";
        contaMovimento = "1562";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("PAGAMENTO") && complemento01.contains("FOLHA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1287";
        contaMovimento = "1287";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SALARIAL") && complemento01.contains("ADIANTAMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "256";
        contaMovimento = "256";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LABORE") && complemento01.contains("PRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1368";
        contaMovimento = "1368";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CARTORIO") && complemento01.contains("DESPESAS")) {
        conta = "100378";
        contaMovimento = "100378";
    }
    if (complemento01.contains("FROTA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SEGURO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SEGURO") && complemento01.contains("FACULTATIVO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3360";
        contaMovimento = "3360";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TARIFAS") && complemento01.contains("BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3506";
        contaMovimento = "3506";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DARF") && complemento03.contains("1708")) {
        conta = "1490";
        contaMovimento = "1490";
    }
    if (complemento01.contains("APLICACAO") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomePortador.contains("104")) {
        conta = "201351";
        contaMovimento = "201351";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("REEMB") && complemento01.contains("ACORDO") && complemento01.contains("VJL") && complemento01.contains("X") && complemento01.contains("JTU") && complemento01.contains("ABC") && complemento01.contains("CACAPAVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "200930";
        contaMovimento = "200930";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("INFRACOES") && complemento01.contains("E") && complemento01.contains("MULTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100393";
        contaMovimento = "100393";
    }
    if (complemento01.contains("SEGURO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DE") && complemento01.contains("VIDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "201014";
        contaMovimento = "201014";
    }
    if (complemento01.contains("ALUGUEL") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CIELO") && complemento01.contains("POS")) {
        conta = "100017";
        contaMovimento = "100017";
    }
    if (complemento01.contains("DANOS") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TERCEIROS") && complemento01.contains("MATERIAIS")) {
        conta = "100238";
        contaMovimento = "100238";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("EM") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DINHEIRO") && complemento01.contains("EMPRESTIMO")) {
        conta = "200902";
        contaMovimento = "200902";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("JUROS") && complemento01.contains("CONTA") && complemento01.contains("GARANTIDA")) {
        conta = "3484";
        contaMovimento = "3484";
    }
    if (complemento01.contains("DE") && complemento01.contains("VEICULOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LICENCIAMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100254";
        contaMovimento = "100254";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CSLL") && complemento03.contains("4") && complemento03.contains("65") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100399";
        contaMovimento = "100399";
    }
    if (nomeOrigem.contains("PREFEITURA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LICENCAS") && complemento01.contains("E") && complemento01.contains("TAXAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100365";
        contaMovimento = "100365";
    }
    if (complemento01.contains("ESTORNO") && complemento01.contains("DE") && complemento01.contains("FORNECEDOR") && complemento01.contains("CLIENTE") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100238";
        contaMovimento = "100238";
    }
    if (complemento01.contains("RETIDO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("IR") && nomeOrigem.contains("PAGAMENTO") && nomeOrigem.contains("FOLHA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1481";
        contaMovimento = "1481";
    }
    if (complemento01.contains("FROTA") && complemento01.contains("VALORES") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SEGURO") && complemento01.contains("GARAGEM")) {
        conta = "1740";
        contaMovimento = "1740";
    }
    if (nomeOrigem.contains("INMETRO") && complemento01.contains("TAXAS") && complemento01.contains("E") && complemento01.contains("LICENCAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100090";
        contaMovimento = "100090";
    }
    if (complemento01.contains("AVETP") && complemento01.contains("SETPESP") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SINFREVALE") && complemento01.contains("FRESP") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CIESP")) {
        conta = "100492";
        contaMovimento = "100492";
    }
    if (complemento01.contains("ADM") && complemento01.contains("TAXA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CREDITO") && complemento01.contains("DEBITO") && complemento01.contains("CARTAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3506";
        contaMovimento = "3506";
    }
    if (complemento01.contains("DEBITO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TAXA") && complemento01.contains("ADM") && complemento01.contains("CARTAO") && complemento01.contains("CREDITO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3506";
        contaMovimento = "3506";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LICENCAS") && complemento01.contains("E") && complemento01.contains("TAXAS") && nomeOrigem.contains("BRASIL") && nomeOrigem.contains("DO") && nomeOrigem.contains("BANCO")) {
        conta = "100090";
        contaMovimento = "100090";
    }
    if (nomeOrigem.contains("DE") && nomeOrigem.contains("NACIONAL") && nomeOrigem.contains("METRO") && complemento01.contains("LICENCAS") && complemento01.contains("E") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TAXAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "200907";
        contaMovimento = "200907";
    }
    if (complemento01.contains("E") && nomeOrigem.contains("TRANSPORTE") && nomeOrigem.contains("LAUDO") && nomeOrigem.contains("DE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("LICENCAS") && complemento01.contains("TAXAS")) {
        conta = "100090";
        contaMovimento = "100090";
    }
    if (nomeOrigem.contains("BIASI") && nomeOrigem.contains("AUDITORES") && nomeOrigem.contains("IND") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DESPESAS") && complemento01.contains("DE") && complemento01.contains("VIAGEM") && nomeOrigem.contains("DE")) {
        conta = "3360";
        contaMovimento = "3360";
    }
    if (complemento01.contains("SALARIO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("13") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "302";
        contaMovimento = "302";
    }
    if (complemento01.contains("DARF") && complemento03.contains("5952") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100399";
        contaMovimento = "100399";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FOLHA") && complemento01.contains("INSS")) {
        conta = "1384";
        contaMovimento = "1384";
    }
    if (complemento01.contains("LUCROS") && complemento01.contains("DISTRIBUICAO") && complemento01.contains("DE") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "100699";
        contaMovimento = "100699";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FGTS") && complemento01.contains("DSR") && complemento01.contains("RESCISORIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1414";
        contaMovimento = "1414";
    }
    if (nomeOrigem.contains("TERCEIROS") && complemento01.contains("DARF") && complemento01.contains("TERCEIROS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1490";
        contaMovimento = "1490";
    }
    if (complemento01.contains("INSS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SALARIOS") && complemento01.contains("DE") && complemento01.contains("DIF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1384";
        contaMovimento = "1384";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LICENCIAMENTO") && nomeOrigem.contains("DE") && nomeOrigem.contains("VEICU") && complemento01.contains("TAXAS") && complemento01.contains("E") && complemento01.contains("LICENCAS")) {
        conta = "100365";
        contaMovimento = "100365";
    }
    if (complemento01.contains("TERCEIROS") && nomeOrigem.contains("CSLL") && nomeOrigem.contains("65%") && nomeOrigem.contains("4") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DARF")) {
        conta = "100399";
        contaMovimento = "100399";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO")) { //ROT-2018-042977
        conta = "1287";
        contaMovimento = "1287";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO ALIMENTICIA")) { //ROT-2018-042977
        conta = "100028";
        contaMovimento = "100028";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) { //ROT-2018-042977
        conta = "310";
        contaMovimento = "310";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISOES")) { //ROT-2018-042977
        conta = "1309";
        contaMovimento = "1309";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INDENIZACOES TRABALHISTAS")) { //ROT-2018-042977
        conta = "100428";
        contaMovimento = "100428";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13 SALARIO")) { //ROT-2018-042977
        conta = "302";
        contaMovimento = "302";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRO LABORE")) { //ROT-2018-042977
        conta = "1368";
        contaMovimento = "1368";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("AJUDA CUSTO/REFEICAO")) { //ROT-2018-042977
        conta = "200909";
        contaMovimento = "200909";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISTRIBUICAO DE LUCROS")) { //ROT-2018-042977
        conta = "100699";
        contaMovimento = "100699";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS DIF DE SALARIOS")) { //ROT-2018-042977
        conta = "1384";
        contaMovimento = "1384";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) { //ROT-2018-042977
        conta = "1392";
        contaMovimento = "1392";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS - DSR/RESCISORIO")) { //ROT-2018-042977
        conta = "1414";
        contaMovimento = "1414";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO DE VIDA")) { //ROT-2018-042977
        conta = "201014";
        contaMovimento = "201014";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMOS")) { //ROT-2018-042977
        conta = "100495";
        contaMovimento = "100495";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME")) { //ROT-2018-042977
        conta = "201026";
        contaMovimento = "201026";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICOES SINDICAIS EMPREGADOS")) { //ROT-2018-042977
        conta = "1406";
        contaMovimento = "1406";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO CONFEDERATIVA")) { //ROT-2018-042977
        conta = "1406";
        contaMovimento = "1406";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CORREIOS")) { //ROT-2018-042977
        conta = "3204";
        contaMovimento = "3204";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BREDA")) { //ROT-2018-042977
        conta = "100877";
        contaMovimento = "100877";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.G.M.K")) { //ROT-2018-042977
        conta = "3239";
        contaMovimento = "3239";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DOACOES")) { //ROT-2018-042977
        conta = "100379";
        contaMovimento = "100379";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS CARTORIO")) { //ROT-2018-042977
        conta = "100378";
        contaMovimento = "100378";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDACAO AVIBRAS")) { //ROT-2018-042977
        conta = "100047";
        contaMovimento = "100047";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONDOMINIO EST.ROD. DE")) { //ROT-2018-042977
        conta = "100047";
        contaMovimento = "100047";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO DE BENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA")) { //ROT-2018-042977
        conta = "100047";
        contaMovimento = "100047";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL POS - CIELO")) { //ROT-2018-042977
        conta = "100017";
        contaMovimento = "100017";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA")) { //ROT-2018-042977
        conta = "3115";
        contaMovimento = "3115";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDACAO AVIBRAS")) { //ROT-2018-042977
        conta = "100047";
        contaMovimento = "100047";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SINFREVALE/FRESP/SETPESP/AVETP/CIESP")) { //ROT-2018-042977
        conta = "100492";
        contaMovimento = "100492";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IPVA")) { //ROT-2018-042977
        conta = "590";
        contaMovimento = "590";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS E INFRACOES")) { //ROT-2018-042977
        conta = "100393";
        contaMovimento = "100393";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NACIONAL DE METRO")) { //ROT-2018-042977
        conta = "200907";
        contaMovimento = "200907";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA")) { //ROT-2018-042977
        conta = "100365";
        contaMovimento = "100365";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DANOS MATERIAIS TERCEIROS")) { //ROT-2018-042977
        conta = "100238";
        contaMovimento = "100238";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INDENIZACAO ACIDENTE DE TRANSITO")) { //ROT-2018-042977
        conta = "100091";
        contaMovimento = "100091";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ARTESP")) { //ROT-2018-042977
        conta = "100492";
        contaMovimento = "100492";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESEGE")) { //ROT-2018-042977
        conta = "100492";
        contaMovimento = "100492";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FROTA")) { //ROT-2018-042977
        conta = "582";
        contaMovimento = "582";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FACULTATIVO")) { //ROT-2018-042977
        conta = "3360";
        contaMovimento = "3360";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PEDAGIOS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CGMP")) { //ROT-2018-042977
        conta = "100361";
        contaMovimento = "100361";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LANCHES / REFEICOES")) { //ROT-2018-042977
        conta = "3280";
        contaMovimento = "3280";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTACIONAMENTO")) { //ROT-2018-042977
        conta = "100363";
        contaMovimento = "100363";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PASSAGENS RODOV/AEREAS/METRO/TAXI")) { //ROT-2018-042977
        conta = "200995";
        contaMovimento = "200995";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS DE VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE BIASI AUDITORES IND")) { //ROT-2018-042977
        conta = "3360";
        contaMovimento = "3360";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFAS BANCARIAS")) { //ROT-2018-042977
        conta = "3506";
        contaMovimento = "3506";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA ADM CARTAO DEBITO/CREDITO")) { //ROT-2018-042977
        conta = "3506";
        contaMovimento = "3506";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ")) { //ROT-2018-042977
        conta = "1554";
        contaMovimento = "1554";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO")) { //ROT-2018-042977
        conta = "949";
        contaMovimento = "949";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTORNO DE FORNECEDOR/CLIENTE")) { //ROT-2018-042977
        conta = "100238";
        contaMovimento = "100238";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INTERNET/ICONET/NIP CABLE/TERRA/SERASA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NIPCABLE DO BRASIL") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERASA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLARO")) { //ROT-2018-042977
        conta = "3131";
        contaMovimento = "3131";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL DE ESCRITORIO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("THOMAZ DE ARAUJO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TANBY")) { //ROT-2018-042977
        conta = "3140";
        contaMovimento = "3140";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PLASTIFICACOES/CARIMBO/COPIA CHAVE/XEROX")) { //ROT-2018-042977
        conta = "3174";
        contaMovimento = "3174";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ACORDO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURANCA DO TRABALHO")) { //ROT-2018-042977
        conta = "201013";
        contaMovimento = "201013";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO SALARIAL")) { //ROT-2018-042977
        conta = "256";
        contaMovimento = "256";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS")) { //ROT-2018-042977
        conta = "1600";
        contaMovimento = "1600";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO")) { //ROT-2018-042977
        conta = "100047";
        contaMovimento = "100047";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("1708")) { //ROT-2018-042977
        conta = "1490";
        contaMovimento = "1490";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5952")) { //ROT-2018-042977
        conta = "100399";
        contaMovimento = "100399";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO EM DINHEIRO")) { //ROT-2018-042977
        conta = "200902";
        contaMovimento = "200902";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTOS DE COMBUSTIVEIS")) { //ROT-2018-042977
        conta = "100358";
        contaMovimento = "100358";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GUIA DE RECURSO PROCESSO TRABALHISTA")) { //ROT-2018-042977
        conta = "100428";
        contaMovimento = "100428";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS - FOLHA")) { //ROT-2018-042977
        conta = "1384";
        contaMovimento = "1384";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS CONTA GARANTIDA")) { //ROT-2018-042977
        conta = "3484";
        contaMovimento = "3484";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LICENCIAMENTO DE VEICULOS")) { //ROT-2018-042977
        conta = "100254";
        contaMovimento = "100254";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DROGARIA")) { //ROT-2018-042977
        conta = "100184";
        contaMovimento = "100184";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAZAR")) { //ROT-2018-042977
        conta = "200912";
        contaMovimento = "200912";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS")) { //ROT-2018-042977
        conta = "1619";
        contaMovimento = "1619";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PLR")) { //ROT-2018-042977
        conta = "1325";
        contaMovimento = "1325";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("XXSEGURANCA DO TRABALHOXX")) { //ROT-2018-042977
        conta = "1341";
        contaMovimento = "1341";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DPVAT")) { //ROT-2018-042977
        conta = "604";
        contaMovimento = "604";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARE SP")) { //ROT-2018-042977
        conta = "100365";
        contaMovimento = "100365";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LICENCIAMENTO DE VEICU") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) { //ROT-2018-042977
        conta = "100365";
        contaMovimento = "100365";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) { //ROT-2018-042977
        conta = "100090";
        contaMovimento = "100090";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESTAURANTE")) { //ROT-2018-042977
        conta = "3280";
        contaMovimento = "3280";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR")) { //ROT-2018-042977
        conta = "3506";
        contaMovimento = "3506";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) { //ROT-2018-042977
        conta = "100665";
        contaMovimento = "100665";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC/TED")) { //ROT-2018-042977
        conta = "3506";
        contaMovimento = "3506";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-ITAU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) { //ROT-2018-042977
        conta = "100668";
        contaMovimento = "100668";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IR RETIDO")) { //ROT-2018-042977
        conta = "1481";
        contaMovimento = "1481";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ICMS")) { //ROT-2018-042977
        conta = "1597";
        contaMovimento = "1597";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS")) { //ROT-2018-042977
        conta = "1384";
        contaMovimento = "1384";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  TERCEIROS")) { //ROT-2018-042977
        conta = "1490";
        contaMovimento = "1490";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUPERMERCADO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL")) { //ROT-2018-042977
        conta = "3158";
        contaMovimento = "3158";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSALTO")) { //ROT-2018-042977
        conta = "3689";
        contaMovimento = "3689";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF(4,65%) CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  TERCEIROS")) { //ROT-2018-042977
        conta = "100399";
        contaMovimento = "100399";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) { //ROT-2018-042977
        conta = "100090";
        contaMovimento = "100090";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAUDO DE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) { //ROT-2018-042977
        conta = "100090";
        contaMovimento = "100090";
    }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 12 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2017) { //ROT-2018-042977
        conta = "ignorar";
        contaMovimento = "ignorar";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("C")) { //ROT-2018-042977
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 12 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2017) {
        conta = "Quando Mes Movimento menor ou igual a '12', Ano Movimento menor ou igual a '2017', CONTA MOVIMENTO SERA = 'ignorar'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("C")) {
        conta = "Quando Complemento (02) igual a 'C', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FOLHA', Complemento (01) contem 'PAGAMENTO', CONTA MOVIMENTO SERA = '1287'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO ALIMENTICIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PENSAO ALIMENTICIA', CONTA MOVIMENTO SERA = '100028'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FERIAS', CONTA MOVIMENTO SERA = '310'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'RESCISOES', CONTA MOVIMENTO SERA = '1309'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INDENIZACOES TRABALHISTAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'INDENIZACOES TRABALHISTAS', CONTA MOVIMENTO SERA = '100428'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13 SALARIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem '13 SALARIO', CONTA MOVIMENTO SERA = '302'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRO LABORE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PRO LABORE', CONTA MOVIMENTO SERA = '1368'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("AJUDA CUSTO/REFEICAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'AJUDA CUSTO/REFEICAO', CONTA MOVIMENTO SERA = '200909'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISTRIBUICAO DE LUCROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DISTRIBUICAO DE LUCROS', CONTA MOVIMENTO SERA = '100699'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS DIF DE SALARIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'INSS DIF DE SALARIOS', CONTA MOVIMENTO SERA = '1384'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '1392'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS - DSR/RESCISORIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FGTS - DSR/RESCISORIO', CONTA MOVIMENTO SERA = '1414'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO DE VIDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'SEGURO DE VIDA', CONTA MOVIMENTO SERA = '201014'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'EMPRESTIMOS', CONTA MOVIMENTO SERA = '100495'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FINAME', CONTA MOVIMENTO SERA = '201026'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICOES SINDICAIS EMPREGADOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONTRIBUICOES SINDICAIS EMPREGADOS', CONTA MOVIMENTO SERA = '1406'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO CONFEDERATIVA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONTRIBUICAO CONFEDERATIVA', CONTA MOVIMENTO SERA = '1406'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CORREIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CORREIOS', CONTA MOVIMENTO SERA = '3204'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BREDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'LOCACAO', Fornecedor/Cliente contem 'BREDA', CONTA MOVIMENTO SERA = '100877'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.G.M.K")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'LOCACAO', Fornecedor/Cliente contem 'S.G.M.K', CONTA MOVIMENTO SERA = '3239'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DOACOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DOACOES', CONTA MOVIMENTO SERA = '100379'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS CARTORIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DESPESAS CARTORIO', CONTA MOVIMENTO SERA = '100378'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDACAO AVIBRAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONDOMINIO/LOCACAO', Fornecedor/Cliente contem 'FUNDACAO AVIBRAS', CONTA MOVIMENTO SERA = '100047'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONDOMINIO EST.ROD. DE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONDOMINIO/LOCACAO', Fornecedor/Cliente contem 'CONDOMINIO EST.ROD. DE', CONTA MOVIMENTO SERA = '100047'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO DE BENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'LOCACAO DE BENS', Fornecedor/Cliente contem 'PREFEITURA', CONTA MOVIMENTO SERA = '100047'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL POS - CIELO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ALUGUEL POS - CIELO', CONTA MOVIMENTO SERA = '100017'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'AGUA', CONTA MOVIMENTO SERA = '3115'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDACAO AVIBRAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ALUGUEIS', Fornecedor/Cliente contem 'FUNDACAO AVIBRAS', CONTA MOVIMENTO SERA = '100047'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SINFREVALE/FRESP/SETPESP/AVETP/CIESP")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'SINFREVALE/FRESP/SETPESP/AVETP/CIESP', CONTA MOVIMENTO SERA = '100492'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IPVA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'IPVA', CONTA MOVIMENTO SERA = '590'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS E INFRACOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'MULTAS E INFRACOES', CONTA MOVIMENTO SERA = '100393'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NACIONAL DE METRO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TAXAS E LICENCAS', Fornecedor/Cliente contem 'NACIONAL DE METRO', CONTA MOVIMENTO SERA = '200907'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TAXAS E LICENCAS', Fornecedor/Cliente contem 'PREFEITURA', CONTA MOVIMENTO SERA = '100365'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DANOS MATERIAIS TERCEIROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DANOS MATERIAIS TERCEIROS', CONTA MOVIMENTO SERA = '100238'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INDENIZACAO ACIDENTE DE TRANSITO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'INDENIZACAO ACIDENTE DE TRANSITO', CONTA MOVIMENTO SERA = '100091'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ARTESP")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ARTESP', CONTA MOVIMENTO SERA = '100492'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESEGE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'RESEGE', CONTA MOVIMENTO SERA = '100492'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FROTA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'SEGURO FROTA', CONTA MOVIMENTO SERA = '582'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FACULTATIVO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'SEGURO FACULTATIVO', CONTA MOVIMENTO SERA = '3360'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PEDAGIOS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CGMP")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PEDAGIOS', Fornecedor/Cliente nao contem 'CGMP', CONTA MOVIMENTO SERA = '100361'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LANCHES / REFEICOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'LANCHES / REFEICOES', CONTA MOVIMENTO SERA = '3280'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTACIONAMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ESTACIONAMENTO', CONTA MOVIMENTO SERA = '100363'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PASSAGENS RODOV/AEREAS/METRO/TAXI")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PASSAGENS RODOV/AEREAS/METRO/TAXI', CONTA MOVIMENTO SERA = '200995'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS DE VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE BIASI AUDITORES IND")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DESPESAS DE VIAGEM', Fornecedor/Cliente contem 'DE BIASI AUDITORES IND', CONTA MOVIMENTO SERA = '3360'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFAS BANCARIAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TARIFAS BANCARIAS', CONTA MOVIMENTO SERA = '3506'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA ADM CARTAO DEBITO/CREDITO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TAXA ADM CARTAO DEBITO/CREDITO', CONTA MOVIMENTO SERA = '3506' PORT: '100017'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'IRPJ', CONTA MOVIMENTO SERA = '1554'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONSORCIO', CONTA MOVIMENTO SERA = '949'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTORNO DE FORNECEDOR/CLIENTE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ESTORNO DE FORNECEDOR/CLIENTE', CONTA MOVIMENTO SERA = '100238'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INTERNET/ICONET/NIP CABLE/TERRA/SERASA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NIPCABLE DO BRASIL") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERASA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLARO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'INTERNET/ICONET/NIP CABLE/TERRA/SERASA', Fornecedor/Cliente nao contem 'NIPCABLE DO BRASIL', Fornecedor/Cliente nao contem 'SERASA', Fornecedor/Cliente nao contem 'CLARO', CONTA MOVIMENTO SERA = '3131'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL DE ESCRITORIO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("THOMAZ DE ARAUJO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TANBY")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'MATERIAL DE ESCRITORIO', Fornecedor/Cliente nao contem 'THOMAZ DE ARAUJO', Fornecedor/Cliente nao contem 'TANBY', CONTA MOVIMENTO SERA = '3140'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PLASTIFICACOES/CARIMBO/COPIA CHAVE/XEROX")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PLASTIFICACOES/CARIMBO/COPIA CHAVE/XEROX', CONTA MOVIMENTO SERA = '3174'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ACORDO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURANCA DO TRABALHO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ACORDO', Complemento (01) contem 'SEGURANCA DO TRABALHO', CONTA MOVIMENTO SERA = '201013'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO SALARIAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ADIANTAMENTO SALARIAL', CONTA MOVIMENTO SERA = '256'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'COFINS', CONTA MOVIMENTO SERA = '1600'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONDOMINIO/LOCACAO', CONTA MOVIMENTO SERA = '100047'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("1708")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF', Complemento (03) contem '1708', CONTA MOVIMENTO SERA = '1490'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5952")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF', Complemento (03) contem '5952', CONTA MOVIMENTO SERA = '100399'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO EM DINHEIRO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'EMPRESTIMO EM DINHEIRO', CONTA MOVIMENTO SERA = '200902'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTOS DE COMBUSTIVEIS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTOS DE COMBUSTIVEIS', CONTA MOVIMENTO SERA = '100358'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GUIA DE RECURSO PROCESSO TRABALHISTA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'GUIA DE RECURSO PROCESSO TRABALHISTA', CONTA MOVIMENTO SERA = '100428'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS - FOLHA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'INSS - FOLHA', CONTA MOVIMENTO SERA = '1384'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS CONTA GARANTIDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'JUROS CONTA GARANTIDA', CONTA MOVIMENTO SERA = '3484'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LICENCIAMENTO DE VEICULOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'LICENCIAMENTO DE VEICULOS', CONTA MOVIMENTO SERA = '100254'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DROGARIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DROGARIA', CONTA MOVIMENTO SERA = '100184'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAZAR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BAZAR', CONTA MOVIMENTO SERA = '200912'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PIS', CONTA MOVIMENTO SERA = '1619'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PLR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PLR', CONTA MOVIMENTO SERA = '1325'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("XXSEGURANCA DO TRABALHOXX")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'XXSEGURANCA DO TRABALHOXX', CONTA MOVIMENTO SERA = '1341'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DPVAT")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DPVAT', CONTA MOVIMENTO SERA = '604'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARE SP")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DARE SP', CONTA MOVIMENTO SERA = '100365'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LICENCIAMENTO DE VEICU") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'LICENCIAMENTO DE VEICU', Complemento (01) contem 'TAXAS E LICENCAS', CONTA MOVIMENTO SERA = '100365'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BANCO DO BRASIL', Complemento (01) contem 'TAXAS E LICENCAS', CONTA MOVIMENTO SERA = '100090'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESTAURANTE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'RESTAURANTE', CONTA MOVIMENTO SERA = '3280'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("104")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'APLICACAO', Portador contem '104', CONTA MOVIMENTO SERA = '201351'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR', CONTA MOVIMENTO SERA = '3506'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO-BRADESCO', Fornecedor/Cliente contem 'APLIC', CONTA MOVIMENTO SERA = '100665'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC/TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DOC/TED', CONTA MOVIMENTO SERA = '3506'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-ITAU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO-ITAU', Fornecedor/Cliente contem 'APLIC', CONTA MOVIMENTO SERA = '100668'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IR RETIDO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FOLHA PAGAMENTO', Complemento (01) contem 'IR RETIDO', CONTA MOVIMENTO SERA = '1481'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ICMS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ICMS', CONTA MOVIMENTO SERA = '1597'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSS', CONTA MOVIMENTO SERA = '1384'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FROTA/GARAGEM/VALORES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'SEGURO FROTA/GARAGEM/VALORES', CONTA MOVIMENTO SERA = '1740'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("REEMB ACORDO VJL X JTU ABC CACAPAVA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'REEMB ACORDO VJL X JTU ABC CACAPAVA', CONTA MOVIMENTO SERA = '200930'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JURIDICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'JURIDICO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '1341'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURANCA DO TRABALHO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("ACORDO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'SEGURANCA DO TRABALHO', Complemento (04) contem 'EM BRANCO', Complemento (03) nao contem 'ACORDO', CONTA MOVIMENTO SERA = '1341'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ISS', CONTA MOVIMENTO SERA = '1503'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA ADM CARTAO DEBITO/CREDITO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TAXA ADM CARTAO DEBITO/CREDITO', CONTA MOVIMENTO SERA = '3506' PORT: '100017'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RESSARCIDO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF', Complemento (03) contem 'RESSARCIDO', CONTA MOVIMENTO SERA = '3484'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CSLL', CONTA MOVIMENTO SERA = '1562'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4,65")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CSLL', Complemento (03) contem '4,65', CONTA MOVIMENTO SERA = '100399'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHQ.PAGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRA AGENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIMENTOS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO-BRADESCO', Fornecedor/Cliente contem 'CHQ.PAGO', Fornecedor/Cliente contem 'OUTRA AGENCIA', Fornecedor/Cliente contem 'RECEBIMENTOS', CONTA MOVIMENTO SERA = '100879'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  TERCEIROS")) {
        conta = "Quando Fornecedor/Cliente contem 'TERCEIROS', Complemento (01) contem 'DARF  TERCEIROS', CONTA MOVIMENTO SERA = '1490'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUPERMERCADO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'SUPERMERCADO', Complemento (01) contem 'MATERIAL', CONTA MOVIMENTO SERA = '3158'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSALTO")) {
        conta = "Quando Complemento (01) contem 'ASSALTO', CONTA MOVIMENTO SERA = '3689'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF(4,65%) CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  TERCEIROS")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF(4,65%) CSLL', Complemento (01) contem 'DARF  TERCEIROS', CONTA MOVIMENTO SERA = '100399'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) {
        conta = "Quando Fornecedor/Cliente contem 'INMETRO', Complemento (01) contem 'TAXAS E LICENCAS', CONTA MOVIMENTO SERA = '100090'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") &&
        !StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("1") &&
        !StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("2") &&
        !StringUtil.removeSpecialCharsToUC(codCentroCusto).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'INMETRO', Complemento (01) contem 'TAXAS E LICENCAS', Centro de Custo nao contem '1', Centro de Custo nao contem '2', Centro de Custo nao contem 'EM BRANCO', CONTA MOVIMENTO SERA = '200907'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAUDO DE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS")) {
        conta = "Quando Fornecedor/Cliente contem 'LAUDO DE TRANSPORTE', Complemento (01) contem 'TAXAS E LICENCAS', CONTA MOVIMENTO SERA = '100090'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAUDO DE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") &&
        !StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("1") &&
        !StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("2") &&
        !StringUtil.removeSpecialCharsToUC(codCentroCusto).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'LAUDO DE TRANSPORTE', Complemento (01) contem 'TAXAS E LICENCAS', Centro de Custo nao contem '1', Centro de Custo nao contem '2', Centro de Custo nao contem 'EM BRANCO', CONTA MOVIMENTO SERA = '100365'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METRO SAO PAULO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'METRO SAO PAULO', Complemento (04) contem 'EM BRANCO', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', CONTA MOVIMENTO SERA = '200995'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METRO SAO PAULO") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'METRO SAO PAULO', Centro de Custo contem 'EM BRANCO', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '3360'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METRO SAO PAULO") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("1") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'METRO SAO PAULO', Centro de Custo contem '1', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '3360'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METRO SAO PAULO") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("2") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'METRO SAO PAULO', Centro de Custo contem '2', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '3360'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METRO SAO PAULO") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("3") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'METRO SAO PAULO', Centro de Custo contem '3', Complemento (04) contem 'EM BRANCO', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', CONTA MOVIMENTO SERA = '100055'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'TAXI', Complemento (04) contem 'EM BRANCO', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', CONTA MOVIMENTO SERA = '200995'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXI") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'TAXI', Centro de Custo contem 'EM BRANCO', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '201292'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXI") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("1") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'TAXI', Centro de Custo contem '1', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '201292'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXI") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("2") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Fornecedor/Cliente contem 'TAXI', Centro de Custo contem '2', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '201292'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXI") &&
        StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("3") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'TAXI', Centro de Custo contem '3', Complemento (04) contem 'EM BRANCO', Complemento (01) contem 'TREINAMENTO/HOSP/TRANSP/ALIMENTACAO', CONTA MOVIMENTO SERA = '201348'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("001")) {
        conta = "100488";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("033")) {
        conta = "100489";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("237")) {
        conta = "100507";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("341")) {
        conta = "100486";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("102")) {
        conta = "100508";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("200")) {
        conta = "100238";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("500")) {
        conta = "202114";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("600")) {
        conta = "100238";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("422")) {
        conta = "202008";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("208")) {
        conta = "203186";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA ADM CARTAO DEBITO/CREDITO")) {
        conta = "100017";
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HIST PADRAO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem hist padrao, HISTORICO = Pgto Fornecedor NF Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA DE PAGAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FOLHA DE PAGAMENTO, HISTORICO = Pgto Salario Funcionarios Ref. Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO ALIMENTICIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PENSAO ALIMENTICIA, HISTORICO = Pgto Pensao Alimenticia Ref. Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FERIAS, HISTORICO = Pgto Ferias Ref. Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RESCISOES, HISTORICO = Pgto Rescisao Funcionario Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INDENIZACOES TRABALHISTAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem INDENIZACOES TRABALHISTAS, HISTORICO = Pgto Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("13 SALARIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem 13 SALARIO, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PRO LABORE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PRO LABORE, HISTORICO = Pgto Pro-Labore Fornecedor/Cliente Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("AJUDA CUSTO/REFEICAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem AJUDA CUSTO/REFEICAO, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISTRIBUICAO DE LUCROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DISTRIBUICAO DE LUCROS, HISTORICO = Pgto Distribuicao dos Lucros Ref. Exercicio Mes-Ano Anterior ao Socio Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS DIF DE SALARIOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem INSS DIF DE SALARIOS, HISTORICO = Pgto Inss Ref. Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FGTS, HISTORICO = Pgto FGTS Ref. Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS - DSR/RESCISORIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FGTS - DSR/RESCISORIO, HISTORICO = Pgto FGTS Rescisorio Ref. Funcionario Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO DE VIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem SEGURO DE VIDA, HISTORICO = Pgto Seguro de Vida Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem EMPRESTIMOS, HISTORICO = Pgto Emprestimo Consignado Funcionarios Ref. Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FINAME, HISTORICO = Pgto Finame Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICOES SINDICAIS EMPREGADOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONTRIBUICOES SINDICAIS EMPREGADOS, HISTORICO = Pgto Contribuicao Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO CONFEDERATIVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONTRIBUICAO CONFEDERATIVA, HISTORICO = Pgto Contribuicao Confederativa Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CORREIOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CORREIOS, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BREDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem LOCACAO, Fornecedor/Cliente contem BREDA, HISTORICO = Pgto Locacao Onibus Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.G.M.K"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem LOCACAO, Fornecedor/Cliente contem S.G.M.K, HISTORICO = Pgto Fatuara de Locacao Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DOACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DOACOES, HISTORICO = Pgto Doacao ao Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS CARTORIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DESPESAS CARTORIO, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDACAO AVIBRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONDOMINIO/LOCACAO, Fornecedor/Cliente contem FUNDACAO AVIBRAS, HISTORICO = Pgto Condominio Edificio Ruy Doria";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONDOMINIO EST.ROD. DE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONDOMINIO/LOCACAO, Fornecedor/Cliente contem CONDOMINIO EST.ROD. DE, HISTORICO = Pgto Condominio Estacao Rodovia Presidente Kennedy - Jacarei";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO DE BENS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem LOCACAO DE BENS, Fornecedor/Cliente contem PREFEITURA, HISTORICO = Pgto Aluguel Prefeitura Municipal de Taubate";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL POS - CIELO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ALUGUEL POS - CIELO, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem AGUA, HISTORICO = Pgto Agua Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEIS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDACAO AVIBRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ALUGUEIS, Fornecedor/Cliente contem FUNDACAO AVIBRAS, HISTORICO = Pgto Aluguel Villas Boas Imoveis";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SINFREVALE/FRESP/SETPESP/AVETP/CIESP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem SINFREVALE/FRESP/SETPESP/AVETP/CIESP, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IPVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem IPVA, HISTORICO = Pgto Fornecedor/Cliente Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS E INFRACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem MULTAS E INFRACOES, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NACIONAL DE METRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem TAXAS E LICENCAS, Fornecedor/Cliente contem NACIONAL DE METRO, HISTORICO = Pgto Instituto Nacional de Metrologia, Qualidade e Tecnologia - INMETRO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem TAXAS E LICENCAS, Fornecedor/Cliente contem PREFEITURA, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DANOS MATERIAIS TERCEIROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DANOS MATERIAIS TERCEIROS, HISTORICO = Pgto Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INDENIZACAO ACIDENTE DE TRANSITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem INDENIZACAO ACIDENTE DE TRANSITO, HISTORICO = Pgto Complemento (01) Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ARTESP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ARTESP, HISTORICO = Pgto Taxa de Administracao ARTESP";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESEGE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RESEGE, HISTORICO = Pgto Taxa de Administracao EMTU";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FROTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem SEGURO FROTA, HISTORICO = Pgto Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO FACULTATIVO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem SEGURO FACULTATIVO, HISTORICO = Pgto Complemento (01) Capemisa";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PEDAGIOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PEDAGIOS, HISTORICO = Pgto Pedagios Ref. Data Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LANCHES / REFEICOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem LANCHES / REFEICOES, HISTORICO = Pgto Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTACIONAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ESTACIONAMENTO, HISTORICO = Pgto Estacionamento Complemento (03) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PASSAGENS RODOV/AEREAS/METRO/TAXI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PASSAGENS RODOV/AEREAS/METRO/TAXI, HISTORICO = Pgto Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS DE VIAGEM") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE BIASI AUDITORES IND"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DESPESAS DE VIAGEM, Fornecedor/Cliente contem DE BIASI AUDITORES IND, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFAS BANCARIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem TARIFAS BANCARIAS, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA ADM CARTAO DEBITO/CREDITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem TAXA ADM CARTAO DEBITO/CREDITO, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem IRPJ, HISTORICO = Pgto Complemento (01) Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONSORCIO, HISTORICO = Pgto Fornecedor/Cliente Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTORNO DE FORNECEDOR/CLIENTE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ESTORNO DE FORNECEDOR/CLIENTE, HISTORICO = Pgto Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INTERNET/ICONET/NIP CABLE/TERRA/SERASA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem INTERNET/ICONET/NIP CABLE/TERRA/SERASA, HISTORICO = Pgto Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL DE ESCRITORIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem MATERIAL DE ESCRITORIO, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PLASTIFICACOES/CARIMBO/COPIA CHAVE/XEROX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PLASTIFICACOES/CARIMBO/COPIA CHAVE/XEROX, HISTORICO = Pgto Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ACORDO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURANCA DO TRABALHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem ACORDO, Complemento (01) contem SEGURANCA DO TRABALHO, HISTORICO = Pgto Complemento (03) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO SALARIAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ADIANTAMENTO SALARIAL, HISTORICO = Pgto. Complemento (01) Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem COFINS, HISTORICO = Pgto. Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO/LOCACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONDOMINIO/LOCACAO, HISTORICO = Pgto. Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("1708"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF, Complemento (03) contem 1708, HISTORICO = Pgto. Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("5952"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF, Complemento (03) contem 5952, HISTORICO = Pgto. Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO EM DINHEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem EMPRESTIMO EM DINHEIRO, HISTORICO = Pgto. Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTOS DE COMBUSTIVEIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem POSTOS DE COMBUSTIVEIS, HISTORICO = Pgto. Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GUIA DE RECURSO PROCESSO TRABALHISTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem GUIA DE RECURSO PROCESSO TRABALHISTA, HISTORICO = Pgto. Complemento (01) Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS - FOLHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem INSS - FOLHA, HISTORICO = Pgto. Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS CONTA GARANTIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem JUROS CONTA GARANTIDA, HISTORICO = Pgto. Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LICENCIAMENTO DE VEICULOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem LICENCIAMENTO DE VEICULOS, HISTORICO = Pgto. Complemento (01) Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DROGARIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DROGARIA, HISTORICO = Pgto. Complemento (01) Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAZAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BAZAR, HISTORICO = Pgto. Complemento (01) Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PIS, HISTORICO = Pgto. Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PLR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PLR, HISTORICO = Pgto. Complemento (01) Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURANCA DO TRABALHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem SEGURANCA DO TRABALHO, HISTORICO = Pgto. Complemento (01) Complemento (03) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DPVAT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DPVAT, HISTORICO = Pgto. Complemento (01) Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARE SP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DARE SP, HISTORICO = Pgto. Fornecedor/Cliente Complemento (01) Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LICENCIAMENTO DE VEICU") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LICENCIAMENTO DE VEICU, Complemento (01) contem TAXAS E LICENCAS, HISTORICO = Pgto. Complemento (01) Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO DO BRASIL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BANCO DO BRASIL, Complemento (01) contem TAXAS E LICENCAS, HISTORICO = Pgto. Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESTAURANTE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RESTAURANTE, HISTORICO = Pgto. Fornecedor/Cliente Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("201351"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 201351, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3506"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3506, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("100665"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 100665, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("100668"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 100668, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA PAGAMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IR RETIDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FOLHA PAGAMENTO, Complemento (01) contem IR RETIDO, HISTORICO = Pgto Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ICMS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ICMS, HISTORICO = Pgto Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem INSS, HISTORICO = Pgto Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem iss, HISTORICO = Pgto. Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RESSARCIDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF, Complemento (03) contem RESSARCIDO, HISTORICO = Pgto. Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem csll, HISTORICO = Pgto. Complemento (01) Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CSLL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("4,65"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem csll, Complemento (03) contem 4,65, HISTORICO = Pgto. Complemento (01) Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("100879") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 100879, Tipo Planilha contem extrato, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1490"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1490, HISTORICO = Pgto de IRRF PJ ref.: Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3158"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3158, HISTORICO = Compra no Supermercado - Higiene /Limpeza/ Copa e cozinha";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO/HOSP/TRANSP/ALIMENTACAO") && StringUtil.removeSpecialCharsToUC(complemento04).equals(""))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem TREINAMENTO/HOSP/TRANSP/ALIMENTACAO, Complemento (04) contem em branco, HISTORICO = Gasto com transporte - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3689"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3689, HISTORICO = Perdas com Sinistros e Roubos.";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("100399"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 100399, HISTORICO = Pgto Encargos 4,65% Ref. NF Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem INMETRO, Complemento (01) contem TAXAS E LICENCAS, HISTORICO = Pgto Instituto Nacional de Metrologia, Qualidade e Tecnologia - INMETRO";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAUDO DE TRANSPORTE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS E LICENCAS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LAUDO DE TRANSPORTE, Complemento (01) contem TAXAS E LICENCAS, HISTORICO = Pgto de taxas de servicos de transito";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HIST PADRAO"))  historico = "Pgto Fornecedor NF" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("201351"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS"))  historico = "Pgto." + " " + complemento01 + " " + "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RESSARCIDO"))  historico = "Pgto." + " " + complemento03 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL"))  historico = "Pgto." + " " + complemento01 + " " + "" + " " + documento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CSLL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("4,65"))  historico = "Pgto." + " " + complemento01 + " " + "" + " " + documento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("100879") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO DE CUSTO PADRAO")) {
        retornaCentroCusto = "2";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00001")) {
        retornaCentroCusto = "2";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00002")) {
        retornaCentroCusto = "2";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00003")) {
        retornaCentroCusto = "3";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00004")) {
        retornaCentroCusto = "4";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00005")) {
        retornaCentroCusto = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00006")) {
        retornaCentroCusto = "6";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00007")) {
        retornaCentroCusto = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00008")) {
        retornaCentroCusto = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(codCentroCusto).contains("00009")) {
        retornaCentroCusto = "9";
    }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA PARTICIPANTE")) {
        retornaParticipantePai = "100005";
    }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (parametro.equals("documento")) parametro2 = parametro2.replace("TXT","");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    if (parametro.equals("nomeOrigem")) lote = cutString(lote," ");
    if (parametro.equals("complemento01")) lote = cutString(lote,"-");
    if (parametro.equals("nomePortador")) lote = cutString(lote,0,3);
    if (parametro.equals("complemento03")) lote = cutString(lote,0,"AG =");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TERCEIRO") && parametro.equals("documento")) lote = cutString(lote,0," "); //ROT-2018-042977

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO").trim();

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if(line.contains("ULTIMOS") && line.contains("LANCAMENTOS")) naoLeMais = true;

            if (memFile.getStringField(0).equals("")) continue;
            try {
                Date dt = memFile.getDateField(0);
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(0, "dd/MM/yyyy");    // --- VERIFICAR
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try{
						//2309-016776
						dataMovimento     = getDate(dataMovimento, 0, line, false, "", memFile, logger);
					
					}catch (Exception dt3) {
						continue;
					}
                }
            }

            try {
                valorDocumento = Math.abs(memFile.getDoubleField(3));
            } catch(Exception e) {
                valorDocumento = 0;
            }
            if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
            else {
                try {
                    valorDocumento = Math.abs(memFile.getDoubleField(4));
                } catch(Exception e) {
                    valorDocumento = 0;
                }

                if(valorDocumento > 0) debitoCredito = "EXTRATO-DEBITO"; else continue;
            }


            nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(1);
            complemento02 = memFile.getStringFieldRemoveEspCharsUpper(2);
            documento = memFile.getStringFieldRemoveEspCharsUpper(2);


            if(naoLeMais) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoAux 			 = "";
	String dataDDMM 		 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	int ivalorDocumento		 = -1;
	int inomeOrigem			 = -1;
	int idataMovimento		 = -1;
	int icomplemento02		 = -1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO").trim();
	if(jDados.has("ANOAUX"))  			anoAux  = jDados.optString("ANOAUX").trim();
	
	//logger.logInfo("Tipo: "+tipoExtrato);

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);


            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;
            dataMovimento = "";

			if (tipoExtrato.equals("TIPO04")) {
				if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("")){
					ivalorDocumento	= 5;
					inomeOrigem		= 4;
					idataMovimento	= 1;
				} else{
					ivalorDocumento	= 4;
					inomeOrigem		= 3;
					idataMovimento	= 0;
				}
				
				if(line.contains("EXTRATO DE")){
					anoAux = cutString(line, line.lastIndexOf("/20"), line.lastIndexOf("/20")+5);
				}
                
				
				

                if (memFile.getStringFieldRemoveEspCharsUpper(0).equals(0)) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("NOME:")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA:")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE CONTA CORRENTE")) continue;
				if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("MENTO")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("S A L D O")) continue;
				
				
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
				
				
				String dataString = "";

                //try {
                    // Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    // dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    // dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                // } catch (Exception dt1) {
                     try {
                         //Date dt = memFile.getDateField(idataMovimento);
                         //dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                         //dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim();
						dataString = dataString +"/"+ anoAux;
						
						Date dt2  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt2, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt2, "yyyy-MM");
						
                     } catch (Exception dt2) {
                         try {
                            dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, 10).replaceAll("\\-", "\\/");
                            Date dt  = DateUtil.stringToDate(dataString, "yyyy/MM/dd");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							
                        } catch (Exception dt2) { 
							try{
								dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
								dataLote  = getCampoDate(dataMovimento, "", "yyyy-MM");
							}catch (Exception dt2) {}
							}
						}
                 //}
				
				//logger.logInfo("Data: "+dataMovimento);

                if (dataMovimento.equals("")) continue;

                strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

                if (strValorDocumento.contains("-")) debitoCredito  = "EXTRATO-DEBITO";
                if (!strValorDocumento.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrj) { valorDocumento = 0;}

                if (valorDocumento == 0) continue;
				
				//logger.logInfo("DT - "+ dataMovimento +" | VD - "+ valorDocumento +" | DC - "+ debitoCredito +" | NM - "+ nomeOrigem);

            }
			if (tipoExtrato.equals("TIPO03")) {
				ivalorDocumento	= 3;
				inomeOrigem		= 1;
				idataMovimento	= 0;
				icomplemento02	= 2;
				
				//2405-037750 - condicao adicionada pq estava causando erro quando nao dava para separar a data por espaco
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				if(dataString.contains(" ")){
					String[] dataDDMMarray	 = {};
					dataDDMMarray = memFile.getStringFieldRemoveEspCharsUpper(0).trim().split(" ");
					dataDDMM = dataDDMMarray[0]+dataDDMMarray[1]+getMonth(dataDDMMarray[2])+anoAux;
				}
				
				//String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				
				if (getCampoDate(dataString).equals("") && !(dataString.length() == 5)) dataString = dataDDMM;
				
				if (!dataString.equals("") && !(dataString.length() == 5)) {
					String dataMovimentoAux	= getCampoDate(dataString);
					if (dataMovimentoAux.contains("/")) {
						dataMovimento		= getCampoDate(dataString);
						dataLote			= getCampoDate(dataMovimento, "", "yyyy-MM");
					}
				}
				
				if(dataString.length() == 5){
					try {
						Date dt = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
						int datanum = Integer.parseInt(dataString);
						Calendar calSerial = Calendar.getInstance();
						calSerial.setTime(dt);
						calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
						dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
					}catch (Exception dt2) { }
				}
				
				if(ivalorDocumento >=0){
					try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
					catch (Exception vlrj) { valorDocumento = 0;}
				}
				
				if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
				if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				
				valorDocumento = Math.abs(valorDocumento);
				
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
				
				// logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento);
			}
			if (!tipoExtrato.equals("TIPO03") && !tipoExtrato.equals("TIPO04")) {
				
				if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("DATA:")) continue;
				
				try {
					Date dt = memFile.getDateField(1);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(1, "dd/MM/yyyy");    // --- VERIFICAR
						dataMovimento = DateUtil.dateToString(dt, "dd/MM");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(1).trim();
						if(dataMovimento.length() >= 5) dataMovimento = dataMovimento.substring(0, 5);
					}
				}
				// logger.logInfo("OTT1 -> " + " |DM=" + dataMovimento + " |ANODATA -> " + anoData);
				dataMovimento = dataMovimento + "/" + anoData;
				// logger.logInfo("OTT2 -> " + " |DM2=" + dataMovimento + " |ANODATA2 -> " + anoData);
				try {
					Date dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
				} catch (Exception dateException) {
					continue;
				}
			
				if (tipoExtrato.equals("TIPO01")) {
					try {
						valorDocumento = memFile.getDoubleField(5);
					} catch(Exception e) {
						valorDocumento = 0;
					}
				}

				if (tipoExtrato.equals("TIPO02")) {
					try {
						valorDocumento = memFile.getDoubleField(6);
					} catch(Exception e) {
						valorDocumento = 0;
					}
					complemento02 = memFile.getStringFieldRemoveEspCharsUpper(5);
				}
				if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
				if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				valorDocumento = Math.abs(valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(4);
				if (tipoExtrato.equals("TIPO01") && !memFile.getStringFieldRemoveEspCharsUpper(8).equals("")) {
					nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(8);
					complemento02 = memFile.getStringFieldRemoveEspCharsUpper(4);
				}
			}
			
			if(tipoExtrato.equals("TIPO02")){
				documento = memFile.getStringFieldRemoveEspCharsUpper(5);
			}
				
			if(tipoExtrato.equals("TIPO03")){
				documento = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}

