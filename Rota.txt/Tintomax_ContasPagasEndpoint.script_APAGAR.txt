{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
{import: io_contabil.Ottimizza_MeuCaixa};
{import: io_contabil.Lancamentos};
{import: io_contabil.TemplateUtils};
{import: io_contabil.OICUtils};

// TEMPLATE 20.07.2020
public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
	SysProperties propsEmp = SysProperties.getInstance();
    JSONObject roteiroCRMPrincipal = getRoteiro();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();

    JSONObject objetoRoteiro = new JSONObject();
    objetoRoteiro.put("contabilidade", roteiroCRM.optString("contabilidade"));
    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
	//Contectar na Base de Dados depara do heroku(nuvem)
	DBPostgreSQL dbIODepara = null;

    String empresa = getNomeEmpresa();
    String codEmpresa = props.get(empresa + "_COD_EMPRESA");
    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM");
    String fornecedorUnico = props.get("FORNECEDOR_UNICO");

	if (codEmpresa == null) {
		empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
		codEmpresa = props.get(empresa + "_COD_EMPRESA");
	}

	String tipoProduto = "";
	try {
		tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
	} catch (Exception xx) {tipoProduto = "OIC_PACOTE";}


	if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";
	
    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";


    String backupDirName = dirName + "/Processado";

    boolean erroShrink = false;
    boolean geraCabecalhoCordilheira = true;
    boolean cabecalhoNaoEncontrada        = true;
    boolean apagaExtrato        = false;
	boolean apagaContaT         = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    String tipoEmail            = "";

    HashMap mapaVariavel		= new HashMap();
    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();

	JSONObject recordF = new JSONObject();


    String cruzaExtrato			= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";

    boolean geraFiscal			= false;
    String loteFiscal			= "";
	boolean apagaStatus         = false;

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida	= "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote				= "";
    boolean enviouEmail 	= false;
    String regraContaMovimento 		= "";
    String regraHistorico 			= "";
    String separadorCsv				= "";
    String tipoPlanilha				= "";
	String contaTemp				= "";
    boolean primeiroArquivo 		= true;
    boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	boolean forcarPartidaDobrada	= false;

	boolean temOFX					= false;
	boolean temFiltro				= false;
	boolean temOMC	                = false;
	boolean temFiscal               = false;
	boolean temLinhas               = false;
	boolean temIgnorar              = false;
	
	boolean logs = false;								  
	StringBuilder logsTxt = new StringBuilder();										 
	JSONObject deParaObj = new JSONObject();

	int abaConvertida = 0;

	String retornaPadroes = "";

	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";

    try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
        String extensao = "";
        for(int extArquivo = 0; extArquivo < 15; extArquivo++){
            if(extArquivo == 0) extensao = ".ofx,.OFX";
            if(extArquivo == 1) extensao = ".ofx,.OFX";
            if(extArquivo == 2) extensao = ".ofx,.OFX";
            if(extArquivo == 3) extensao = ".csv,.CSV";
            if(extArquivo == 4) extensao = ".csv,.CSV";
            if(extArquivo == 5) extensao = ".csv,.CSV";
            if(extArquivo == 6) extensao = ".xlsx,.XLSX";
            if(extArquivo == 7) extensao = ".xlsx,.XLSX";
            if(extArquivo == 8) extensao = ".xlsx,.XLSX";
            if(extArquivo == 9) extensao = ".txt,.TXT";
            if(extArquivo == 10) extensao = ".txt,.TXT";
            if(extArquivo == 11) extensao = ".txt,.TXT";
            if(extArquivo == 12) extensao = ".pdf,.PDF";
            if(extArquivo == 13) extensao = ".pdf,.PDF";
            if(extArquivo == 14) extensao = ".pdf,.PDF";

			if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;

			boolean ignoraAbas = false;

            for (int porAba = 0; porAba < 60; porAba++) {



				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
                abasEspecificas 		= abasEspecificas.replace(",",";");

				if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
				// if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
				if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";


		// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				//String abasFor			= "";
				//if (abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
				//	try {
				//		int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
				//		int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
				//		for (int k = a; k <= b; k++){
				//			if (k < b) abasFor += k+";";
				//			else abasFor += k;
				//		}
				//	} catch (Exception fr) {}
				//	if(!abasFor.equals("")) abasEspecificas = abasFor;
				//}

				
                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
                }

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV
                if(extensao.contains("CSV")){
                    FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
                    fileLoader2.loadFiles();
                    for (MemoryFile memFile: fileLoader2.getMemFiles()) {
                        if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger);
                        if (memFile.getFilename().toUpperCase().contains("CSV")) {
                            while (memFile.hasNextLine()) {
                                try {
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                                    if (line.length() < 10) continue;
                                    String [] fields1 = line.split(";");
                                    String [] fields2 = line.split(",");
                                    if(fields1.length > 0 && fields2.length > 0){
                                        if(fields1.length < fields2.length) { separadorCsv = ","; break; }
                                        if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
                                    }
                                }
                                catch(Exception xx) {}
                            }
                            break;
                        }
                    }
                }

				// #DOCUMENTACAO
				// carregamento do arquivo

				if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
				// salva arquivo no hasmap para posterior eliminacao

                FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                fileLoader.loadFiles();

                for (MemoryFile memFile: fileLoader.getMemFiles()) {

                    putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);

                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorAlternativo = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;
                    int idataFake		= -1;

                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred


                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;
					
					double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0}; 


                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData			= "";
                    boolean zerar			= true;
					boolean filtro			= true;

                    String lerAposPrincipal   = "";
                    boolean isLinhaPrincipal  = false;
                    boolean ignorarAntes	  = false;
                    boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";
					
					StringBuilder cabecalhoPlanilha = new StringBuilder();
					StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
					
					int  	      contadorCabecalho = 0; 
					
					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
                    if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
					
                    nomeArquivo = memFile.getFilename().replace("%","");

					if (nomeArquivo.toUpperCase().startsWith("ABA_")) {

						abaConvertida = TemplateUtils.verificaAba(nomeArquivo);
						abasEspecificas = roteiroCRMPrincipal.optString("Abas_Especificas");

						// logger.logDebug("ACE " + nomeArquivo + " | " + abaConvertida + " | " + abasEspecificas);

						if (!abasEspecificas.equals("")) {
							if (!abasEspecificas.contains(String.valueOf(abaConvertida))) continue;
						}
					} else abaConvertida = porAba;

					String abaArquivo = String.valueOf(abaConvertida);
					if (abaConvertida == 0) abaArquivo = "0";

					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

					if (dbIODepara == null) {
                        dbIODepara = connectDeParaDb(logger);
                    }
					
                    if(primeiroArquivo) {
                        limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
                        primeiroArquivo = false;
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";


                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    //########################################################################

                    // COLOCAR AQUI funcao para carregar variaveis do cliente
                    // CNPJ, EMAIL, contas fixas, etc.


                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================


                    JSONObject objetoParametro = new JSONObject();

					// #DOCUMENTACAO
					// busca de indices da planilha principal
                    if (tipoPlanilha.equals("MOVIMENTO")) {
                        roteiroCRM = getRoteiro();

                        inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                    }

					jStatus = new JSONObject();
					putStatus(dirName, "", jStatus, logger);
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {

							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);

                                //Colocar aqui
								
								contadorCabecalho++;
								if (contadorCabecalho<15) {
									cabecalhoPlanilha.append(line).append(" "); 
									cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								}
								else {
									cabecalhoPlanilha = new StringBuilder();
									
									// ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario 
									 if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && abaConvertida > 2) ignoraAbas = true;
								}

								if (cont < 10)  putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);



								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////

								JSONObject jDadosPadrao = new JSONObject();
								jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento).put("NOMEEMPRESA",nomeEmpresa)
											.put("CODEMPRESA", codEmpresa).put("CONTABILIDADE", roteiroCRM.optString("contabilidade"))
											.put("NOMEARQUIVO", nomeArquivo);
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								if (nomeArquivo.toUpperCase().contains(".OFX")) {

									if (!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE")) {
										tipoPlanilha = "EXTRATO-OFX";


										// quando o OFX vem em apenas 1 linha todas as informacoes
										// quebramos linha e geramos um novo arquivo para gerar como um ofx normal
										if (line.contains("ACCTID")) {
											String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
											FileWriter writer = new FileWriter(fileOfx);
											writer.writeNewFile(line.replaceAll("><",">\r\n<"));
										}
										putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
										jDadosPadrao.put("CODEMPRESA", codEmpresa);
										jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento);
										jDadosPadrao.put("NOMEEMPRESA",    nomeEmpresa);
										jDadosPadrao.put("NOMEARQUIVO",    nomeArquivo);
										if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
										readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 615");
										putStatus(dirName, "",  new JSONObject(), logger);
										temOFX = true;
										break;
									}

									// quando FOR OFX e estiver rodando pelo template
									// e a empresa for OIC pacote rodar pela especifica, entao foi dado um break para agili
									if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
										break;
									}

								}
								// ----------------------------------------------------------------------------------------------------------

                                /*
								if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null) {
                                // if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0) { // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

                                       // ----------------------------------------------------------------------------------------------------------
									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());

                                    //Colocar aqui
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
                                    JSONObject objRetorno = new JSONObject(retornaPadroes);
                                    if (objRetorno.has("tipoRetorno")) {
                                        anoData        = objRetorno.optString("anoData");
                                        retornaPadroes = objRetorno.optString("tipoRetorno");
                                        nomePortador   = objRetorno.optString("nomePortador").trim();
                                        complemento01  = objRetorno.optString("complemento01").trim();
                                        nomePortador2  = objRetorno.optString("nomePortador2").trim();
                                    } 
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
                                }

                                 */

								if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
									// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData);
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());

									// if (codEmpresa.contains("104")) {
									// roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
									// }

									// logger.logDebug("nome do arquivo " + nomeArquivo);

									retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);


									// logger.logDebug("retorna padroes -> " + retornaPadroes);


									// logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);

									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}

									// logger.logDebug("NP23 " + nomePortador + " | " + nomePortador2);

									// logger.logDebug("NP2 ==== "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE")){

                                    JSONObject jDados               = new JSONObject();

                                    jDados.put("erpContabilidade",  roteiroCRM.optString("erpContabilidade"));
                                    jDados.put("CODEMPRESA",        codEmpresa);
                                    jDados.put("NOMEARQUIVO",       nomeArquivo);
                                    jDados.put("LINE",              line);
                                    jDados.put("PRIMEIRAVEZ",       primeiraVezDuplicata);   jDados.put("DIRNAME",      		dirName);
                                    jDados.put("TIPOPLANILHA",      tipoPlanilha);
                                    jDados.put("TIPOLANCAMENTO",    tipoLancamento);
                                    
                                    primeiraVezDuplicata = leituraDuplicataPadrao(jDados, memFile, mapaVariavel, dbIOCont, logger);

                                    if(!primeiraVezDuplicata){
                                        jStatus = new JSONObject();
									    putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
								} 
								// ----------------------------------------------------------------------------------------------------------

								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								tipoPlanilha = getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                                    
                                    // Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
                                    // if(!roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(porAba))) continue;

								}


								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								 
                                try {
                                    fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
                                } catch (IllegalArgumentException e) {
                                    //TODO: handle exception
                                    erroShrink = true;
                                    logger.logError("Deu ruim no shrink \n"+e);
                                    break;
                                }
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////

								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "");
									histobj.put("mesAnoAnterior", "");
									histobj.put("mesAno2Anterior", "");
									histobj.put("mesAnoAtual", "");
									histobj.put("contaMovimento", "");
									histobj.put("contaPortador", "");
									histobj.put("contaDebito", "");
									histobj.put("contaCredito", "");
									histobj.put("contaJuros", contaJuros);
									histobj.put("contaDesconto", contaDesconto);
									histobj.put("contaMulta", contaMulta);
									histobj.put("valorDocumento", "");
									histobj.put("valorJuros", "");
									histobj.put("valorDesconto", "");
									histobj.put("valorMulta","");
									histobj.put("codFilial", "");
									histobj.put("numeroAba", String.valueOf(porAba));
									histobj.put("tipoPlanilha", tipoPlanilha);
									histobj.put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

                                //yuri
								if(tipoPlanilha.contains("SICOOB_PAG")){
									if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("C")) naoLeMais = true;
									
									if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D")) naoLeMais = false;
								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;

								//logger.logDebug("AE");

								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                                    logger.logInfo("####################--> TIPOPLANILHA: " + tipoPlanilha);
                                    logger.logInfo("####################--> line: " + line);
                                    if( tipoPlanilha.equals("MOVIMENTO") && line.toUpperCase().contains("TOTAL DE LAN") && 
                                        line.toUpperCase().contains("AMENTEOS") && line.toUpperCase().contains("TOTAL DE LAN") && 
                                        (line.toUpperCase().contains("NACIONAIS") || line.toUpperCase().contains("INTERNACIONAIS"))) continue; 

                                    //Colocar aqui
                                   if (tipoPlanilha.equals("MOVIMENTO")){
									   String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
										if (!dataString.equals("")) {
											String dataMovimentoAux	  = getCampoDate(dataString);
											if (dataMovimentoAux.contains("/")) {
												dataMovimento     = getCampoDate(dataString);
												dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
												
											}
											logger.logDebug("OTT -> " + " |DM=" + dataMovimento + " |DTStg=" + dataString);
											if (!dataString.equals("") && dataMovimento.equals("") ||!dataString.equals("")) {
												if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
													String pattern = "";
													if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
														if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
															pattern = "yyyy-MM-dd hh:mm:ss";
														} else {
															pattern = "yyyy-MM-dd";
														}
														dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
													} else {
														try {
															pattern = "ddddd";
															dataString = cutString(dataString, 0, 5);
															Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
															int datanum = Integer.parseInt(dataString);
															Calendar calSerial = Calendar.getInstance();
															calSerial.setTime(dt);
															calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
															dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
														} catch (Exception dt2) {dataMovimento = "";}
													}
													if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
												}
											}
										}
								   
								    }
									if (!tipoPlanilha.equals("MOVIMENTO")){
										// #Fabrica(2019-05-20)
										try{
											dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
                                   if(dataMovimento.equals(""))continue;
                                    // leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
											
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									if(tipoPlanilha.equals("MOVIMENTO") && (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals(""))){
										nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									}
									if(!tipoPlanilha.equals("MOVIMENTO")) nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);
									// logger.logDebug("DOC -> "+documento);
									
									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									if(!tipoPlanilha.contains("SICOOB_PAG")) complemento01   = cutString(complemento01, 0, " ");
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);
                                    
                                    if(tipoPlanilha.contains("SICOOB_PAG")){
										if(complemento02.equals("")){
											complemento02 = "CAPTURA COMPLEMENTO01";
										} 
									}

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorDocumentoArray[0] = 0;
                                    valorDocumentoArray[1] = 0;
                                    valorDocumentoArray[2] = 0;
                                    valorDocumentoArray[3] = 0;
                                    valorDocumentoArray[4] = 0;
                                    valorDocumentoArray[5] = 0;
                                    valorDocumentoArray[6] = 0;
                                    valorDocumentoArray[7] = 0;
                                    valorDocumentoArray[8] = 0;
                                    valorDocumentoArray[9] = 0;
									
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									
									// quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto 
									// no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
									// no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
									if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
										try{
											if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
											else valorDesconto = 0;
										} catch(Exception vlrd) {}
									}
									
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
										String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
										
										for(int iv = 0; iv < indiceValores.length; iv++) {
											try{valorDocumentoArray[iv] = memFile.getDoubleField(Integer.parseInt(indiceValores[iv]));}
											catch (Exception vlrd) { valorDocumentoArray[iv] = 0; }
											
										}
										
									}
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
                                    
                                    if (tipoLancamento.equals("PAGAR"))
                                        debitoCredito = "EXTRATO-DEBITO";
                                    
                                    if (tipoLancamento.equals("RECEBER"))
                                        debitoCredito = "EXTRATO-CREDITO";
                                

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento < 0 && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorDocumento > 0) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && valorDocumento == 0) {
										continue;
									}
								}

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
									
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
											// continue;
										}
									}

									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);

									// // comentado em 20200603
									// String dataString = getStringTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro).trim();
									// dataMovimento	  = getCampoDate(dataString);
									// dataLote		  = getCampoDate(dataString, "", "yyyy-MM");

									// complemento01 = getStringTXT(roteiroCRM.optString("complemento01").toUpperCase(), line, objetoParametro);
									// complemento02 = getStringTXT(roteiroCRM.optString("complemento02").toUpperCase(), line, objetoParametro);
									// complemento03 = getStringTXT(roteiroCRM.optString("complemento03").toUpperCase(), line, objetoParametro);
									// complemento04 = getStringTXT(roteiroCRM.optString("complemento04").toUpperCase(), line, objetoParametro);
									// complemento05 = getStringTXT(roteiroCRM.optString("complemento05").toUpperCase(), line, objetoParametro);
									// complemento06 = getStringTXT(roteiroCRM.optString("complemento06").toUpperCase(), line, objetoParametro);
									// complemento07 = getStringTXT(roteiroCRM.optString("complemento07").toUpperCase(), line, objetoParametro);
									// complemento08 = getStringTXT(roteiroCRM.optString("complemento08").toUpperCase(), line, objetoParametro);
									// complemento09 = getStringTXT(roteiroCRM.optString("complemento09").toUpperCase(), line, objetoParametro);
									// complemento10 = getStringTXT(roteiroCRM.optString("complemento10").toUpperCase(), line, objetoParametro);
									// cpfCnpj		  = getStringTXT(roteiroCRM.optString("cpfCnpj").toUpperCase(), line, objetoParametro);

									// nomePortador  = getStringTXT(roteiroCRM.optString("portador").toUpperCase(), line, objetoParametro);
									// documento     = getStringTXT(roteiroCRM.optString("documentoNF").toUpperCase(), line, objetoParametro);
									// codCcOrigem   = getStringTXT(roteiroCRM.optString("centroCusto").toUpperCase(), line, objetoParametro);
									// nomeOrigem    = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);

									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    if (tipoLancamento.equals("PAGAR")) 
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-DEBITO";
                                    
                                    if (tipoLancamento.equals("RECEBER")) 
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-CREDITO";

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {											
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
                                        if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }

                                    if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && valorDocumento > 0)		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								//---~---~---~---~---~---~-


								//##########################################################

								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// if(!cpfCnpj.equals("")){	//20200528 #codigopavoroso
									// if(Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim())){
										// if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, true, false);
										// else			cpfCnpj = trataCpfCnpj(cpfCnpj);
									// }
									// if(!Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim())){
										// if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, false, false);
										// else			cpfCnpj = trataCpfCnpj(cpfCnpj, false, true);
									// }
								// }

								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
								nomeOrigem = stringNormalizer(nomeOrigem, true);
								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
								nomePortador = stringNormalizer(nomePortador, true);
								
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01") && !tipoPlanilha.contains("SICOOB_PAG")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								if(cont == 0) continue;

								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 
								
								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
                                    if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;
                                // lote = nomeEmpresa + "_" + codEmpresa + "_" + nomeArquivo  + "_" + dataLote + "_" + tipoLancamento;

								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								
								String modificaData = getModificaData(histobj);
								
								
								if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
 								if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
 								if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
 								if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
 								if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
 								if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);
								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
                                    ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(porAba);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
								if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

									for (int iv =0; iv < 10; iv++) { 
										
										if (valorDocumentoArray[iv] == 0) continue;
										
										String rotuloColuna = "";
										String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";"); 
										
										try {
											rotuloColuna = rotuloArray[iv];
										} 
										catch (Exception xx) {
											continue;
										}
										
										if (rotuloColuna.equals("")) continue;
										
									
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + rotuloColuna + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										histobj.put("dataMovimento", dataMovimento);
										
										ttTemp.complemento05 = rotuloColuna;
										histobj.put("complemento05", rotuloColuna);
										
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										
										ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
									}
								}
								
							} catch (Exception e) {
								logger.logError("EndpointA:", e);
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

            }
            try{
                FileUtil.moveToDir(dirName+"/"+nomeArquivo, backupDirName);
            }catch(Exception ee){}

        }
    } catch (Exception ee) {
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        logger.logError("EndpointA: ", ee);
    }

    if(erroShrink){
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        throw new Exception();
    }
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
        (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
        (Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
           
        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento);
                    recMov.put("CONTAMOVIMENTO", "");
                    recMov.put("CONTAPORTADOR", "");
                    recMov.put("CONTLINHATEXTO", String.valueOf(t));

                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
                    if (nomeArquivo.toUpperCase().contains("FILTRO_")){
                        boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
                        if(!filtro) continue; 
                    } 
                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;

                }
            }
        }
        catch (Exception xx) {
            logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    } // if tipo planilha nao igual extrato
    // --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
    StringBuilder txtFiscal     = new StringBuilder();
    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    String nomePortadorAnterior = "";
    if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal.append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini


    int contRegra = -1;
    String loteEtapaTres = "";
	
    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }

            loteEtapaTres = ttMov.lote;
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+  cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");

			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
            ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
            if (ttJ != null && ttJ.valorLido == 0) {
                ttMov.valorJuros  = ttJ.valorJur;
                ttJ.valorLido     = 1;
                mapaJuros.put(chaveJuros,ttJ);

            }

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
            ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
            if (ttD != null && ttD.valorLido == 0) {
                ttMov.valorDesconto  = ttD.valorDesc;
                ttD.valorLido     = 1;
                mapaDesconto.put(chaveDesconto,ttD);

            }
            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            classificaPlano     = roteiroCRM.optString("classificaPlano");
            classificaFornec    = roteiroCRM.optString("classificaFornec");
            cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
            Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
            String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();

            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;

            //yuri
			if(ttMov.tipoPlanilha.contains("SICOOB_PAG")){
				if(ttMov.complemento02.contains("CAPTURA COMPLEMENTO01")){
					ttMov.nomeOrigem    = ttMov.complemento01;
					ttMov.complemento02 = ttMov.complemento01;
				}
			}

            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;


			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem    = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();
                    jaCruzou = true;

                }
            }

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");
                    if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();

                }

            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

            contaJuros        = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
            contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
            contaMulta        = roteiroCRM.optString("contaFixaMulta");



            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }

            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                          ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                          ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
            if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
                    if(!ttMov.cpfCnpj.equals("")){
                        contaMovimento = ttMov.cpfCnpj;
                        if(roteiroCRM.optString("erpContabilidade").toUpperCase().contains("SCI UNICO") && !ttMov.cpfCnpj.equals(""))
                        contaMovimento = ttMov.cpfCnpj + "P";
                    }
                }
                else {ttMov.cpfCnpj = "";}
			}
            regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


            double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }
            
            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            

            boolean regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

           //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
			logger.logDebug("CM == "+contaMovimento+" | CNPJ == "+ttMov.cpfCnpj+" | cp01 === "+ttMov.complemento01);
            if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaMovimento)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaMovimento)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = contaMovimento;
 					mapaPlano.put(contaMovimento,ttP);
				}
            }

            regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
			
			if (contaMovimento.equals("")){
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					//JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					
					if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
					if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							
							try{
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
 								
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								if (contaMovimento == null) contaMovimento = "";
								
								// Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota 
								if (contaMovimento.contains("T")) {
									apagaContaT    = true;
								}
								
								
							}else contaMovimento = "";
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/
							
							// RETIRA  T DA CONTA MOVIMENTO
							contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
							ttP.contaContabil     = contaMovimento;
							mapaDePara.put(ttMov.nomeOrigem,ttP);
						
						} 
						else {
							contaMovimento = ttP.contaContabil;
						}
						
						
					}  
				} catch  (Exception Ee) {}
			}
			if(roteiroCRM.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresa)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
                try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
                }
                catch  (Exception Ee) {}
            }

            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;
            if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

            if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresa)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }  
            }

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaPortador)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaPortador)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = contaPortador;
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
            }
            
            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = contaMovimento;
                ttMov.contaCredito = contaPortador;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = contaMovimento;
                ttMov.contaDebito   = contaPortador;
            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                if(ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                if(ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                           ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                           ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

            if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresa)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                          ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                          ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
            }
                        
            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
            if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
                ttMov.historico += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
            }

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }

            JSONObject jDescricaoDupl = new JSONObject();
            if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

            if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){
                temFiscal = true;
				apagaStatus = true;

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
					if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  jDados.put("CODEMPRESA",     codEmpresa + "-%");
                    
                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    // #Fabrica(2019-05-20)
                    // Descomentar a proxima linha para testar a razaoSocial do movimento com a jDescricaoDupl.optString("RAZAOSOCIAL") que vem das duplicatas em aberto!
                    // if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, razaoSocial);      //IDENTIFICAMOS UMA FALHA LOGICA
                    // if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem); //USAR ESSE
                    // #Fabrica(2019-07-30)
                    // Descomentar a proxima linha para testar o codigo de filial do movimento com a jDescricaoDupl.optString("SITUACAO") que vem das duplicatas em aberto! OBS: Lembrando que deve existir regra de c?digo filial no CRM
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorFilial(jDescricaoDupl, ttMov.codFilial);
                    // #Fabrica(2019-07-31)
                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, ttMov.complemento06);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  {
								txtFiscal.append(cutString(jDescricaoDupl.optString("CODEMPRESA"), "-"));
							}
							else {
								txtFiscal.append(jDescricaoDupl.optString("CODEMPRESA"));
							}
							
							txtFiscal.append(";");
							txtFiscal.append("1;");
							txtFiscal.append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINAL"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA"));
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
                            if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
							continue;
                        }
					}
				}

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
                        ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
                        
                        String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
                        String valorJurosAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros));
                        
                        double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros;
                        String valorCalcAux = "";
                        // #Fabrica(2019-08-06) @Vini
                        valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
                        
                        // if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {
							txtFiscal.append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal.append(StringUtil.leftPad(ttMov.documento, 8, "0"));
							txtFiscal.append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal.append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal.append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(valorJurosAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(ttMov.contaCredito, 9,  "0"));
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
					                    
                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							if(geraCabecalhoCordilheira) {
                                txtFiscal.append("DATA DE VENCIMENTO;DATA DO PAGAMENTO;CNPJ DO CLIENTE;DOCUMENTO;NOME/RAZAO;NUMERO DA PARCELA;VALOR ORIGINAL;VALOR PAGO;VALOR JUROS;VALOR DESCONTO;FORMA DE PAGAMENTO;NUMERO DA NOTA");
                                txtFiscal.append("\r\n");
                                geraCabecalhoCordilheira = false;
                            }

                            txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
							txtFiscal.append(";");
							txtFiscal.append(ttMov.dataMovimento);
							txtFiscal.append(";");
							txtFiscal.append(ttMov.cpfCnpj);
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal.append(";");
							txtFiscal.append(ttMov.documento);
							txtFiscal.append(";");
							txtFiscal.append(ttMov.nomeOrigem);
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORPARCELA").replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto)).replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(String.format("%.2f",ttMov.valorDesconto).replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal.append(";");
							txtFiscal.append(ttMov.documento);
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
                            if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
							continue;
                        }
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
                   
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							String separadorFiscal = "";
							String dataVencimento  = "";
							//String parcela		   = "1";
							String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							txtFiscal.append(cnpjEmpresa);
							txtFiscal.append("    ");

							if(tipoLancamento.contains("PAGAR"))	txtFiscal.append("E");
							if(tipoLancamento.contains("RECEBER"))	txtFiscal.append("S");

							txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							txtFiscal.append(StringUtil.rightPad("", 3, " ")); //serie
							
							txtFiscal.append(StringUtil.rightPad("", 2, " ")); //sub-serie
							txtFiscal.append(StringUtil.leftPad(ttMov.documento, 9, "0"));
							txtFiscal.append(StringUtil.leftPad("", 9, "0"));
							
							txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							txtFiscal.append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							txtFiscal.append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							if(contaPortador.length() > 1){
								contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							}
							
							txtFiscal.append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							txtFiscal.append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// txtFiscal.append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							if(tipoLancamento.contains("PAGAR"))	txtFiscal.append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							if(tipoLancamento.contains("RECEBER"))	txtFiscal.append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							txtFiscal.append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							txtFiscal.append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							txtFiscal.append("    "); //n?o encontrado o c?digo da receita
							
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
                            if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
							continue;
                        }
					}
				}
				
                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
                    JSONObject jDados = new JSONObject();
                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     99);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, ttMov.complemento06);

                    String chaveParcela = ttMov.documento + "-PARCELA";
					ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
					if (ttP == null) {
						ttP  			= new ttParcelaDominio();
						ttP.documento   = ttMov.documento;
						ttP.ultimaParcela = 0;
					}
					ttP.ultimaParcela++;
					
					mapaParcelaDominio.put(chaveParcela,ttP);
                    
					jDados.put("PARCELADOC", ttP.ultimaParcela);                 
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);	

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
 
					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";
					
                    String serie = "";
                    String subSerie = "";
                    String especie = "";
                    double valorSegmento = 0;

                    JSONArray recordsDup = new JSONArray();

                    /*
                    DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
                    VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
                    COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
                    */
                    // boolean isData = false;
                    // Date dtV = new Date();
                    // try{ 
                    //     dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
					// 	isData = true; 
                    //     if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(ttMov.complemento06))) isData = false; 
					// } catch(Exception ii){ 
					// 	isData = false; 
					// }
					// if(!chaveDuplicata.equals("")){
					// 	if(isData){
					// 		try {
					// 			String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? "; 
					// 			recordsDup = dbIOCont.sql(sql)
					// 			  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
					// 			  .param(chaveDuplicata + "%")
					// 			  .param(dtV)
					// 			  .debug(logger)
					// 			  .query();								
					// 		} catch (Exception e1) {
					// 			logger.logDebug("ERROR: " + e1.getMessage());
					// 		}
					// 	}
					// 	if(!isData){
					// 		try {
					// 			String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
					// 			recordsDup = dbIOCont.sql(sql)
					// 			  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
					// 			  .param(chaveDuplicata + "%")
					// 			  .debug(logger)
					// 			  .query();								
					// 		} catch (Exception e1) {
					// 			logger.logDebug("ERROR: " + e1.getMessage());
					// 		}
					// 	}
					// }

					if(!chaveDuplicata.equals("")){
						try {
							String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
							recordsDup = dbIOCont.sql(sql)
							  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
							  .param(chaveDuplicata + "%")
							  .debug(logger)
							  .query();	

						} catch (Exception e1) {
							logger.logDebug("ERROR: " + e1.getMessage());
						}
					}
					/* EXEMPLO DE COMO TEM QUE SAIR
					
					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject(); 
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);
					
					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");
					}

					double valorSaldoDuplicata = 0;
                    double valorSomaSegmentos  = 0;
                    
                    // soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos 
                    // continua sendo o valor origial (total) da nota fiscal
                    // utilizado para achar a proporcao do valor para cada segmento
                    for (int seg =0; seg<recordsDup.length(); seg ++) {
                        recordsDupSeg =  recordsDup.optJSONObject(seg);
                        if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                            valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
                        }		
                    }

                    boolean leuDuplicata = false;
                    
                    // valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
                    if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

					valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));
					
					if (!especie.equals("") || !serie.equals("")) {
						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
							for (int seg =0; seg<recordsDup.length(); seg ++) {
							
								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";
								
								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE 
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
									if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }	
								}	

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

								// (zerado para validacao)
								diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
                                    ttMov.contaDebito   = contaPortador;
                                    ttMov.contaCredito  = contaMovimento;
                                    codContabil = "5200";
                                    if(especie.equals("39")) codContabil = "5300";
                                }

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal.append(tipoSerie);
                                    txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(ttMov.dataMovimento);
                                    txtFiscal.append(delimitador);
									if (recordsDup.length() > 1 && seg == 0) {
                                        txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - 0.01 - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                    } else {
                                        txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                    }
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    // txtFiscal.append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal.append("||");
                                    txtFiscal.append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal.append("||||");
                                    
									if(ttMov.tipoLancamento.contains("PAGAR")) {
										txtFiscal.append(delimitador);
										txtFiscal.append(jDescricaoDupl.optString("CPFCNPJ"));
										txtFiscal.append(delimitador);
									}
									txtFiscal.append(segmento);
                                    txtFiscal.append(delimitador);
                                    //txtFiscal.append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal.append(delimitador);
                                    txtFiscal.append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
										codContabil = codContabil.replaceAll("00","10");

										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.contaDebito);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.contaCredito);
										txtFiscal.append(delimitador);
										if (recordsDup.length() > 1 && seg == 0) {
                                            txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - 0.01 - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                        } else {
                                            txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                        }
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historico.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historico, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historico, 0 ,"Codigo"));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									if (ttMov.valorDesconto > 0 && seg == 0) {

										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal.append(ttMov.contaDebito);
											txtFiscal.append(delimitador);
											txtFiscal.append(contaDesconto);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal.append(contaDesconto);
											txtFiscal.append(delimitador);
											txtFiscal.append(ttMov.contaCredito);
										}
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historicoDesconto, 0 ,"Codigo"));

										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal.append(contaJuros);
											txtFiscal.append(delimitador);
											txtFiscal.append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal.append(ttMov.contaCredito);
											txtFiscal.append(delimitador);
											txtFiscal.append(contaJuros);
										}
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historicoJuros, 0 ,"Codigo"));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal.append(contaMulta);
											txtFiscal.append(delimitador);
											txtFiscal.append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal.append(ttMov.contaCredito);
											txtFiscal.append(delimitador);
											txtFiscal.append(contaMulta);
										}
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historicoMulta, 0 ,"Codigo"));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                            jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
                            eFornecedor = true;
                        }
                    }
                }


                if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
							jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
							jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
							jDescricaoDupl.put("VALORFINAL",  valorFinal);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
                }
            }
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaMovimento)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaMovimento)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);


				}
            }
             //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
            if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			}

            chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
            chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
            ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
            String keyAc = chave;

            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
                ttMov3.documento       = "";
            }
            if (ttMov3.documento.equals("")) {
                ttMov3.documento         = ttMov.documento;
            } else ttMov3.documento = ttMov3.documento + ", " + ttMov.documento;

            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            ttMov3.chave = chave;

            if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")) ttMov3.contador = 3;

            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
            }
            mapaLote.put(ttMov.lote,ttLot);

            if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
                if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
            }else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;

            if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                }
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chave             = chave;
                ttMov2.chaveExtrato      = "";
                ttMov2.documento         = ttMov3.documento;
                ttMov2.classificacao     = ttMov.classificacao;
                ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador          = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR")){
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }
                ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
                
                String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem, histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    if(tipoLancamento.contains("PAGAR")){
                        filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                        if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("JUROS"))         ttMov3.historicoJuros = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("MULTA"))         ttMov3.historicoMulta = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("DESCONTO"))      ttMov2.historicoDesconto = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                        String aux = ttMov2.historico;
                        if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("JUROS"))         ttMov3.historicoJuros = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("MULTA"))         ttMov3.historicoMulta = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("DESCONTO"))      ttMov2.historicoDesconto = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                    }
                }

                mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
            }
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String auxExtencao = ".txt";
            if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + auxExtencao;
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal.toString());

            loteFiscal = loteFiscal.replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());
        }


        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------


        StringBuilder ResumoTxt = new StringBuilder();
        String rn = "\r\n";
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");
        ResumoTxt.append(rn);

        ResumoTxt.append("STATUS;");
        ResumoTxt.append("DATA;TIPO DATA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("DOCUMENTO;");
        ResumoTxt.append("CLIENTE/FORNECEDOR;");
        ResumoTxt.append("PORTADOR;");
        ResumoTxt.append("COMPLEMENTO01;");
        ResumoTxt.append("COMPLEMENTO02;");
        ResumoTxt.append("COMPLEMENTO03;");
        ResumoTxt.append("COMPLEMENTO04;");
        ResumoTxt.append("COMPLEMENTO05;");
        ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
        ResumoTxt.append("DATA;");
        ResumoTxt.append("DEBITO;");
        ResumoTxt.append("CLASS DEB;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("CREDITO;");
        ResumoTxt.append("CLASS CRED;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("HISTORICO;");
        ResumoTxt.append("ORIGEM");

        StringBuilder txtDePara = new StringBuilder();

        txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
        txtDePara.append("\r\n");

        mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
        // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
        // =======================================================================================
           
		
		Iterator itLote = mapaLote.keySet().iterator();
        while (itLote.hasNext()) {

            String key = (String)itLote.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
             lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(lote)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }
		}

        contRegra = -1;
        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}

            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")){
                temIgnorar = true;
                continue;
            } 
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")){
                temIgnorar = true;
                continue;
            } 
 

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            if(tipoLancamento.contains("PAGAR")){
                ttMov.naturezaContabil = "D";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
            }
            if(tipoLancamento.contains("RECEBER")){
                ttMov.naturezaContabil = "C";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
            }

            JSONObject extratoEmpresa = new JSONObject();


            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                .param(chaveExtrato + "%")
                .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(1)
                        .param(chaveExtrato)
                        .execute();

                    }
                }

            }


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;


                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();

                for (int xx = 0;xx<5;xx++) {
                    try {
                        Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                        if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm; tipoData = "D+1";}
                        if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm; tipoData = "D-1";}
                        if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois; tipoData = "D+2";}
                        if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

                        registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
                        .fields("CONTADEBITO,CONTACREDITO,HISTORICO")
                        .param(codEmpresa)
                        .param(dataLeitura)
                        .param(ttMov.valorDocumento)
                        .query();

                        if (registro != null && registro.length() > 0) break;
                    }
                    catch (Exception xx) {
                        break;
                    }
                }



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

                if (registro != null && registro.length() > 0) {
                    for (int t=0; t<registro.length(); t++) {

                        JSONObject recMov = registro.optJSONObject(t);
                        String contaDebitoRazao = recMov.optString("CONTADEBITO");
                        String contaCreditoRazao = recMov.optString("CONTACREDITO");
                        String historicoRazao = recMov.optString("HISTORICO");

                        String descricaoCredito = "";
                        String descricaoDebito = "";
                        String classificacaoDebito = "";
                        String classificacaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaDebitoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaCreditoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        ResumoTxt.append("\r\n");

                        if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
                        if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(tipoData);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.documento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeOrigem);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomePortador);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento01);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento02);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento03);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento04);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento05);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento06);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.contaDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.contaCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraContaMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico.substring(0, ttMov.historico.indexOf("GPLCTO")));
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico.substring(0, ttMov.historico.indexOf("GPLCTO")));
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaDebitoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoDebito);
                        ResumoTxt.append(";");


                        ResumoTxt.append(descricaoDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaCreditoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(descricaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(historicoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeArquivo);
                        ResumoTxt.append(";");

                        objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                        objetoRoteiro.put("CHAVE", ttMov.chave + contaDebitoRazao);

                        objetoRoteiro.put("contaCreditoRazao", contaCreditoRazao);
                        objetoRoteiro.put("contaDebitoRazao", contaDebitoRazao);
                        objetoRoteiro.put("historicoRazao", historicoRazao);
                        objetoRoteiro.put("regraConta", regraContaMovimento);
                        objetoRoteiro.put("regraHistorico", regraHistorico);
                        objetoRoteiro.put("codigoHistorico", "");

                        objetoRoteiro.put("classificacaoDebito", classificacaoDebito);
                        objetoRoteiro.put("classificacaoCredito", classificacaoDebito);
                        objetoRoteiro.put("descricaoDebito", descricaoDebito);
                        objetoRoteiro.put("descricaoCredito", descricaoCredito);



                        if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                    }
                }
                else {
                    ResumoTxt.append("\r\n");
                    ResumoTxt.append("NAO ENCONTRADO;");
                    ResumoTxt.append(ttMov.dataMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(tipoData);
                    ResumoTxt.append(";");
                    ResumoTxt.append(valorFinal);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.documento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomeOrigem);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomePortador);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento01);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento02);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento03);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento04);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento05);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento06);
                    ResumoTxt.append(";;");

                    ResumoTxt.append(ttMov.contaDebito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.contaCredito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraContaMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.historico);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraHistorico);
                    ResumoTxt.append(";;");
                    ResumoTxt.append(ttMov.nomeArquivo);
                    ResumoTxt.append(";");
                    objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                    if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);

                }
            }

			if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

			if (roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";

            if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}


            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

				// if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRM.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				// }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);

                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
					
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
				    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

                    //records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
                if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "04";
                    classMul = classificacao + ttMov.classificacao + "05";
                }
                if(classificacao.startsWith("D")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "05";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "03";
                }
            }
			
			
            if(tipoLancamento.contains("RECEBER")){
                if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "04";
                    classMul = classificacao + ttMov.classificacao + "05";
                }
                if(classificacao.startsWith("C")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "05";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "03";
                }
            }
              


            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

				// if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRM.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				// }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
             
                //records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

				// if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRM.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				// }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);

                }
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
				    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
                    //records.put(rec3);
                }

				 
                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

                    }
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
                
                    //records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                         rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
                       // records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

                    }
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
                    //records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
                       // records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

                    }
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
                    
                    //records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
                       //records.put(rec3);
                    }
                }
            }
        }

        if (apagaExtrato) {
            dbIOCont.delete("IO_EXTRATO")
            .where("CODEMPRESA=?")
            .param(codEmpresa)
            .execute();
        }
		
		
		//#2304-002843. Melhorias no feedback
		if (contRegra < 0 && nomeArquivo.toUpperCase().contains("_ID") && !nomeArquivo.toUpperCase().startsWith("OK_DEPARACONTA") && ((roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !temFiscal && !mantemArquivo.equals("SIM")) || !roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE"))) {
			if (temFiltro) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temIgnorar) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			 	}
			} else if (temLinhas) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temOFX || retornaPadroes.equals("break")) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temOMC) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUOMC- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUOMC- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			}
			else {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			}
			
		}
		
		
		
		// Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras 
		if (apagaContaT) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				
				if (tipoLancamento.contains("PAGAR")) {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
				else {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
			}
		}
		
        // resumo comparativo com razao
		String idLoteResumo = "";
		if (comparaRazao) {
			if(loteEtapaTres.toUpperCase().contains("_ID") && fornecedorUnico.contains("EXIBE_RESUMO")){
				idLoteResumo = "_ID"+cutString(loteEtapaTres.toUpperCase(), "_ID", "_")+"_";
			}
			String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerRazao.writeNewFile(ResumoTxt.toString());
		}
		
		if(logs){
						   
			String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
			FileWriter writerLogs = new FileWriter(filenameLogs);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerLogs.writeNewFile(logsTxt.toString());
		}

		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
		//-------------------------------------------------------------------------------------
		String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
		// Cria o arquivo de DE-PARA FORNECEDOR
		FileWriter writer = new FileWriter(filename);
		writer.writeNewFile(txtDePara.toString());

		Iterator ite = mapaLote.keySet().iterator();
		while (ite.hasNext()) {
			String key = (String)ite.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			// =======================================================================================
			// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
			// =======================================================================================
			lote = ttLot.lote;     

  			
							   
											
													 
																									  
																									  
																									  
										   
			ultimoJS = new JSONObject();
			ultimoJS.put("LOTE", lote);
			ultimoJS.put("DOCUMENTO", "");
			ultimoJS.put("CODEMPRESA", codEmpresa);
			ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
			ultimoJS.put("DATAMOVIMENTO", "");
			ultimoJS.put("TIPOMOVIMENTO", "");
			ultimoJS.put("TIPOLANCAMENTO", "");
			ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
			ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
			ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
			ultimoJS.put("VALORLIQUIDACAO", 0);
			ultimoJS.put("VALORDOCUMENTO", 0);
			ultimoJS.put("VALORDESCONTO", 0);
			ultimoJS.put("VALORJUROS", 0);
			ultimoJS.put("VALORMULTA", 0);
			ultimoJS.put("NOMEPORTADOR", "");
			ultimoJS.put("CENTROCUSTO", "");
			ultimoJS.put("NATUREZACONTABIL", "");
			ultimoJS.put("NOMEORIGEM", "");
			ultimoJS.put("CPFCNPJ", "");
			ultimoJS.put("SERIE", "");
			ultimoJS.put("STATUSMOVIMENTO", 0);
			ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
			ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
			ultimoJS.put("STATUSMOVIMENTO", 1);
			records.put(ultimoJS);
			// Resumo Planilha
			try {
				String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
				File file = new File(dirName1);
				try {
					String diretorio = dirName1;
					File file2 = new File(diretorio);
					File[] files = file2.listFiles();
					if (FileUtil.dirHasFiles(diretorio)) {
						for (File fl: files) {
							if (fl.isFile()){
								if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
									// ELIMINA ARQUIVO IMPORTADO
									file = new File(dirName1);
									if (file.exists()){
										FileUtil.deleteFile(dirName1+fl.getName());
									}
								}
							}
						}
					}
				} catch (Exception ee) {
					logger.logError(ee);
				}
			}catch (Exception e) {
				logger.logError(e);
			}
		}
	} catch (Exception ee) {
		logger.logError("EndpointA: ", ee);
	} finally {
	
		try {
			if (dbIOCont != null) {
				dbIOCont.closeConnection();
			}
			if (dbIODepara != null) {
				dbIODepara.closeConnection();
			}
		} catch (Exception ee) {}
	}
	return records;
}

class ttLote {
	public String lote;
	public String tipoPlanilha;
	public ttLote(){}
	public ttLote(ttLote tt){
		lote=tt.lote;
		tipoPlanilha=tt.tipoPlanilha;		
	}
}

class ttArquivo {
	public String arquivo;
	public String abas;
	public ttArquivo(){}
	public ttArquivo(ttArquivo tt){
		arquivo=tt.arquivo;
		abas=tt.abas;
	}
}

class ttDocumento {
    public String documento;
	public double valorDocumento;
     public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
 		valorDocumento  = ttD.valorDocumento;
    }
}

class ttJuros {
	public String documento;
	public double valorJur;
	public int valorLido;
	public ttJuros(){}
	public ttJuros(ttJuros ttJ){
		documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
	}
}

class ttDesconto {
	public String documento;
	public double valorDesc;
	public int valorLido;
	public ttDesconto(){}
	public ttDesconto(ttDesconto ttD){
		documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
	}
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttFornecedor {
	public String nomeOrigem;
	public String contaMovimento;
	public ttFornecedor(){}
	public ttFornecedor(ttFornecedor ttF){
		nomeOrigem 	 = ttF.nomeOrigem;
		contaMovimento = ttF.contaMovimento;
	}
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

	try {
		if(extensao.contains("CSV")) {

			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
				if (memFile.getFilename().toUpperCase().contains("CSV")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length < fields2.length) { separadorCsv = ","; break; }
								if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
		
		
		
		if(extensao.contains("TXT")) {
			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							String [] fields3 = line.split("\t");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
								if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
								if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
	
	}
	 catch(Exception xx) {}
	
	return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;
}

public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
    ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
    if (ttMov4 == null) {
        ttMov4 = new ttMovimentoPadrao(ttMov2);
        ttMov4.chave                    = chave;
        if(gerarApenasValorDocumento){
            ttMov4.valorDesconto            = 0;
            ttMov4.valorMulta               = 0;
            ttMov4.valorJuros               = 0;
        }
        ttMov4.classificacao            = classificacao;
        switch(complemento){
            case 1: ttMov4.complemento01 = textoComplemento; break;
            case 2: ttMov4.complemento02 = textoComplemento; break;
            case 3: ttMov4.complemento03 = textoComplemento; break;
            case 4: ttMov4.complemento04 = textoComplemento; break;
            case 5: ttMov4.complemento05 = textoComplemento; break;
            case 6: ttMov4.complemento06 = textoComplemento; break;
        }
        mapaVariavel.put(chave, ttMov4);
    }
    return mapaVariavel;
}







































































































































































































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2020-1010158");
    js.put("idRoteiro", "a0A1C000011Z2Qv");
    js.put("idEmpresa", "a0q150000008MzYAAU");
    js.put("idContabilidade", "a0915000012VofL");
    js.put("CnpjContabilidade", "84.436.096/0001-25");
    js.put("CnpjEmpresa", "04.464.847/0001-88");
    js.put("fornecedor", "0");
    js.put("dataMovimento", "6");
    js.put("portador", "");
    js.put("documentoNF", "0");
    js.put("valorDocumento", "8");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "13");
    js.put("complemento01", "#COLUNA A CONTEM(HISTORICO:)");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "0");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "1452");
    js.put("contaFixaJuros", "1436");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Marlian");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "5");
    js.put("Cruza_Extrato_com_Extrato", "FALSE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Tintomax");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CONTAS PAGAS TINTOMAX 08-2020");
    js.put("Planilhas_Padroes", "Extrato_Itau_Excel;Extrato_Santander_Excel;Extrato_CEF_TXT;Extrato_Cef_Excel;Extrato_Sicredi_TXT;Extrato_Santander_PDF;Extrato_Sicredi_PDF;Extrato_CEF_PDF;Extrato_ITAU_PDF;Extrato_Viacredi_PDF;Extrato_Inter_PDF;Extrato_XPInvestimentos_PDF;Extrato_XPInvestimentos_Excel;FaturaCartaoCredito_Itau_EXCEL");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroAAASICREDI_PAG1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0244315");
    js.put("idRoteiro", "a0A1C000011Z2Qv");
    js.put("idEmpresa", "a0q150000008MzYAAU");
    js.put("idContabilidade", "a0915000012VofL");
    js.put("CnpjContabilidade", "84.436.096/0001-25");
    js.put("CnpjEmpresa", "04.464.847/0001-88");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "0");
    js.put("portador", "#COLUNA A CONTEM (CONTA:) COLUNA B");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "3");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "1");
    js.put("complemento02", "2");
    js.put("complemento03", "3");
    js.put("complemento04", "");
    js.put("complemento05", "5");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Marlian");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Tintomax");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "SICREDI PAG");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "DESCRICAO");
    js.put("Rotulo_Complemento_02", "DOCUMENTO");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroNOTAFISC3() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-1032291");
    js.put("idRoteiro", "a0A1C000011Z2Qv");
    js.put("idEmpresa", "a0q150000008MzYAAU");
    js.put("idContabilidade", "a0915000012VofL");
    js.put("CnpjContabilidade", "84.436.096/0001-25");
    js.put("CnpjEmpresa", "04.464.847/0001-88");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "5");
    js.put("portador", "-1");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "3");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "4");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Marlian");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Tintomax");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "RELATORIO NOTA FISCAL");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroRELPAGA4() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-1136860");
    js.put("idRoteiro", "a0A1C000011Z2Qv");
    js.put("idEmpresa", "a0q150000008MzYAAU");
    js.put("idContabilidade", "a0915000012VofL");
    js.put("CnpjContabilidade", "84.436.096/0001-25");
    js.put("CnpjEmpresa", "04.464.847/0001-88");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "FAVORECIDO / BENEFICIARIO");
    js.put("dataMovimento", "DATA DO PAGAMENTO");
    js.put("portador", "-1");
    js.put("documentoNF", "3");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "2");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "#TIPOPLANILHA");
    js.put("complemento05", "");
    js.put("complemento06", "6");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "42");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Marlian");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Tintomax");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "RELATORIO PAGAMENTO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroSECUNDARIO_SICOOB_PAG5() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0661691");
    js.put("idRoteiro", "a0A1C000011Z2Qv");
    js.put("idEmpresa", "a0q150000008MzYAAU");
    js.put("idContabilidade", "a0915000012VofL");
    js.put("CnpjContabilidade", "84.436.096/0001-25");
    js.put("CnpjEmpresa", "04.464.847/0001-88");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "5");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "4");
    js.put("valorDocumento", "3");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "2");
    js.put("complemento02", "5");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "3");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Marlian");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Tintomax");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "COMPLEMENTO01");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "SICOOB");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "HISTORICO");
    js.put("Rotulo_Complemento_02", "FORNECEDOR/CLIENTE");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("SICREDI")) achouTipo = true;
    if (achouTipo) return "AAASICREDI_PAG1";
    achouTipo = true;
    achouTipo = false;
    if (achouTipo) return "AMOVIMENTO2";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("NOTA")) achouTipo = true;
    if (achouTipo) return "NOTAFISC3";
    achouTipo = true;
    String [] campos4 = "CONTA EM OPERACAO".split(";");
    for (int x=0;x<campos4.length;x++) {
        if (!line.contains(campos4[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "RELPAGA4";
    achouTipo = true;
    String [] campos5 = "DATA;DOCUMENTO;HISTORICO;VALOR;NF;FORNECEDOR".split(";");
    for (int x=0;x<campos5.length;x++) {
        if (!line.contains(campos5[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "SECUNDARIO_SICOOB_PAG5";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2024-04133867
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("-")) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("EFETUADO")) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICOOB_PAG") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("C")) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FATURA")) { //ROT-2020-1010158
        conta = "5554569";
        contaMovimento = "5554569";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (nomeOrigem.contains("DELCOVILLE") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "13036";
        contaMovimento = "13036";
    }
    if (nomeOrigem.contains("*CPETCURSOS01") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS02") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS03") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS04")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS01")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS02") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS03")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS04") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS05") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS01") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS02") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS03") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS04")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS05")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS01")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS02") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS03") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("*CPETCURSOS04")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("*CPETCURSOS05") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG")) {
        conta = "59975";
        contaMovimento = "59975";
    }
    if (nomeOrigem.contains("CASAN") && tipoPlanilha.contains("EXTRATO")) {
        conta = "300014";
        contaMovimento = "300014";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("BETO") && tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("CARRERO")) {
        conta = "13108";
        contaMovimento = "13108";
    }
    if (nomeOrigem.contains("TED") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("ENVIADA")) {
        conta = "42";
        contaMovimento = "42";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("CRI") && nomeOrigem.contains("21A0709253")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("CRI") && nomeOrigem.contains("22I1423499") && tipoPlanilha.contains("EXTRATO")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("FLU") && nomeOrigem.contains("ARML12")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("FLU") && nomeOrigem.contains("ECOV14")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("FLU") && nomeOrigem.contains("GUAR23") && tipoPlanilha.contains("EXTRATO")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("HVSP11") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("FLU")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("FLU") && nomeOrigem.contains("IRJS12")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("FLU") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("MOVI27")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("DB") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("COTAS")) {
        conta = "423";
        contaMovimento = "423";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PAGADOR") && nomeOrigem.contains("TRANSF")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (complemento02.contains("PIX") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("0000000000000731")) {
        conta = "42";
        contaMovimento = "42";
    }
    if (nomeOrigem.contains("DA CELESC 0000025631447")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TAR") && nomeOrigem.contains("ADAPT")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (nomeOrigem.contains("TAR") && nomeOrigem.contains("COBRANCA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (nomeOrigem.contains("TEL EMPRESAS03922805363") && tipoPlanilha.contains("EXTRATO")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("DEBITO DEVOLUCAO PIX") && tipoPlanilha.contains("EXTRATO")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (nomeOrigem.contains("CREDITO CONSIGNADO") && tipoPlanilha.contains("EXTRATO") && complemento04.contains("CONSIGNADO")) {
        conta = "686";
        contaMovimento = "686";
    }
    if (nomeOrigem.contains("DA CELESC 0000002493608") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000004098510") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000004098536") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA CELESC 0000004099630")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000007968841") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000026528810") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA CELESC 0000028414560")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000031848016") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000046660463") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA CELESC 0000046820169")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA CELESC 0000049126743")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000049126778") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA VIVO FIXO 9796469720")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("JAISON VICENTE PEREIRA") && tipoPlanilha.contains("RELPAGA")) {
        conta = "391982";
        contaMovimento = "391982";
    }
    if (nomeOrigem.contains("MESMA") && nomeOrigem.contains("TIT") && nomeOrigem.contains("EMITIDO") && nomeOrigem.contains("PIX") && tipoPlanilha.contains("EXTRATO")) {
        conta = "42";
        contaMovimento = "42";
    }
    if (nomeOrigem.contains("DA BRT SC 7107093526") && tipoPlanilha.contains("EXTRATO")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("DA BRT SC 7170157803") && tipoPlanilha.contains("EXTRATO")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA BRT SC 7175238526")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("DA") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("S") && nomeOrigem.contains("FRANC") && nomeOrigem.contains("01068")) {
        conta = "300014";
        contaMovimento = "300014";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA NET SERVICOS 1073282")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("DA VIVO FIXO 9365454532") && tipoPlanilha.contains("EXTRATO")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA VIVO FIXO 9391723928")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DEB AUTOR SEM PARAR")) {
        conta = "1398";
        contaMovimento = "1398";
    }
    if (nomeOrigem.contains("ALEXSANDRO LEITE OLIBONI") && tipoPlanilha.contains("RELPAGA") && complemento01.contains("PIX")) {
        conta = "5553468";
        contaMovimento = "5553468";
    }
    if (tipoPlanilha.contains("RELPAGA") && complemento01.contains("PIX") && nomeOrigem.contains("ALCIDES HENRIQUE MEIRELES")) {
        conta = "5021832";
        contaMovimento = "5021832";
    }
    if (tipoPlanilha.contains("RELPAGA") && nomeOrigem.contains("CLINICA SANTA CLARA LTDA")) {
        conta = "5554459";
        contaMovimento = "5554459";
    }
    if (nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (nomeOrigem.contains("IRRF") && tipoPlanilha.contains("EXTRATO")) {
        conta = "211";
        contaMovimento = "211";
    }
    if (tipoPlanilha.contains("SICREDI_PAG") && nomeOrigem.contains("PAGTO") && nomeOrigem.contains("FOLHA")) {
        conta = "616";
        contaMovimento = "616";
    }
    if (nomeOrigem.contains("APLICACAO CONTAMAX") && tipoPlanilha.contains("EXTRATO")) {
        conta = "90";
        contaMovimento = "90";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("IOF") && nomeOrigem.contains("DEB")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (nomeOrigem.contains("DEB") && nomeOrigem.contains("JUROS") && tipoPlanilha.contains("EXTRATO")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (tipoPlanilha.contains("ZZPADRAOOTTIMIZZAPAG") && nomeOrigem.contains("AGUA") && nomeOrigem.contains("DA") && nomeOrigem.contains("CASAS")) {
        conta = "8910";
        contaMovimento = "8910";
    }
    if (nomeOrigem.contains("VSCF14") && nomeOrigem.contains("FLU") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("APLICACAO")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("WETE11") && nomeOrigem.contains("FLU") && nomeOrigem.contains("APLICACAO") && tipoPlanilha.contains("EXTRATO")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("APLICACAO") && nomeOrigem.contains("FLU") && nomeOrigem.contains("LF002200DG2")) {
        conta = "88";
        contaMovimento = "88";
    }
    if (nomeOrigem.contains("AGUA") && nomeOrigem.contains("02756064") && nomeOrigem.contains("DA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "1339";
        contaMovimento = "1339";
    }
    if (nomeOrigem.contains("02770733") && nomeOrigem.contains("AGUA") && nomeOrigem.contains("DA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "12883";
        contaMovimento = "12883";
    }
    if (nomeOrigem.contains("08658684") && nomeOrigem.contains("AGUA") && nomeOrigem.contains("DA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "12883";
        contaMovimento = "12883";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DA CELESC 0000007194013")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA CELESC 0000020125713") && tipoPlanilha.contains("EXTRATO")) {
        conta = "671";
        contaMovimento = "671";
    }
    if (nomeOrigem.contains("DA VIVO FIXO 9913619588") && tipoPlanilha.contains("EXTRATO")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (complemento04.contains("IOF") && nomeOrigem.contains("IOF") && tipoPlanilha.contains("EXTRATO")) {
        conta = "1439";
        contaMovimento = "1439";
    }
    if (tipoPlanilha.contains("EXTRATO") && complemento04.contains("APLICACAO") && nomeOrigem.contains("APLICACAO") && nomeOrigem.contains("COMPROMISSADA")) {
        conta = "88 ";
        contaMovimento = "88 ";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("")) { //ROT-2020-1010158
        conta = "186";
        contaMovimento = "186";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-")) { //ROT-2020-1010158
        conta = "186";
        contaMovimento = "186";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) { //ROT-2020-1010158
        conta = "5016896";
        contaMovimento = "5016896";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) { //ROT-2020-1010158
        conta = "5016896";
        contaMovimento = "5016896";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) { //ROT-2020-1010158
        conta = "5016896";
        contaMovimento = "5016896";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) { //ROT-2020-1010158
        conta = "5016896";
        contaMovimento = "5016896";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) { //ROT-2020-1010158
        conta = "563";
        contaMovimento = "563";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) { //ROT-2020-1010158
        conta = "563";
        contaMovimento = "563";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) { //ROT-2020-1010158
        conta = "563";
        contaMovimento = "563";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) { //ROT-2020-1010158
        conta = "563";
        contaMovimento = "563";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2020-1010158
        conta = "5017633";
        contaMovimento = "5017633";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2020-1010158
        conta = "5017633";
        contaMovimento = "5017633";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2020-1010158
        conta = "5017633";
        contaMovimento = "5017633";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2020-1010158
        conta = "5017633";
        contaMovimento = "5017633";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) { //ROT-2020-1010158
        conta = "12877";
        contaMovimento = "12877";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) { //ROT-2020-1010158
        conta = "12877";
        contaMovimento = "12877";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) { //ROT-2020-1010158
        conta = "12877";
        contaMovimento = "12877";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) { //ROT-2020-1010158
        conta = "12877";
        contaMovimento = "12877";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAFISC")) { //ROT-2020-1010158
        conta = complemento01;
        contaMovimento = complemento01;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2024-04133867
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("-")) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("EFETUADO")) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICOOB_PAG") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("C")) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FATURA")) { //ROT-2020-1010158
        conta = "5554569";
        contaMovimento = "5554569";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2018) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2019 &&
        Integer.parseInt(dataMovimento.substring(3,5)) <= 1) { //ROT-2020-1010158
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("-")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Complemento (03) nao contem '-', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("EFETUADO")) {
        conta = "Quando Tipo Planilha contem 'RELPAGA', Complemento (06) contem 'NAO', Complemento (06) contem 'EFETUADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICOOB_PAG") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("C")) {
        conta = "Quando Tipo Planilha contem 'SICOOB_PAG', Complemento (06) contem 'C', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FATURA")) {
        conta = "Quando Tipo Planilha contem 'FATURA', CONTA MOVIMENTO SERA = '5554569'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2018) {
        conta = "Quando Ano Movimento menor ou igual a '2018', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(6)) <= 2019 &&
        Integer.parseInt(dataMovimento.substring(3,5)) <= 1) {
        conta = "Quando Ano Movimento menor ou igual a '2019', Mes Movimento menor ou igual a '1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("")) {
        conta = "Quando Tipo Planilha contem 'RELPAGA', Fornecedor/Cliente contem 'EM BRANCO', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERASA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SERASA', CONTA MOVIMENTO SERA = '22'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DETRAN")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DETRAN', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SICREDI")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SICREDI', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FGTS', CONTA MOVIMENTO SERA = '620'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINDICATO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SINDICATO', CONTA MOVIMENTO SERA = '622'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GNRE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GNRE', CONTA MOVIMENTO SERA = '638'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIM ")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TIM_', CONTA MOVIMENTO SERA = '672'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLARO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLARO', CONTA MOVIMENTO SERA = '672'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OI ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOVEL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'OI_', Fornecedor/Cliente contem 'MOVEL', CONTA MOVIMENTO SERA = '672'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SEGURO', CONTA MOVIMENTO SERA = '674'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SEGURO', Fornecedor/Cliente contem 'BRADESCO', CONTA MOVIMENTO SERA = '2447'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLACA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VEICULO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PLACA', Fornecedor/Cliente contem 'VEICULO', CONTA MOVIMENTO SERA = '502'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EUGENIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAULINO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EUGENIO', Fornecedor/Cliente contem 'RAULINO', CONTA MOVIMENTO SERA = '570'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIDENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOCIAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PREVIDENCIA', Fornecedor/Cliente contem 'SOCIAL', CONTA MOVIMENTO SERA = '618'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELULAR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TIM', Fornecedor/Cliente contem 'CELULAR', CONTA MOVIMENTO SERA = '672'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELEFONICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TELEFONICA', Fornecedor/Cliente contem 'BRASIL', CONTA MOVIMENTO SERA = '672'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TELECOM', CONTA MOVIMENTO SERA = '672'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PREFEITURA', CONTA MOVIMENTO SERA = '640'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TABELIONATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TABELIONATO', Fornecedor/Cliente contem 'NOTAS', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINISTERIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MINISTERIO', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAIXA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECONOMICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CAIXA', Fornecedor/Cliente contem 'ECONOMICA', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CATARINA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SANTA', Fornecedor/Cliente contem 'CATARINA', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONACO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'MONACO', CONTA MOVIMENTO SERA = '176'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LC")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'LC', CONTA MOVIMENTO SERA = '182'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("Z7")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'Z7', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("Z11")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'Z11', CONTA MOVIMENTO SERA = '1659'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FATIMA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'FATIMA', CONTA MOVIMENTO SERA = '1920'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZANDONA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'ZANDONA', CONTA MOVIMENTO SERA = '1934'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("Z10")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'Z10', CONTA MOVIMENTO SERA = '6999'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GERALDI")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'GERALDI', CONTA MOVIMENTO SERA = '9337'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRID")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'POSTO', Fornecedor/Cliente contem 'GRID', CONTA MOVIMENTO SERA = '13556'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLUXO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAIXA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FLUXO', Fornecedor/Cliente contem 'CAIXA', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-")) {
        conta = "Quando Tipo Planilha contem 'RELPAGA', Fornecedor/Cliente contem '-', CONTA MOVIMENTO SERA = '186'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'INTERATIVA', CONTA MOVIMENTO SERA = '5016896'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'INTERATIVA', CONTA MOVIMENTO SERA = '5016896'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'INTERATIVA', CONTA MOVIMENTO SERA = '5016896'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'INTERATIVA', CONTA MOVIMENTO SERA = '5016896'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELCOVILLE")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem 'DELCOVILLE', CONTA MOVIMENTO SERA = '13036'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS01', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS02', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS03', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS04', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS01', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS02', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS03', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS04', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS05', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS01', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS02', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS03', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS04', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS05', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS01', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS02', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS03', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS04', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem '*CPETCURSOS05', CONTA MOVIMENTO SERA = '59975'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO DEVOLUCAO PIX")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DEBITO DEVOLUCAO PIX', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'GIRO', Fornecedor/Cliente contem 'PAR', CONTA MOVIMENTO SERA = '563'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'GIRO', Fornecedor/Cliente contem 'PAR', CONTA MOVIMENTO SERA = '563'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'GIRO', Fornecedor/Cliente contem 'PAR', CONTA MOVIMENTO SERA = '563'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'GIRO', Fornecedor/Cliente contem 'PAR', CONTA MOVIMENTO SERA = '563'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BETO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRERO")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem 'BETO', Fornecedor/Cliente contem 'CARRERO', CONTA MOVIMENTO SERA = '13108'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'FOLHA', Fornecedor/Cliente contem 'PAGTO', CONTA MOVIMENTO SERA = '616'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'LUCIMAURO', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'SILVA', CONTA MOVIMENTO SERA = '5017633'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'LUCIMAURO', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'SILVA', CONTA MOVIMENTO SERA = '5017633'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'LUCIMAURO', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'SILVA', CONTA MOVIMENTO SERA = '5017633'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'LUCIMAURO', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'SILVA', CONTA MOVIMENTO SERA = '5017633'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA")) {
        conta = "Quando Tipo Planilha contem 'ZZPADRAOOTTIMIZZAPAG', Fornecedor/Cliente contem 'CASAS', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'AGUA', CONTA MOVIMENTO SERA = '8910'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'APLIC', Fornecedor/Cliente contem 'FINANC', Fornecedor/Cliente contem 'AVISO', Fornecedor/Cliente contem 'PREVIO', CONTA MOVIMENTO SERA = '12877'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'APLIC', Fornecedor/Cliente contem 'FINANC', Fornecedor/Cliente contem 'AVISO', Fornecedor/Cliente contem 'PREVIO', CONTA MOVIMENTO SERA = '12877'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'APLIC', Fornecedor/Cliente contem 'FINANC', Fornecedor/Cliente contem 'AVISO', Fornecedor/Cliente contem 'PREVIO', CONTA MOVIMENTO SERA = '12877'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO")) {
        conta = "Quando Tipo Planilha contem 'SICREDI_PAG', Fornecedor/Cliente contem 'APLIC', Fornecedor/Cliente contem 'FINANC', Fornecedor/Cliente contem 'AVISO', Fornecedor/Cliente contem 'PREVIO', CONTA MOVIMENTO SERA = '12877'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMITIDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PIX', Fornecedor/Cliente contem 'EMITIDO', Fornecedor/Cliente contem 'MESMA', Fornecedor/Cliente contem 'TIT', CONTA MOVIMENTO SERA = '42'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAFISC")) {
        conta = "Quando Tipo Planilha contem 'NOTAFISC', CONTA MOVIMENTO SERA = 'complemento01'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICREDI") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG")) {
        conta = "50";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAFISC")) {
        conta = "5017650";
        return conta;
    }
    if (nomePortador.contains("143490-0")) {
        conta = "37";
        contaMovimento = "37";
    }
    if (nomePortador.contains("8723928")) {
        conta = "36";
        contaMovimento = "36";
    }
    if (nomePortador.contains("426008")) {
        conta = "53";
        contaMovimento = "53";
    }
    if (nomePortador.contains("bradesco")) {
        conta = "45";
        contaMovimento = "45";
    }
    if (nomePortador.contains("itau")) {
        conta = "42";
        contaMovimento = "42";
    }
    if (nomePortador.contains("73-1")) {
        conta = "42";
        contaMovimento = "42";
    }
    if (nomePortador.contains("4296-2")) {
        conta = "39";
        contaMovimento = "39";
    }
    if (nomePortador.equals("42")) {
        conta = "42";
        contaMovimento = "42";
    }
    if (nomePortador.contains("EM BRANCO")) {
        conta = "50";
        contaMovimento = "50";
    }
    if (nomePortador.contains("1646130017306")) {
        conta = "38";
        contaMovimento = "38";
    }
    if (nomePortador.contains("130017306")) {
        conta = "38";
        contaMovimento = "38";
    }
    if (nomePortador.contains("130017856")) {
        conta = "53";
        contaMovimento = "53";
    }
    if (nomePortador.contains("130017856")) {
        conta = "5021482";
        contaMovimento = "5021482";
    }
    if (nomePortador.contains("CEF - 0419  /  003  /  00000264-2")) {
        conta = "40";
        contaMovimento = "40";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("63832")) {
        conta = "50";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("REGRA PADRAOXXXXX") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICREDIXXXXXXX")) {
        conta = "42";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ITAU")) {
        conta = "42";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAFISC")) {
        conta = "5017650";
        return conta;
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(line).contains("TOTAIS DO ESTAB:")) {
        tratarIgnoraLinha = true;
    }
    if (StringUtil.removeSpecialCharsToUC(line).contains("TOTAL GERAL:")) {
        tratarIgnoraLinha = true;
    }
    if (StringUtil.removeSpecialCharsToUC(line).contains("TOTAL:")) {
        tratarIgnoraLinha = true;
    }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA CLASSIFICACAO FORNEC")) {
        retornoClassificacao = "2.1.01";
    }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TARIFA, HISTORICO = TAR PIX RECEB";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DOS FILTROS E PURIFICADOR"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CASA DOS FILTROS E PURIFICADOR, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem *CPETCURSOS05, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9796469720"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DA VIVO FIXO 9796469720, HISTORICO = PAGAMENTO DE TITULO DA VIVO FIXO 9796469720";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000025631447"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DA CELESC 0000025631447, HISTORICO = PAGAMENTO TITULO DA CELESC 0000025631447";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANELI") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ANELI, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMBIENTAL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem AMBIENTAL, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZATTAR") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ZATTAR, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GDAI") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem GDAI, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MMB") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MMB, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALUGUEL, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELESC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CELESC, Tipo Planilha contem SICREDI_PAG, HISTORICO = FATURA Fornecedor/Cliente Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HDI SEGUROS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem HDI SEGUROS, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TABELIONATO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TABELIONATO, Tipo Planilha contem SICREDI_PAG, HISTORICO = . TABELIONATO DE NOTAS E 1. OFICIO DE PROTESTO DE TITULOS DA COMARCA DE JLLE Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem AGUA, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO AGUA Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMARA DE DIRIGENTES") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CAMARA DE DIRIGENTES, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPTU") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem IPTU, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ISS, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIBERTY") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LIBERTY, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MANUTENCAO, Tipo Planilha contem SICREDI_PAG, HISTORICO = JUROS E TAXAS BANCARIAS - BANCO SICREDI Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATHEUS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MATHEUS, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO DISTRIBUICAO DE LUCROS Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TAXA, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANUIDADE") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ANUIDADE, Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, HISTORICO = Mes-Ano Atual Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECAD"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem ECAD, HISTORICO = PAGAMENTO DE TITULO ESCRITORIO CENTRAL DE ARRECADACAO E DISTRIBUICAO ECAD";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AC COMERCIO DE COMBUST"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem AC COMERCIO DE COMBUST, HISTORICO = PAGAMENTO DE TITULO AC COMERCIO DE COMBUSTIVEL";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLOBOVEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem GLOBOVEL, HISTORICO = PAGAMENTO DE TITULO 12023 GLOBOVEL 05/05";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAG*JANGOINSTALACO01/04"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem PAG*JANGOINSTALACO01/04, HISTORICO = PAGAMENTO 481 JANGO SERVICOS AUTOMOTIVOS LTDA 01/04";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PONTO TIM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem PONTO TIM, HISTORICO = PAGAMENTO CHIP TELEFONICO PARA CELULAR - PONTO TIM";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PPRO *ADOBE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem PPRO *ADOBE, HISTORICO = PAGAMENTO DE TITULO 2383496907 ADOBE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HNA*OBOTICARIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem HNA*OBOTICARIO, HISTORICO = PAGAMENTO CARTOES PRESENTE O BOTICARIO (4 PARCELA) - HNA*OBOTICARIO 04/10";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem TIM, HISTORICO = PAGAMENTO CHIP TELEFONICO PARA CELULAR - PONTO TIM";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CPET"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem CPET, HISTORICO = PAGAMENTO DE TITULO AUXILIO ESTUDANTIL ESTAGIARIOS";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$2966"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem R$2966, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$189897"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem R$189897, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$1993"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem R$1993, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$4342"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem R$4342, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$3220"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem R$3220, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$1100"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem R$1100, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem INTERATIVA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERATIVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem INTERATIVA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO CONTAMAX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO CONTAMAX, HISTORICO = APLICACAO CONTAMAX";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALFA TRANSPORTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ALFA TRANSPORTES, HISTORICO = PAGAMENTO DE TITULO - ALFA TRANSPORTES";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONTEPINHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MONTEPINHO, HISTORICO = P0AGAMENTO TITULO - MONTEPINHO LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUINDAVILLE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GUINDAVILLE, HISTORICO = PAGAMENTO TITULO - GUINDAVILLE LOCACAO DE GUINDASTES";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALT BORRACHAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem ALT BORRACHAS, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLAUCILEIA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BOLETO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem GLAUCILEIA, Complemento (01) contem BOLETO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS01, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALGAR TELECOM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ALGAR TELECOM, HISTORICO = FATURA TELEFONE NO MES ALGAR TELECOM S/A";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUAS DE JOINVILLE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem AGUAS DE JOINVILLE, HISTORICO = PAGAMENTO DE TITULO - AGUAS DE JOINVILLE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACEVILLE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ACEVILLE, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARQUIVEI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ARQUIVEI, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ATHENA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ATHENA, HISTORICO = FATURA TELEFONE NO MES ATHENA TELECOMUNICACAO LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BENTO BORBA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem BENTO BORBA, HISTORICO = PAGAMENTO DE TITULO ALUGUEL BENTO BORBA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIROPAR PARAFUSO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GIROPAR PARAFUSO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECAD"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ECAD, HISTORICO = PAGAMENTO DE TITULO ESCRITORIO CENTRAL DE ARRECADACAO E DISTRIBUICAO ECAD";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMERSON KLUG"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem EMERSON KLUG, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE DE ALMENAU"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem JOSE DE ALMENAU, HISTORICO = PAGAMENTO DE TITULO ALUGUEL JOSE DE ALMENAU";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIST"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LINX, Fornecedor/Cliente contem SIST, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOJAS COLOMBO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem LOJAS COLOMBO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIBERI SERVICOS EM PSICOLOGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem LIBERI SERVICOS EM PSICOLOGIA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA PAULA CAMPOS DE ALMENAU"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MARIA PAULA CAMPOS DE ALMENAU, HISTORICO = PAGAMENTO DE TITULO ALUGUEL MARIA PAULA CAMPOS DE ALMENAU";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARLIAN CONTABILIDADE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MARLIAN CONTABILIDADE, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATHEUS EDUARDO KOGLER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MATHEUS EDUARDO KOGLER, HISTORICO = PAGAMENTO DE TITULO MATHEUS EDUARDO KOGLER";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUASA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem QUASA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGBRASIL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem PAGBRASIL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUIMIDROL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem QUIMIDROL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO SOCIAL DA INDUSTRIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SERVICO SOCIAL DA INDUSTRIA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIMAPPEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SIMAPPEL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSTUSA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TRANSTUSA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MIXXER DESENVOLVIMENTO EMPRESA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MIXXER DESENVOLVIMENTO EMPRESA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVATUR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SILVATUR, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELCOVILLE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem DELCOVILLE, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO CONTAMAX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO CONTAMAX, HISTORICO = APLICACAO CONTAMAX";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TARIFA, HISTORICO = TARIFA BANCARIA SANTANDER";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS01, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS04, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS02, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS05, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS03, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS01, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS03, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS02, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS04, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS01, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS03, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS04, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS05, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS02, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS02, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS05, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS04, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS03, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS05, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS02, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO DEVOLUCAO PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO DEVOLUCAO PIX, HISTORICO = DEVOLUCAO DEPOSITO BANCO SICOOB - CONFORME EXTRATO BANCARIO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS01, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *CPETCURSOS03, HISTORICO = PAGAMENTO DE TITULO CURSO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRRF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem IRRF, HISTORICO = IRRF RECOMPRA COMPROMISSADA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIO PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000004098510"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000004098510, HISTORICO = PAGAMENTO TITULO DA CELESC 0000004098510";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000007194013"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000007194013, HISTORICO = PAGAMENTO TITULO DA CELESC 0000007194013";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA BRT SC 7107093526"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA BRT SC 7107093526, HISTORICO = PAGAMENTO DE TITULO DA BRT SC 7175238526";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000049126743"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000049126743, HISTORICO = PAGAMENTO TITULO DA CELESC 0000049126743";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000049126778"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000049126778, HISTORICO = PAGAMENTO TITULO DA CELESC 0000049126778";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA BRT SC 7170157803"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA BRT SC 7170157803, HISTORICO = PAGAMENTO DE TITULO DA BRT SC 7170157803";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA BRT SC 7175238526"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA BRT SC 7175238526, HISTORICO = PAGAMENTO DE TITULO DA BRT SC 7175238526";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000002493608"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000002493608, HISTORICO = PAGAMENTO TITULO DA CELESC 0000002493608";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000004098536"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000004098536, HISTORICO = PAGAMENTO TITULO DA CELESC 0000004098536";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000004099630"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000004099630, HISTORICO = PAGAMENTO TITULO DA CELESC 0000004099630";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000007968841"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000007968841, HISTORICO = PAGAMENTO TITULO DA CELESC 0000007968841";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000020125713"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000020125713, HISTORICO = PAGAMENTO TITULO DA CELESC 0000020125713";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000028414560"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000028414560, HISTORICO = PAGAMENTO TITULO DA CELESC 0000028414560";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000046660463"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000046660463, HISTORICO = PAGAMENTO TITULO DA CELESC 0000046660463";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000026528810"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000026528810, HISTORICO = PAGAMENTO TITULO DA CELESC 0000026528810";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000031848016"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000031848016, HISTORICO = PAGAMENTO TITULO DA CELESC 0000031848016";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000046820169"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA CELESC 0000046820169, HISTORICO = PAGAMENTO TITULO DA CELESC 0000046820169";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CASAN, HISTORICO = PAGAMENTO DE TITULO CASAN";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA NET SERVICOS 1073282"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA NET SERVICOS 1073282, HISTORICO = PAGAMENTO DE TITULO DA NET SERVICOS 1073282";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9365454532"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA VIVO FIXO 9365454532, HISTORICO = PAGAMENTO DE TITULO DA VIVO FIXO 9365454532";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9391723928"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA VIVO FIXO 9391723928, HISTORICO = PAGAMENTO DE TITULO DA VIVO FIXO 9391723928";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEL EMPRESAS03922805363"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TEL EMPRESAS03922805363, HISTORICO = PAGAMENTO DE TITULO TEL EMPRESAS03922805363";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9913619588"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA VIVO FIXO 9913619588, HISTORICO = PAGAMENTO DE TITULO DA VIVO FIXO 9913619588";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB AUTOR SEM PARAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB AUTOR SEM PARAR, HISTORICO = DEB AUTOR SEM PARAR";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELESC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CELESC, Fornecedor/Cliente contem DISTRIBUICAO, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECAD") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ECAD, Complemento (01) contem BOLETO, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO DE TITULO ESCRITORIO CENTRAL DE ARRECADACAO E DISTRIBUICAO ECAD";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem FABIANA, Fornecedor/Cliente contem ALUGUEL, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem BENTO, Complemento (01) contem PIX, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABIO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem FABIO, Complemento (01) contem PIX, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ CARLOS MAFRA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PIX, Fornecedor/Cliente contem LUIZ CARLOS MAFRA, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MARIA, Fornecedor/Cliente contem ROSA, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TABELIONATO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TABELIONATO, Complemento (01) contem PIX, Tipo Planilha contem SICREDI_PAG, HISTORICO = . TABELIONATO DE NOTAS E 1. OFICIO DE PROTESTO DE TITULOS DA COMARCA DE JLLE Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOERTER") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALUGUEL, Fornecedor/Cliente contem FOERTER, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZATTAR") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALUGUEL, Fornecedor/Cliente contem ZATTAR, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABIANA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALUGUEL, Fornecedor/Cliente contem FABIANA, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JONI") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALUGUEL, Fornecedor/Cliente contem JONI, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELESC") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CELESC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CELESC, Complemento (01) contem CELESC, Tipo Planilha contem SICREDI_PAG, HISTORICO = FATURA Fornecedor/Cliente Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSIGNADO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LIQUIDACAO BOLETO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CONSIGNADO, Complemento (01) contem LIQUIDACAO BOLETO, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIBERTY") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LIQUIDACAO BOLETO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LIBERTY, Complemento (01) contem LIQUIDACAO BOLETO, Tipo Planilha contem SICREDI_PAG, HISTORICO = PGTO Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAXA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TAXA, Complemento (01) contem MUNICIPAL, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TARIFA, Complemento (01) contem TARIFA, Tipo Planilha contem SICREDI_PAG, HISTORICO = JUROS E TAXAS BANCARIAS - BANCO SICREDI Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEVEROS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem LEVEROS, Complemento (01) contem PARCELAMENTO, HISTORICO = PAGAMENTO DE TITULO 102022 LEVEROS";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAG*EQUIPMAQ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Complemento (01) contem PARCELAMENTO, Fornecedor/Cliente contem PAG*EQUIPMAQ, HISTORICO = PAGAMENTO DE TITULO 1111 PAG*EQUIPMAQ 03/06";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNO OBRAS  02/03") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem TECNO OBRAS 02/03, Complemento (01) contem PARCELAMENTO, HISTORICO = PAGAMENTO TECNO OBRAS 02/03";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUPERMERCADOS ANGE10/10") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem SUPERMERCADOS ANGE10/10, Complemento (01) contem PARCELAMENTO, HISTORICO = PAGAMENTO DE TITULO ANGELONI ELETRO 10/10";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VAL*VALOREM*PREMIE04/04"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Complemento (01) contem PARCELAMENTO, Fornecedor/Cliente contem VAL*VALOREM*PREMIE04/04, HISTORICO = PAGAMENTO DE TITULO 1111 VAL*VALOREM*PREMIE 04/04";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*MARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RUBIA03"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem *MARA, Fornecedor/Cliente contem RUBIA03, HISTORICO = PAGAMENTO DE TITULO 73 MARCIO BATERIAS 03/10";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem FOLHA, Fornecedor/Cliente contem PAGTO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem GIRO, Fornecedor/Cliente contem PAR, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem GIRO, Fornecedor/Cliente contem PAR, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACEVILLE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ACEVILLE, Fornecedor/Cliente contem TRANSPORTES, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORICULTURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOINVILLE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem FLORICULTURA, Fornecedor/Cliente contem JOINVILLE, HISTORICO = PAGAMENTO TITULO - FLORICULTURA JOINVILLE COMERCIO DE FLORES LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAB"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MED, Fornecedor/Cliente contem TRAB, HISTORICO = PAGAMENTO TITULO - MED TRAB CONSULTORIA EM MEDICINA D TRABA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECHVS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLU"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TECHVS, Fornecedor/Cliente contem SOLU, HISTORICO = PAGAMENTO TITULO - TECHVS SOLUCOES LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MIXXER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESENVOLVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MIXXER, Fornecedor/Cliente contem DESENVOLVIMENTO, HISTORICO = PAGAMENTO TITULO - MIXXER DESENVOLVIMENTO EMPRESARIAL LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PPG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem PPG, Fornecedor/Cliente contem INDUSTRIAL, HISTORICO = PAGAMENTO TITULO - PPG IND BRASIL TINTAS VERNIZES LTDA - GV";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISTEMAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem RD, Fornecedor/Cliente contem SISTEMAS, HISTORICO = PAGAMENTO TITULO - RD SISTEMAS CONTRA INCENDIO LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLANEJA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem PLANEJA, Fornecedor/Cliente contem SERVICOS, HISTORICO = PAGAMENTO TITULO - PLANEJA SERVICOS LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRIME"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TOP, Fornecedor/Cliente contem PRIME, HISTORICO = PAGAMENTO TITULO - TOP PRIME SUPRIMENTOS PARA EMPRESAS LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTALERIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem CRISTALERIA, Fornecedor/Cliente contem RAIAR, HISTORICO = PAGAMENTO TITULO - CRISTALERIA RAIAR DA AURORA LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIGRE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERIAIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TIGRE, Fornecedor/Cliente contem MATERIAIS, HISTORICO = PAGAMENTO DE TITULO - TIGRE MATERIAIS E SOLUCOES PARA CONSTRUC";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VMS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUCOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem VMS, Fornecedor/Cliente contem SOLUCOES, HISTORICO = PAGAMENTO TITULO - VMS SOLUCOES LTDA ME";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSIGNADO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CONSIGNADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CONSIGNADO, Complemento (04) contem CONSIGNADO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDO PARA MELHORIA DA SEGURAN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Complemento (01) contem BOLETO, Fornecedor/Cliente contem FUNDO PARA MELHORIA DA SEGURAN, HISTORICO = PAGAMENTO MULTAS NOTIFICADAS";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLAUCILEIA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GLAUCILEIA, Complemento (01) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAPACHOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem CAPACHOS, Fornecedor/Cliente contem CIA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LASA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PUBLICIDADE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem LASA, Fornecedor/Cliente contem PUBLICIDADE, HISTORICO = - LASA PUBLICIDADE AO AR LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AKZO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOBEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem AKZO, Fornecedor/Cliente contem NOBEL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAPITAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem AG, Fornecedor/Cliente contem CAPITAL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELESC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem CELESC, Fornecedor/Cliente contem DISTRIBUICAO, HISTORICO = PAGAMENTO TITULO DA CELESC";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GDAI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOLDING"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GDAI, Fornecedor/Cliente contem HOLDING, HISTORICO = PAGAMENTO DE TITULO ALUGUEL GDAI HOLDING LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIDION") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GIDION, Fornecedor/Cliente contem TRANSPORTES, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLAUCILEIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAUST"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GLAUCILEIA, Fornecedor/Cliente contem FAUST, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INVICTUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem INSTITUTO, Fornecedor/Cliente contem INVICTUS, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADRIANO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MAX, Fornecedor/Cliente contem ADRIANO, HISTORICO = PAGAMENTO DE TITULO - MAX ADRIANO KOGLER";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESTAURACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MONAR, Fornecedor/Cliente contem RESTAURACAO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOEMIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem NOEMIA, Fornecedor/Cliente contem APARECIDA, HISTORICO = PAGAMENTO DE TITULO ALUGUEL NOEMIA APARECIDA DE OLIVEIRA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PPG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem PPG, Fornecedor/Cliente contem INDUSTRIAL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SDN") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SDN, Fornecedor/Cliente contem COMERCIO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIM") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SIM, Fornecedor/Cliente contem INTERNET, HISTORICO = PAGAMENTO DE TITULO SIM INTERNET PROVEDORES DE INT";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3G"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TRANSPORTES, Fornecedor/Cliente contem 3G, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRINDES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem BRINDES, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECHVS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUCOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TECHVS, Fornecedor/Cliente contem SOLUCOES, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUZANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLECK"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SUZANA, Fornecedor/Cliente contem FLECK, HISTORICO = PAGAMENTO DE TITULO SUZANA FLECK TELECOMUNICACOES";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TMX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TMX, Fornecedor/Cliente contem TRANSPORTES, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem VIB, Fornecedor/Cliente contem MASTER, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISFRIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem DISFRIO, Fornecedor/Cliente contem DISTRIBUIDORA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACTRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MACTRA, Fornecedor/Cliente contem INDUSTRIA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem FOLHA, Fornecedor/Cliente contem PAGTO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRERO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem BETO, Fornecedor/Cliente contem CARRERO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TED, Fornecedor/Cliente contem ENVIADA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARML12"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem ARML12, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U ARML12";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("21A0709253"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CRI, Fornecedor/Cliente contem 21A0709253, HISTORICO = APLICACAO COMPROMISSADA CRI 21A0709253";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("22I1423499"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CRI, Fornecedor/Cliente contem 22I1423499, HISTORICO = CRI 22I1423499";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRJS12"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem IRJS12, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U IRJS12";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOVI27"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem MOVI27, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U MOVI27";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECOV14"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem ECOV14, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U ECOV14";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUAR23"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem GUAR23, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U GUAR23";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HVSP11"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem HVSP11, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U HVSP11";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COTAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DB, Fornecedor/Cliente contem COTAS, HISTORICO = PGTO REFERENTE COTAS CAPITAL - ACREDI";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGADOR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem PAGADOR, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000000000731") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem 0000000000000731, Complemento (02) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem IOF, HISTORICO = IOF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem JUROS, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO CONSIGNADO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CONSIGNADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CREDITO CONSIGNADO, Complemento (04) contem CONSIGNADO, HISTORICO = PGTO REFERENTE EMPRESTIMOS CONSIGNADOS A PAGAR";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TAR, Fornecedor/Cliente contem COBRANCA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("IOF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem IOF, Complemento (04) contem IOF, HISTORICO = PAGAMENTO IOF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADAPT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TAR, Fornecedor/Cliente contem ADAPT, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRO LEITE OLIBONI") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ALEXSANDRO LEITE OLIBONI, Complemento (01) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRO LEITE OLIBONI") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ALEXSANDRO LEITE OLIBONI, Complemento (01) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZERMIANI") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALDO, Fornecedor/Cliente contem ZERMIANI, Complemento (01) contem PIX, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASILEIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORREIOS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem EMPRESA, Fornecedor/Cliente contem BRASILEIRA, Fornecedor/Cliente contem CORREIOS, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PATRICIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUZANA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PATRICIA, Fornecedor/Cliente contem SUZANA, Complemento (01) contem PIX, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCELO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUGUSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAUAB") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MARCELO, Fornecedor/Cliente contem AUGUSTO, Fornecedor/Cliente contem BAUAB, Tipo Planilha contem RELPAGA, HISTORICO = PAGAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(documento).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SCHNEI") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))  historico = "HISTORICO POR REGRA = Quando Documento/NF contem ALUGUEL, Fornecedor/Cliente contem CARLOS, Fornecedor/Cliente contem SCHNEI, Tipo Planilha contem SICREDI_PAG, HISTORICO = PAGAMENTO Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOINVI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem AGUAS, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem JOINVI, HISTORICO = PAGAMENTO AGUA AGUAS DE JOINVILLE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem LUCIMAURO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem SILVA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem LUCIMAURO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem SILVA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANGELI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("&") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ANGELI, Fornecedor/Cliente contem &, Fornecedor/Cliente contem CONSULTORES, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem CASAS, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem AGUA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem CASAS, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem AGUA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JATOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LAVA, Fornecedor/Cliente contem JATOS, Fornecedor/Cliente contem UNIAO, Complemento (01) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSOCIACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REVENDEDORES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem ASSOCIACAO, Fornecedor/Cliente contem DOS, Fornecedor/Cliente contem REVENDEDORES, HISTORICO = PAGAMENTO DE TITULO - ASSOCIACAO DOS REVENDEDORES DE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CCL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BOLETO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem CCL, Fornecedor/Cliente contem INDUSTRIES, Complemento (01) contem BOLETO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISK") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TENHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem DISK, Fornecedor/Cliente contem TENHA, Fornecedor/Cliente contem LTDA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLORIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FATIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem GLORIA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem FATIMA, HISTORICO = PAGAMENTO DE TITULO GLORIA DE FATIMA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JONATAN") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem JONATAN, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem OLIVEIRA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTINT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SANTINT, Fornecedor/Cliente contem DO, Fornecedor/Cliente contem BRASIL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIMAURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem LUCIMAURO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem SILVA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SICAD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem SICAD, Fornecedor/Cliente contem DO, Fornecedor/Cliente contem BRASIL, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEGRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem TRANSP, Fornecedor/Cliente contem OURO, Fornecedor/Cliente contem NEGRO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Fornecedor/Cliente contem CASAS, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem AGUA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VSCF14"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem VSCF14, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U VSCF14";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LF002200DG2"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem LF002200DG2, HISTORICO = APLICACAO COMPROMISSADA LF FLU LF002200DG2";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WETE11"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem FLU, Fornecedor/Cliente contem WETE11, HISTORICO = APLICACAO COMPROMISSADA DEB FLU U WETE11";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPROMISSADA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Complemento (04) contem APLICACAO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem COMPROMISSADA, HISTORICO = PAGAMENTO DE TITULO APLICACAO COMPROMISSADA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("02756064"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem AGUA, Fornecedor/Cliente contem 02756064, HISTORICO = PAGAMENTO DE TITULO DA AGUA JOINV 02756064";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("02770733"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem AGUA, Fornecedor/Cliente contem 02770733, HISTORICO = PAGAMENTO DE TITULO DA AGUA JOINV 02770733";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("08658684"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem AGUA, Fornecedor/Cliente contem 08658684, HISTORICO = PAGAMENTO DE TITULO DA AGUA JOINV 08658684";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USO FUTURO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem USO FUTURO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USO FUTURO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem USO FUTURO, HISTORICO =";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HISTORICO PADRAO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem HISTORICO PADRAO, HISTORICO = PAGAMENTO DE TITULO Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(documento).contains("ANUIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("R$18") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ZZPADRAOOTTIMIZZAPAG, Documento/NF contem ANUIDADE, Fornecedor/Cliente contem R$18, Fornecedor/Cliente contem ., Fornecedor/Cliente contem 5, HISTORICO = 03/2023 ANUIDADE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem APLIC, Fornecedor/Cliente contem FINANC, Fornecedor/Cliente contem AVISO, Fornecedor/Cliente contem PREVIO, HISTORICO = PROVISAO RENDIMENTOS APLIC. FINANC. AVISO PREVIO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AVISO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SICREDI_PAG, Fornecedor/Cliente contem APLIC, Fornecedor/Cliente contem FINANC, Fornecedor/Cliente contem AVISO, Fornecedor/Cliente contem PREVIO, HISTORICO = PROVISAO RENDIMENTOS APLIC. FINANC. AVISO PREVIO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPRESSAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem COR, Fornecedor/Cliente contem COM, Fornecedor/Cliente contem IMPRESSAO, Complemento (01) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOJISTAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem CAMARA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem DIR, Fornecedor/Cliente contem LOJISTAS, HISTORICO = PAGAMENTO DE TITULO CAMARA DE DIRIGENTES LOJISTAS DE JOINVILLE CDL";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BWB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEGOCIOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem BWB, Fornecedor/Cliente contem CONSULTORIA, Fornecedor/Cliente contem E, Fornecedor/Cliente contem NEGOCIOS, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KOTH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PINTURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem KOTH, Fornecedor/Cliente contem SERVICOS, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem PINTURA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MMB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BENS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem RELPAGA, Fornecedor/Cliente contem MMB, Fornecedor/Cliente contem ADMINISTRADORA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem BENS, HISTORICO = PAGAMENTO DE TITULO ALUGUEL MMB ADMINISTRADORA DE BENS EIR";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMITIDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem EMITIDO, Fornecedor/Cliente contem MESMA, Fornecedor/Cliente contem TIT, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01068"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem S, Fornecedor/Cliente contem FRANC, Fornecedor/Cliente contem 01068, HISTORICO = PAGAMENTO DE TITULO DA A S FRANC SUL 01068";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAFISC"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem NOTAFISC, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FATURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem FATURA, HISTORICO = PAGAMENTO Fornecedor/Cliente - Complemento (01)";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1304029.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9365454532"))    historico = "PAGAMENTO DE TITULO DA VIVO FIXO 9365454532";  //id -> 1716767.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA"))    historico = "CodigoHistorico:13";  //id -> 1716786.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAN"))    historico = "PAGAMENTO DE TITULO CASAN";  //id -> 1716758.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000002493608"))    historico = "PAGAMENTO TITULO DA CELESC 0000002493608";  //id -> 1716732.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("IOF"))    historico = "PAGAMENTO IOF";  //id -> 1716782.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO DEVOLUCAO PIX"))    historico = "DEVOLU��O DEPOSITO BANCO SICOOB - CONFORME EXTRATO BANCARIO";  //id -> 1398421.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARML12"))    historico = "APLICACAO COMPROMISSADA DEB FLU U ARML12";  //id -> 1618484.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000026528810"))    historico = "PAGAMENTO TITULO DA CELESC 0000026528810";  //id -> 1716747.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPROMISSADA"))    historico = "PAGAMENTO DE TITULO APLICACAO COMPROMISSADA";  //id -> 1714736.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LF002200DG2"))    historico = "APLICACAO COMPROMISSADA LF FLU LF002200DG2";  //id -> 1618506.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279781.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("21A0709253"))    historico = "APLICACAO COMPROMISSADA CRI 21A0709253";  //id -> 1618480.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOVI27"))    historico = "APLICACAO COMPROMISSADA DEB FLU U MOVI27";  //id -> 1618495.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRERO"))    historico = "CodigoHistorico:150";  //id -> 1084418.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000007968841"))    historico = "PAGAMENTO TITULO DA CELESC 0000007968841";  //id -> 1716741.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000020125713"))    historico = "PAGAMENTO TITULO DA CELESC 0000020125713";  //id -> 1716743.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000046660463"))    historico = "PAGAMENTO TITULO DA CELESC 0000046660463";  //id -> 1716752.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELCOVILLE"))    historico = "CodigoHistorico:150";  //id -> 1084548.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279733.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279730.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA SANTA CLARA LTDA"))    historico = "CodigoHistorico:150";  //id -> 2100645.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRRF"))    historico = "IRRF RECOMPRA COMPROMISSADA";  //id -> 1618509.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000007194013"))    historico = "PAGAMENTO TITULO DA CELESC 0000007194013";  //id -> 1716740.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COTAS"))    historico = "PGTO REFERENTE COTAS CAPITAL - ACREDI";  //id -> 1673144.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1304035.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA"))    historico = "CodigoHistorico:29";  //id -> 1201879.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA BRT SC 7175238526"))    historico = "PAGAMENTO DE TITULO DA BRT SC 7175238526";  //id -> 1716728.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA NET SERVICOS 1073282"))    historico = "PAGAMENTO DE TITULO DA NET SERVICOS 1073282";  //id -> 1716766.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB AUTOR SEM PARAR"))    historico = "DEB AUTOR SEM PARAR";  //id -> 1716778.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279736.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))    historico = "" + nomeOrigem + "";  //id -> 1280174.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMITIDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT"))    historico = "CodigoHistorico:29";  //id -> 1398436.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA"))    historico = "TARIFA BANC�RIA SANTANDER";  //id -> 1201866.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))    historico = "" + nomeOrigem + "";  //id -> 1280183.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000004098536"))    historico = "PAGAMENTO TITULO DA CELESC 0000004098536";  //id -> 1716736.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS02"))    historico = "" + nomeOrigem + "";  //id -> 1280179.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS"))    historico = "CodigoHistorico:13";  //id -> 1714155.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO"))    historico = "CodigoHistorico:125";  //id -> 1049792.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEL EMPRESAS03922805363"))    historico = "PAGAMENTO DE TITULO TEL EMPRESAS03922805363";  //id -> 1716789.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRJS12"))    historico = "APLICACAO COMPROMISSADA DEB FLU U IRJS12";  //id -> 1618493.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))    historico = "" + nomeOrigem + "";  //id -> 1280185.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000000000731") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PIX"))    historico = "CodigoHistorico:29";  //id -> 1673269.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000049126743"))    historico = "PAGAMENTO TITULO DA CELESC 0000049126743";  //id -> 1716755.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000049126778"))    historico = "PAGAMENTO TITULO DA CELESC 0000049126778";  //id -> 1716756.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279778.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF"))    historico = "IOF";  //id -> 1714154.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9391723928"))    historico = "PAGAMENTO DE TITULO DA VIVO FIXO 9391723928";  //id -> 1716768.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279790.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000031848016"))    historico = "PAGAMENTO TITULO DA CELESC 0000031848016";  //id -> 1716751.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA BRT SC 7170157803"))    historico = "PAGAMENTO DE TITULO DA BRT SC 7170157803";  //id -> 1716727.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000046820169"))    historico = "PAGAMENTO TITULO DA CELESC 0000046820169";  //id -> 1716753.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUAR23"))    historico = "APLICACAO COMPROMISSADA DEB FLU U GUAR23";  //id -> 1618489.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279786.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000025631447"))    historico = "PAGAMENTO TITULO DA CELESC 0000025631447";  //id -> 1716746.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS01"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1304027.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000028414560"))    historico = "PAGAMENTO TITULO DA CELESC 0000028414560";  //id -> 1716749.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000004099630"))    historico = "PAGAMENTO TITULO DA CELESC 0000004099630";  //id -> 1716737.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01068"))    historico = "PAGAMENTO DE TITULO DA A S FRANC SUL 01068";  //id -> 1716731.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9796469720"))    historico = "PAGAMENTO DE TITULO DA VIVO FIXO 9796469720";  //id -> 1716773.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGADOR"))    historico = "CodigoHistorico:13";  //id -> 1673155.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VSCF14"))    historico = "APLICACAO COMPROMISSADA DEB FLU U VSCF14";  //id -> 1618499.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HVSP11"))    historico = "APLICA��O COMPROMISSADA DEB FLU U HVSP11";  //id -> 1618491.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA"))    historico = "CodigoHistorico:150";  //id -> 1084453.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))    historico = "PAGAMENTO AGUA " + nomeOrigem + "";  //id -> 259373.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECOV14"))    historico = "APLICACAO COMPROMISSADA DEB FLU U ECOV14";  //id -> 1618488.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1304032.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS03"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1304030.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WETE11"))    historico = "APLICACAO COMPROMISSADA DEB FLU U WETE11";  //id -> 1618503.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRO LEITE OLIBONI") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))    historico = "CodigoHistorico:150";  //id -> 1942844.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAISON VICENTE PEREIRA"))    historico = "CodigoHistorico:150";  //id -> 2100668.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("RELPAGA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALCIDES HENRIQUE MEIRELES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PIX"))    historico = "CodigoHistorico:150";  //id -> 2100637.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("22I1423499"))    historico = "CRI 22I1423499";  //id -> 1618482.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA VIVO FIXO 9913619588"))    historico = "PAGAMENTO DE TITULO DA VIVO FIXO 9913619588";  //id -> 1716774.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADAPT"))    historico = "CodigoHistorico:13";  //id -> 1716783.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS04"))    historico = "PAGAMENTO DE TITULO CURSO";  //id -> 1279788.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO CONSIGNADO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CONSIGNADO"))    historico = "PGTO REFERENTE EMPRESTIMOS CONSIGNADOS A PAGAR";  //id -> 1716713.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("02756064"))    historico = "PAGAMENTO DE TITULO DA AGUA JOINV 02756064";  //id -> 1716717.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA CELESC 0000004098510"))    historico = "PAGAMENTO TITULO DA CELESC 0000004098510";  //id -> 1716734.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("02770733"))    historico = "PAGAMENTO DE TITULO DA AGUA JOINV 02770733";  //id -> 1716720.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("08658684"))    historico = "PAGAMENTO DE TITULO DA AGUA JOINV 08658684";  //id -> 1716722.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA BRT SC 7107093526"))    historico = "PAGAMENTO DE TITULO DA BRT SC 7175238526";  //id -> 1716725.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO CONTAMAX"))    historico = "APLICA��O CONTAMAX";  //id -> 1201846.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG"))    historico = "JUROS E TAXAS BANCARIAS - BANCO SICREDI " + mesAnoAtual + "";  //id -> 259537.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ZZPADRAOOTTIMIZZAPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("*CPETCURSOS05"))    historico = "" + nomeOrigem + "";  //id -> 1280186.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USO FUTURO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USO FUTURO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HISTORICO PADRAO"))  historico = "PAGAMENTO DE TITULO" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAFISC"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FATURA"))  historico = "PAGAMENTO" + " " + nomeOrigem + " " + "-" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,"-"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("-") && parametro.equals("documento")) lote = cutString(lote,"U-"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("-") && parametro.equals("documento")) lote = cutString(lote,"P "); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("-") && parametro.equals("documento")) lote = cutString(lote,"DG-"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("TOTA") && parametro.equals("documento")) lote = cutString(lote,":"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("AF") && parametro.equals("documento")) lote = cutString(lote,"AF-"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("TOTA") && parametro.equals("documento")) lote = cutString(lote,":"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("DA") && parametro.equals("documento")) lote = cutString(lote,"DA-"); //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(documento).contains("TOTA") && parametro.equals("documento")) lote = ""; //ROT-2020-1010158
    if (StringUtil.removeSpecialCharsToUC(complemento06).contains("IMP") && parametro.equals("documento")) lote = cutString(lote,"IMP3"); //ROT-2020-1010158

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    if (parametro.equals("documento") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICOOB_PAG") &&
        !StringUtil.removeSpecialCharsToUC(documento).contains("REGRA COLUNA ALTERNATIVA DOCUMENTO") &&
        StringUtil.removeSpecialCharsToUC(documento).equals("")) {
        retornaColunas = "1";
    }
    if (parametro.equals("nomeOrigem") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SICREDI_PAG") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLUNA ALTERNATIVA")) {
        retornaColunas = "1";
    }
    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS

/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoAux 			 = "";
	String dataDDMM 		 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	int ivalorDocumento		 = -1;
	int inomeOrigem			 = -1;
	int idataMovimento		 = -1;
	int icomplemento02		 = -1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO").trim();
	if(jDados.has("ANOAUX"))  			anoAux  = jDados.optString("ANOAUX").trim();
	
	//logger.logInfo("Tipo: "+tipoExtrato);

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);


            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;
            dataMovimento = "";

			if (tipoExtrato.equals("TIPO04")) {
				if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("")){
					ivalorDocumento	= 5;
					inomeOrigem		= 4;
					idataMovimento	= 1;
				} else{
					ivalorDocumento	= 4;
					inomeOrigem		= 3;
					idataMovimento	= 0;
				}
				
				if(line.contains("EXTRATO DE")){
					anoAux = cutString(line, line.lastIndexOf("/20"), line.lastIndexOf("/20")+5);
				}
                
				
				

                if (memFile.getStringFieldRemoveEspCharsUpper(0).equals(0)) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("NOME:")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA:")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE CONTA CORRENTE")) continue;
				if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("MENTO")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("S A L D O")) continue;
				
				
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
				
				
				String dataString = "";

                //try {
                    // Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    // dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    // dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                // } catch (Exception dt1) {
                     try {
                         //Date dt = memFile.getDateField(idataMovimento);
                         //dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                         //dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim();
						dataString = dataString +"/"+ anoAux;
						
						Date dt2  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt2, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt2, "yyyy-MM");
						
                     } catch (Exception dt2) {
                         try {
                            dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, 10).replaceAll("\\-", "\\/");
                            Date dt  = DateUtil.stringToDate(dataString, "yyyy/MM/dd");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							
                        } catch (Exception dt2) { 
							try{
								dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
								dataLote  = getCampoDate(dataMovimento, "", "yyyy-MM");
							}catch (Exception dt2) {}
							}
						}
                 //}
				
				//logger.logInfo("Data: "+dataMovimento);

                if (dataMovimento.equals("")) continue;

                strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

                if (strValorDocumento.contains("-")) debitoCredito  = "EXTRATO-DEBITO";
                if (!strValorDocumento.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrj) { valorDocumento = 0;}

                if (valorDocumento == 0) continue;
				
				//logger.logInfo("DT - "+ dataMovimento +" | VD - "+ valorDocumento +" | DC - "+ debitoCredito +" | NM - "+ nomeOrigem);

            }
			if (tipoExtrato.equals("TIPO03")) {
				ivalorDocumento	= 3;
				inomeOrigem		= 1;
				idataMovimento	= 0;
				icomplemento02	= 2;
				
				//2405-037750 - condicao adicionada pq estava causando erro quando nao dava para separar a data por espaco
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				if(dataString.contains(" ")){
					String[] dataDDMMarray	 = {};
					dataDDMMarray = memFile.getStringFieldRemoveEspCharsUpper(0).trim().split(" ");
					dataDDMM = dataDDMMarray[0]+dataDDMMarray[1]+getMonth(dataDDMMarray[2])+anoAux;
				}
				
				//String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				
				if (getCampoDate(dataString).equals("") && !(dataString.length() == 5)) dataString = dataDDMM;
				
				if (!dataString.equals("") && !(dataString.length() == 5)) {
					String dataMovimentoAux	= getCampoDate(dataString);
					if (dataMovimentoAux.contains("/")) {
						dataMovimento		= getCampoDate(dataString);
						dataLote			= getCampoDate(dataMovimento, "", "yyyy-MM");
					}
				}
				
				if(dataString.length() == 5){
					try {
						Date dt = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
						int datanum = Integer.parseInt(dataString);
						Calendar calSerial = Calendar.getInstance();
						calSerial.setTime(dt);
						calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
						dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
					}catch (Exception dt2) { }
				}
				
				if(ivalorDocumento >=0){
					try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
					catch (Exception vlrj) { valorDocumento = 0;}
				}
				
				if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
				if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				
				valorDocumento = Math.abs(valorDocumento);
				
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
				
				// logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento);
			}
			if (!tipoExtrato.equals("TIPO03") && !tipoExtrato.equals("TIPO04")) {
				
				if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("DATA:")) continue;
				
				try {
					Date dt = memFile.getDateField(1);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(1, "dd/MM/yyyy");    // --- VERIFICAR
						dataMovimento = DateUtil.dateToString(dt, "dd/MM");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(1).trim();
						if(dataMovimento.length() >= 5) dataMovimento = dataMovimento.substring(0, 5);
					}
				}
				// logger.logInfo("OTT1 -> " + " |DM=" + dataMovimento + " |ANODATA -> " + anoData);
				dataMovimento = dataMovimento + "/" + anoData;
				// logger.logInfo("OTT2 -> " + " |DM2=" + dataMovimento + " |ANODATA2 -> " + anoData);
				try {
					Date dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
				} catch (Exception dateException) {
					continue;
				}
			
				if (tipoExtrato.equals("TIPO01")) {
					try {
						valorDocumento = memFile.getDoubleField(5);
					} catch(Exception e) {
						valorDocumento = 0;
					}
				}

				if (tipoExtrato.equals("TIPO02")) {
					try {
						valorDocumento = memFile.getDoubleField(6);
					} catch(Exception e) {
						valorDocumento = 0;
					}
					complemento02 = memFile.getStringFieldRemoveEspCharsUpper(5);
				}
				if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
				if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				valorDocumento = Math.abs(valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(4);
				if (tipoExtrato.equals("TIPO01") && !memFile.getStringFieldRemoveEspCharsUpper(8).equals("")) {
					nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(8);
					complemento02 = memFile.getStringFieldRemoveEspCharsUpper(4);
				}
			}
			
			if(tipoExtrato.equals("TIPO02")){
				documento = memFile.getStringFieldRemoveEspCharsUpper(5);
			}
				
			if(tipoExtrato.equals("TIPO03")){
				documento = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}



/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String tipoLayout        = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	int ivalorDocumento    = 4;
    int idataMovimento   = 0;
    int inomeOrigem    = 2;
    int idocumento    = 3;
    String linha = "";

    if(jDados.has("LINE"))         linha        = jDados.optString("LINE");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLAYOUT"))  tipoLayout  = jDados.optString("TIPOLAYOUT");

	if(!tipoLayout.contains("002")){

        if(!linha.equals("")){
            // logger.logDebug("LINHAZINHA " + linha);
            String [] head = linha.toUpperCase().split("\\|");
            
            if (!linha.contains("\\|") && linha.contains(";"))
                head = linha.toUpperCase().split(";");
            
            for(int h = 0; h < head.length;h++){
                if(head[h].contains("DATA")) idataMovimento = h;
                if(head[h].contains("HIST")) inomeOrigem = h;
                if(head[h].contains("DOCUMENTO")) idocumento = h;
                if(head[h].contains("VALOR")) ivalorDocumento = h;
            }
        }
        
        while (memFile.hasNextLine()) {

            try {
                String line = memFile.nextLine();
                line = StringUtil.removeSpecialCharsToUC(line);

                complemento01   = nomePortador;
                complemento02   = "";
                complemento03   = "";
                complemento04   = "";
                complemento05   = "";

                complemento06   = "";
                complemento07   = "";
                complemento08   = "";
                complemento09   = "";
                complemento10   = "";

                cpfCnpj         = "";

                nomeOrigem      = "";
                documento       = "";
                historico       = "";

                valorDocumento  = 0;
                valorJuros      = 0;
                valorDesconto   = 0;
                valorMulta      = 0;
                valorPagamento  = 0;

                if (memFile.getStringField(idataMovimento).equals("")) continue;
                String dataString = memFile.getStringField(idataMovimento);
                if (!dataString.equals("")) {
                    String dataMovimentoAux	  = getCampoDate(dataString);
                    if (dataMovimentoAux.contains("/")) {
                        dataMovimento     = getCampoDate(dataString);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        
                    }
                    if (!dataString.equals("") && dataMovimento.equals("")) {
                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                            // logger.logDebug("pattern");
                            String pattern = "";
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                    pattern = "yyyy-MM-dd hh:mm:ss";
                                } else {
                                    pattern = "yyyy-MM-dd";
                                }
                                dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                            } else {
                                try {
                                    // logger.logDebug("pattern ddddd");
                                    pattern = "ddddd";
                                    dataString = cutString(dataString, 0, 5);
                                    Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                    int datanum = Integer.parseInt(dataString);
                                    Calendar calSerial = Calendar.getInstance();
                                    calSerial.setTime(dt);
                                    calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                    dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                } catch (Exception dt2) {dataMovimento = "";}
                            }
                            // if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }
                }
                
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception valorException01) {
                    valorDocumento = 0;
                }
                
                // logger.logDebug("VEDEEE E " + ivalorDocumento + " | " + valorDocumento + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                
                if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if (valorDocumento == 0) continue;

                valorDocumento = Math.abs(valorDocumento);
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                complemento02 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                if (nomeOrigem.contains("INTERNET")) nomeOrigem = nomeOrigem.substring(nomeOrigem.indexOf("INTERNET")+8).trim();

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
                
                // logger.logDebug("CHAVEEXTRATO -> "+chaveExtrato);

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(documento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                    // Atualizar Chave caso encontrada.
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception readExtratoException) {
                logger.logError("Erro de leitura de Extrato Padr㯠Santander", readExtratoException);
            }
        }

    }

    if(tipoLayout.contains("002")){

        ivalorDocumento       = 5;
        idataMovimento        = 4;
        inomeOrigem           = 1;
		int inomePortador     = 0;
        int icomplemento01    = 6;

        while (memFile.hasNextLine()) {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            
            
            try {
                
                try{
                    String dia = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).substring(0,2).trim();
                    String mes = getMonth(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).substring(3,6).trim());
                    String ano = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).substring(7,11).trim();
                    String dataAux = dia + "/" + mes + "/" + ano;
                    dataMovimento     = getCampoDate(dataAux, "", "dd/MM/yyyy");
                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                }catch(Exception e){
                    continue;
                }
                
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                debitoCredito = "";
                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }
                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;
				
				nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
				complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento01)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        
        
    }

        

    }
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento		= 2;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
	int icomplemento02	= 5;
	int icomplemento03	= 0;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

	memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").length() != 8) continue;

            try {
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				Date dt  = DateUtil.stringToDate(dataString, "yyyyMMdd");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
				continue;
			}


            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			complemento03	= "";
            complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if (complemento02.equals("C")) debitoCredito = "EXTRATO-CREDITO";
            if (complemento02.equals("D")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador/*+"_"+complemento03+"_"+documento*/)
                    .param(nomeOrigem)
                    .param(StringUtil.removeSpecialCharsToUC(nomeArquivo.toUpperCase()))
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Santander", readExtratoException);
        }
    }
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento		= 2;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
	int icomplemento02	= 2;
	int icomplemento03	= 0;
	int icomplemento04	= 5;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

	memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").length() != 8) continue;

            try {
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				Date dt  = DateUtil.stringToDate(dataString, "yyyyMMdd");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
				continue;
			}


            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			complemento03	= "";
            complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if (memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).contains("C")) debitoCredito = "EXTRATO-CREDITO";
            if (memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).contains("D")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador/*+"_"+complemento03+"_"+documento*/)
                    .param(nomeOrigem)
                    .param(StringUtil.removeSpecialCharsToUC(nomeArquivo.toUpperCase()))
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Santander", readExtratoException);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	logger.logInfo("Dentro da caixa");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento		= 1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
	int icomplemento02	= 3;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			//logger.logInfo("Line i caixa -> "+line);
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			
			String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
			if (!dataString.equals("")) {
				String dataMovimentoAux	  = getCampoDate(dataString);
				if (dataMovimentoAux.contains("/")) {
					dataMovimento     = getCampoDate(dataString);
					dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
					
				}
				if (!dataString.equals("") && dataMovimento.equals("")) {
					if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
						String pattern = "";
						if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
							if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
								pattern = "yyyy-MM-dd hh:mm:ss";
							} else {
								pattern = "yyyy-MM-dd";
							}
							dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
						} else {
							try {
								pattern = "ddddd";
								dataString = cutString(dataString, 0, 5);
								Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
								int datanum = Integer.parseInt(dataString);
								Calendar calSerial = Calendar.getInstance();
								calSerial.setTime(dt);
								calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
								dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
							} catch (Exception dt2) {dataMovimento = "";}
						}
						if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
					}
				}
			}
			
			//logger.logInfo("IDATA = "+idataMovimento+" -- data == "+dataMovimento);

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
			
			
			if (complemento02.contains("C") || complemento02.contains("D")){
				if (complemento02.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				if (complemento02.contains("D")) debitoCredito = "EXTRATO-DEBITO";
			}else{
				if (!complemento02.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				if (complemento02.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			}	

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato CEF Excel", readExtratoException);
        }
    }
    return true;
}



/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeEmpresa        = "";
    String tipoLancamento        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;
	String isCCPI = "false";
	int MutableIsCCPI = 0; // 2403-030898 - Nicholas - 12/03/2024

    String cont = "";

    if(jDados.has("CODEMPRESA"))      codEmpresa      = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEEMPRESA"))     nomeEmpresa     = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEARQUIVO"))     nomeArquivo     = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("MutableIsCCPI"))   MutableIsCCPI   = jDados.optInt("MutableIsCCPI"); // 2403-030898 - Nicholas - 12/03/2024
	boolean f = true;
	
	while (memFile.hasNextLine()) {        
		try {
            
			String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line).trim();
			
            if(line.contains("EXTRATO DE CONTA CORRENTE)")) f = true;
            if (line.contains("==============")) continue;
            if (line.contains("PAG.:")) continue;
            if (line.contains("PERIODO: DE")) continue;
            if (line.contains("DATA") && line.contains("DOCUMENTO") && 
                line.contains("HISTORICO") && line.contains("DEBITO")) continue;
            if (line.contains("**/**/****")) continue;
            if (line.contains("CONTINUA") && line.contains("PAGINA")) continue;
            if (line.toUpperCase().startsWith("COOP.CRED")) continue;

            if (nomePortador.equals("") && line.contains("-")) {
                nomePortador = cutString(line, line.trim().length() - 12, line.trim().length());
                continue;
            }
            complemento01   = "";
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

                // Data Movimento.
            try {
                dataMovimento = cutString(line,  0, 10 );
                Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
            } catch (Exception dte) { }
			
			if(line.length() > 130){
				line = cutString(line, 0, line.length() - 14).trim();
			}
            
            if (dataMovimento.equals("") || line.length() < 72) continue;
            nomeOrigem    = StringUtil.removeSpecialChars(cutString(line,  (23+(MutableIsCCPI*2)), 72-MutableIsCCPI )).trim().toUpperCase();
            complemento01 = StringUtil.removeSpecialChars(cutString(line,  (12+(MutableIsCCPI)), (23+(MutableIsCCPI*3)) )).trim().toUpperCase();
            if(!line.substring(12, 23).trim().equals("")){
				documento     = StringUtil.removeSpecialChars(cutString(line,  (12+(MutableIsCCPI)), (23+(MutableIsCCPI*3)) )).trim().toUpperCase();				
			}else{
				documento = "EM BRANCO";
			}

            strValorDocumento = "0";

            if(tipoLancamento.equals("PAGAR") && line.length() <= 93 ){
                strValorDocumento    =  StringUtil.removeSpecialChars(cutString(line, line.length() - 12, line.length())).toUpperCase();
				debitoCredito = "EXTRATO-DEBITO";
            }
            if(tipoLancamento.equals("RECEBER") && line.length() > 93){
                strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, line.length() - 12, line.length())).toUpperCase();
                debitoCredito = "EXTRATO-CREDITO";
            }
			if(strValorDocumento.contains(".")){
				strValorDocumento = strValorDocumento.replaceAll("\\.","");
			}
			strValorDocumento = strValorDocumento.replaceAll(",",".");
            valorDocumento = Math.abs(DecimalUtil.toDecimal(strValorDocumento));
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            
            if (dataMovimento.trim().equals("")) continue;
            if (valorDocumento <= 0) continue;

            if(naoLeMais) continue;

            // Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {

                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento01)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO, HISTORICO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(nomeOrigem)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
	String dia				 = "";
	String mes				 = "";
	String ano				 = "";
	String dataAux			 = "";
	String nomeOrigemAnterior = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";
	String tipoLayout		 = "";
	String restoAux          = "";

	boolean naoLeMais = false;
	boolean somaIndex = false;
	boolean tagLcto = false;
	boolean primeiroAux = false;
	boolean eValor = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
	int icomplemento02	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("TIPOLAYOUT"))	tipoLayout = jDados.optString("TIPOLAYOUT"); //2308-013230 adicionado para pegar o tipo do layout pelo runextratosecartoes
	// jDados.put("TIPOLANCAMENTO", tipoLancamento);

	// logger.logInfo("LOG TIPO LAYOUT - " + tipoLayout);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
		
		// logger.logInfo("LINHA SUJA " + line);
        line = StringUtil.removeSpecialCharsToUC(line);

		if(line.contains("BANCO SANTANDER PESSOA JURIDICA")) tipoLayout = "002";

		if(nomePortador.contains("SANTANDER-PDF")) nomePortador	= cutString(nomePortador, nomePortador.lastIndexOf("AGENCIA")-1);

		if(tipoLayout.equals("001")){ //Padrao 1

			if(!memFile.getStringFieldRemoveEspCharsUpper(0).trim().matches("\\d{2}/\\d{2}/\\d{4}")) continue; //2310-019538
			int colunaShrink = 0;
			int contador = colunaShrink;
			for (int j=colunaShrink; j<20; j++) {
				String colunaAtual = memFile.getStringField(j).replaceAll("\"","").trim();

				if (!colunaAtual.toUpperCase().equals("A") && !colunaAtual.toUpperCase().equals("B") && !colunaAtual.toUpperCase().equals("P")) {
					memFile.setField(contador, memFile.getStringField(j).trim());
					if (j > contador) memFile.setField(j,"");
					contador++;
				}
			}

			if (line.toUpperCase().contains("A = BLOQUEIO DIA / ADM")) naoLeMais = true;
			if(naoLeMais) continue;
			if (line.toUpperCase().contains("CONTA CORRENTE") && line.toUpperCase().contains("EXTRATOS")) continue;
			if (line.startsWith("CONSULTAR")) continue;
			if (line.startsWith("SALDO")) continue;
			if (line.toUpperCase().contains("OPCAO DE PESQUISA:")) continue;
			if (line.toUpperCase().contains("PERIODOS:")) continue;
			if (line.toUpperCase().contains("SALDO ANTERIOR")) continue;
			if (line.toUpperCase().contains("BLOQUEIO DIA")) continue;
			if (line.toUpperCase().contains("B = BLOQUEADO")) continue;
			if (line.toUpperCase().contains("LANCAMENTO PROVISIONADO")) continue;
			if (line.toUpperCase().contains("POSICAO EM")) continue;
			if (line.toUpperCase().contains("SALDO DE CONTA CORRENTE")) continue;
			if (line.toUpperCase().contains("SALDO BLOQUEADO")) continue;
			if (line.toUpperCase().contains("SALDO DISPONIVEL")) continue;
			if (line.toUpperCase().contains("DESBLOQUEIO") && line.toUpperCase().contains("DIA")) continue;
			if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("EM")) continue;
			if (line.toUpperCase().contains("SANTANDERNETIBE")) continue;
			if (line.toUpperCase().contains("CENTRAL DE ATENDIMENTO")) continue;
			if (line.toUpperCase().contains("INTERNET BANKING")) continue;
			if (line.toUpperCase().contains("0800 7")) continue;
			// if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("A")) continue;
			// if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("B")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("P")) continue;

			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PROVISAO DE ENCARGOS")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("JUROS ACUMULADOS ATE")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("IOF ACUMULADO ATE")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CPMF ACUMULADA")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CPMF PROVISIONADA")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LIMITE SANTANDER")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VENCIMENTO")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("TAXA DE JUROS")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LIMITE")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("ULTIMA UTILIZACAO")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VALOR UTILIZADO")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DISPONIVEL")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CENTRAL DE ATENDIMENTO")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXCETO FERIADOS")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PESSOAS COM DEFICIENCIA")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DEMAIS LOCALIDADES")) continue;

			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")) {
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
				}
				logger.logDebug("LEITURA AUTOMATIZADA " + idataMovimento +"|"+idocumento+"|"+inomeOrigem+"|"+ivalorDocumento);
				continue;
			}
			logger.logDebug("MF.NO -> " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem) + " | " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).length());
			// if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).toUpperCase().equals("A")){
				// inomeOrigem = inomeOrigem + 1;
				// ivalorDocumento = ivalorDocumento + 1;
			// }

			logger.logDebug("LIN " + line);
			if (memFile.getFieldsSize() == 1) {

				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			} else {
				logger.logDebug("MF 1 -> " + memFile.getStringFieldRemoveEspCharsUpper(1));
				if ((memFile.getStringFieldRemoveEspCharsUpper(1).equals("A") || memFile.getStringFieldRemoveEspCharsUpper(1).equals("B")) && somaIndex == false) {
					// idataMovimento	+=1;
					// continue;
					// idocumento      +=1;
					// inomePortador	+=1;
					inomeOrigem		+=1;
					ivalorDocumento	+=1;
					somaIndex = true;
				}

				if (!memFile.getStringFieldRemoveEspCharsUpper(1).equals("A") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("B") && somaIndex) {
					somaIndex = false;
					// idataMovimento	-=1;
					// idocumento      -=1;
					// inomePortador	-=1;
					inomeOrigem		-=1;
					ivalorDocumento	-=1;
				}

				nomeOrigem = "";
				dataMovimento = "";
				valorDocumento = 0;
				try {
					try {
						String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoData;
						Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt1) {
						try {
							Date dt = memFile.getDateField(idataMovimento);
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) {
							try {
								Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
								dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							} catch (Exception dt2) { }
						}
					}

					valorDocumento  = 0;
					debitoCredito = "";

					try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
					catch (Exception vlrd) { valorDocumento = 0; }

					//#2305-004548. Tem casos que na coluna vem dois valores. O movimento e saldo.
					if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ") && valorDocumento == 0){
						try{
							valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), 0, " ").replaceAll("\\.", "").replaceAll(",", "\\."));
						}
						catch (Exception vlrd) { valorDocumento = 0; }
					}

					logger.logDebug("IVD " + ivalorDocumento + " | " + valorDocumento);

					if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
					if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
					if(tipoLancamento.contains("PAG") && debitoCredito.contains("CREDITO")) continue;
					if(tipoLancamento.contains("REC") && debitoCredito.contains("DEBITO")) continue;
					valorDocumento = Math.abs(valorDocumento);

					if (valorDocumento == 0) continue;

					nomeOrigem      = "";
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

					//#2305-004548. Limpa caractere inválido
					if(cutString(nomeOrigem, 0, " ").length() == 1){
						nomeOrigem = cutString(nomeOrigem, 1);
					}

					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;

					contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
					chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

					chaveExtrato = chaveExtrato.replaceAll("[^0-9a-zA-Z]*", "");
					if(chaveExtrato.length() > 100) chaveExtrato = cutString(chaveExtrato, 0, 99);

					if(tipoLayout.equals("001")){
						if(!nomePortador.contains("CONTA: ") && !nomePortador.contains("PE")){
							nomePortador = cutString(nomePortador, "CONTA ", " ").trim();
						}else{
							nomePortador = cutString(nomePortador, "CONTA: ", "PE").trim();
						}
					}
					
					// Buscar Extrato por Chave na Tabela IO_EXTRATO.
					extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
					.fields("CHAVE")
					.param(chaveExtrato)
					.queryUnique();

					// Inserir caso Chave nao encontrada.
					if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
						try {
							dbIOCont.insert("IO_EXTRATO")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato)
							.param(codEmpresa)
							.param(dataMovimento)
							.param(nomePortador)
							.param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
							.param(nomeArquivo.toUpperCase())
							.param(complemento02)
							.param(valorDocumento)
							.param(debitoCredito)
							.param(0)
							.execute();
						} catch (Exception sqlInsertException) {
							logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
							continue;
						}
					} else {
						try {
							dbIOCont.update("IO_EXTRATO")
							.fields("EXTRATOLIDO")
							.where("CHAVE = ? ")
							.param(0)
							.param(chaveExtrato)
							.execute();
						} catch (Exception sqlUpdateException) {
							logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
							continue;
						}
					}
				} catch (Exception ex) {
				}
			}
		}


		// Douglas Feito para o novo padrão chamado #2305-005228
		if(tipoLayout.equals("002")){
			if (line.toUpperCase().contains("0800 7")) continue;
			if (line.toUpperCase().contains("4004-2125")) continue;
			if (line.toUpperCase().contains("CENTRAL DE ATENDIMENTO")) continue;
			if (line.toUpperCase().contains("EXIBINDO RESULTADOS PARA 01/02/2023 A 28/02/2023")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("1") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("?")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("EXPORTAR")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("-") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("?")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("QUARTA, 08 DE FEVEREIRO DE 2023") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) continue;

			idataMovimento	= 1;
			idocumento      = -1;
			icomplemento02	= 1;
			inomeOrigem		= 0;
			ivalorDocumento	= 2;
			nomePortador = nomePortador.replaceAll("\\?","");
			complemento01 = nomePortador.replaceAll("\\?","");

			try {
				if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
					dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), ",", "DE");
					try {
						mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "DE", memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("DE")));
					}catch(Exception e) {
						mes = "";
					}
					try {
						ano	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf(" ")+1);
					}catch(Exception e) {
						logger.logInfo("CATCH"+e);
					}
					dataAux = dia+"/"+mes+"/"+ano;
					continue;
				}
				try {
					if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) dataMovimento = dataAux;
					else dataMovimento = "";
					}catch(Exception e) {
						logger.logInfo("CATCH1"+e);
					}
				if (dataMovimento.equals("")) continue;
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

				valorDocumento  = 0;
				debitoCreditoAux = "";
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
				if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }
				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				complemento01	= nomePortador;
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
				complemento04	= nomeOrigem;

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();

				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			} catch (Exception ex) {
			}
		}


		if(tipoLayout.equals("003")){ //Esse e o padrao 2.2

			idataMovimento	= 1;
			idocumento      = -1;
			icomplemento02	= 1;
			inomeOrigem		= 1;
			ivalorDocumento	= memFile.getFieldsSize() - 1;
			nomePortador = nomePortador.replaceAll("\\?","");
			complemento01 = nomePortador.replaceAll("\\?","");
			boolean fieldAux = false;


			//Continue para nao cair nas validacoes abaixo
			if(line.contains("SALDO DO DIA")) continue;

            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("ABOUT") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("BLANK")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("IBPJ")) continue;
			//if(line.contains("H - LIMITE CHEQUE EMPRESAS")) continue;

			if(memFile.getStringField(2).contains("R$")) fieldAux = true;

			else{fieldAux = false;}

            //2401-027236 - Para quando aparece valor sozinho em 2 linhas em seguida - Feito pq o valor de "A - SALDO DE CONTA CORRENTE" era
            //jogado para cima que criava um lancamento com esse valor e o resto das informacoes do lancamento anterior
            if((!memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && !memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) || memFile.getFieldsSize() > 2) eValor = false;
            if(((memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && memFile.getFieldsSize() == 1) || (memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) && memFile.getFieldsSize() == 2) && eValor) continue;
            if(((memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && memFile.getFieldsSize() == 1) || (memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) && memFile.getFieldsSize() == 2)) eValor = true;

			//Condicao para nao ler final do arquivo
			if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("A - SALDO DE CONTA CORRENTE")) naoLeMais = true;

			if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("VALORES DEDUZIDOS DO SALDO DISPONIVEL")) naoLeMais = true;

			if(naoLeMais == true) continue;

			String nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);

			//Captura de nomeOrigem que quebrou sem o valor
			if(memFile.getFieldsSize() == 2 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("?") && !line.contains(" DE 20")){
				nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1);
			}

			//Captura de nomeOrigem que quebrou junto com o valor
			if(memFile.getFieldsSize() == 2 && memFile.getStringField(1).contains("R$")){
				nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);
			}

			//Captura de nomeOrigem que vem com valor normalmente
			if(memFile.getFieldsSize() == 3){
				nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1);
			}

			if(((memFile.getFieldsSize() == 1 && memFile.getStringField(0).contains("R$")) || memFile.getStringField(0).contains("SALDO DO DIA")) && !fieldAux && !primeiroAux){
				primeiroAux = true;
			}

			//2401-027236 - Para quando nao aparece ? na primeira coluna e o valor quebra para baixo
			if(memFile.getFieldsSize() < 3 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
				!memFile.getStringField(0).contains("R$") && !fieldAux && primeiroAux && !line.contains(" DE 20")){
				if(memFile.getFieldsSize() ==1) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
				if(memFile.getFieldsSize() ==2) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1).trim();
				primeiroAux = false;
                continue;
			}

			if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
				!memFile.getStringField(0).contains("R$") && !fieldAux && !primeiroAux){
				nomeOrigemAnterior += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				nomeOrigemAnterior = nomeOrigemAnterior.trim();
			}

			//Update para atualizar o nomeOrigem com a quebra
			if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
			   !memFile.getStringField(0).contains("R$") && fieldAux == true){
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(StringUtil.removeSpecialCharsToUC(nomeOrigemAnterior + " " + nomeOrigemAux))
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			}

			//Tratamento de data
			if((memFile.getStringFieldRemoveEspCharsUpper(0).contains("?") || memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
					//2401-027290 - Os "DE" foram mudados para "DE " pq estava pegando errado no mes dezembro

					if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("HOJE")){
						dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), ",", "DE ");
					}

					else{
						dia = memFile.getStringFieldRemoveEspCharsUpper(1).substring(0,2);
					}

					try {
						mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "DE ", memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("DE ")));

					}catch(Exception e) {
						mes = "";

						logger.logInfo("LOG CATCH MES");
					}

					try {
						ano	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1),"DE ", ",");

						ano = cutString(ano, "DE ", ano.length());

						//logger.logInfo("ano - " + ano);

					}catch(Exception e) {
						logger.logInfo("CATCH"+e);
					}

					if((dia + "/" + mes + "/" + ano).matches("\\b\\d{2}/\\d{2}/\\d{4}\\b")){
						dataAux = dia+"/"+mes+"/"+ano;
						continue;
					}
					//logger.logInfo("LOG DATA - " + dataAux);


			}

			dataMovimento = dataAux;

			try {
				if (dataMovimento.equals("")) continue;
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

				valorDocumento  = 0;
				debitoCreditoAux = "";
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
				if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

				try{
					if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("R$")){
						valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));
					 } else { valorDocumento = 0; }
				}
				catch (Exception vlrd) { valorDocumento = 0; }
				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				complemento01	= nomePortador;

				//Caso haja quebra do valor, mas sem quebra de nomeOrigem || nao tiver ? na primeira coluna e quebra valor e pode ou nao ter quebra no nomeOrigem
				if(memFile.getFieldsSize() == 1 && memFile.getStringField(0).contains("R$")){
					nomeOrigem = nomeOrigemAnterior;
				}

				//Caso haja quebra de valor, junto de quebra de nomeOrigem
				if(memFile.getFieldsSize() == 2 && memFile.getStringField(1).contains("R$")){
					nomeOrigem = nomeOrigemAnterior + " " + nomeOrigemAux;
				}

				complemento02	= nomeOrigem;
				complemento04	= nomeOrigem;

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();

				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem.replaceAll("[^a-z A-Z0-9]", ""))
						.param(nomeArquivo.toUpperCase())
						.param(complemento02.replaceAll("[^a-z A-Z0-9]", ""))
						.param(complemento02.replaceAll("[^a-z A-Z0-9]", ""))
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			} catch (Exception ex) {
			}

		}

		if(tipoLayout.equals("004")){
			// logger.logInfo("ENTROU TIPO 4");
			idataMovimento	= 3;
			idocumento      = -1;
			icomplemento02	= 1;
			inomeOrigem		= 0;
			ivalorDocumento	= 4;
			nomePortador = nomePortador.replaceAll("\\?","").replaceAll(";","");
			complemento01 = nomePortador.replaceAll("\\?","");
			String dataString = "";



			//Condicao para ler apenas o bloco de movimento
			if(tagLcto == false) naoLeMais = true;
			if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("01 - ADVISORY - USD")) {
				tagLcto = true;
			}
			if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("MOVIMENTO") && tagLcto) naoLeMais = false;
			if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("POR FAVOR LEIA ATENTAMENTE A SEGUINTE INFORMACAO")) naoLeMais = true;
			if(naoLeMais == true) continue;
			// logger.logInfo("LIN ->> " + line + " || nLemais -> " + naoLeMais + " ||tagLcto -> " + tagLcto);
			//DETALHAMENTO	 MOEDA	DATA VALOR	DATA LANCAMENTO	CREDITOS	RETIROS	SALDO


			if(line.contains("DETALHAMENTO") && line.contains("MOEDA") && line.contains("DATA VALOR") && line.contains("DATA LANCAMENTO")
				&& line.contains("CREDITOS") &&  line.contains("RETIROS") && line.contains("SALDO")){
					// logger.logInfo("ENTROU FOR");
					for(int i =0; i < memFile.getFieldsSize(); i++){
						if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOEDA")) icomplemento02 = i;
						if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DETALHAMENTO")) inomeOrigem = i;
						if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CREDITOS")) ivalorDocumento = i;
						if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA") &&
							memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) idataMovimento = i;
					}

					if(ivalorDocumento == -1 || idataMovimento == -1 || inomeOrigem == -1 || icomplemento02 == -1){
						idataMovimento	= 3;
						icomplemento02	= 1;
						inomeOrigem		= 0;
						ivalorDocumento	= 4;
					}
					continue;
				}

			// logger.logInfo("ivalorDocumento -> " + ivalorDocumento + " |idataMovimento -> " + idataMovimento + " |inomeOrigem -> " + inomeOrigem + " |icomplemento02 -> " + icomplemento02);

			try {

				try {
					dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
					dataString = cutString(dataString, 0, 2) + "/" + getMonth(cutString(dataString, 3, 6)) + "/20" + cutString(dataString, dataString.length()-2, dataString.length());
					// logger.logInfo("dataString -> " + dataString +  " cuts - " + cutString(dataString, 0, 2) + " | " + cutString(dataString, 3, 5) + " | " +  cutString(dataString, dataString.length()-2, dataString.length()));
					if (!dataString.equals("")) {
						String dataMovimentoAux	  = getCampoDate(dataString);
						if (dataMovimentoAux.contains("/")) {
							dataMovimento     = getCampoDate(dataString);
							dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
						}
					}
				} catch (Exception dt1) {}

				// logger.logInfo(" dataMov -> " + dataMovimento + "\n");
				if(dataMovimento.equals("")) continue;
				valorDocumento  = 0;
				debitoCreditoAux = "";
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
				if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }
				// logger.logInfo(" valorDocumento -> " + valorDocumento + "\n");
				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				complemento01	= nomePortador;
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);


				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();

				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			} catch (Exception ex) {
			}
		}

		if(tipoLayout.equals("005")){ //Padrao 6
            idataMovimento	= 0;
            idocumento      = 2;
            inomeOrigem		= 1;
            ivalorDocumento	= memFile.getFieldsSize() - 2;
            nomePortador = nomePortador.replaceAll("\\?","").replaceAll(";","");

            //if(line.contains("SALDO") && line.contains("CONTA") && line.contains("CORRENTE") ) naoLeMais = true;
            if(line.contains("EXTRATO") && line.contains("CONTA") && line.contains("CORRENTE") ) naoLeMais = true;

            if(naoLeMais) continue;

            try {

                //Pega o resto do nomeOrigem quando tem quebra de linha, fiz tratamento para nao pegar o numero da pagina. Ex: 1/6
                if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("ANTERIOR")) {
                    if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("/")){
                        restoAux = memFile.getStringFieldRemoveEspCharsUpper(0);
                        continue;
                    } else {
                        nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                        try {
                            dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                            .param(chaveExtrato)
                            .execute();
                        } catch (Exception sqlUpdateException) {
                        }
                        continue;
                    }
                }

                //Para quando o resto do nomeOrigem possui /
                if(!line.contains("DATA") && !line.contains("SALDO") && !line.contains("DESCRI") && !restoAux.equals("")){
                    nomeOrigem += " " + restoAux;
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                    }
                }

                restoAux = "";

                if (memFile.getFieldsSize() < 4 ) continue;

                try {
                    dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                    dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                } catch (Exception dt1) {
                    dataMovimento = "";
                }

                if(dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                debitoCredito = "";

                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }

                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";

                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(documento)
                        .param(nomePortador)
                        .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                        .param(nomeArquivo.toUpperCase())
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }

	}
    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");
    complemento01 = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	
	boolean naoLeMais = false;

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		// logger.logInfo("LINHAAAAAA " + line);
		if (line.startsWith("SICREDI FONE")) continue;
		if (line.startsWith("0800")) continue;
		if (line.startsWith("SAC")) continue;
		if (line.startsWith("OUVIDORIA")) continue;
		if (line.startsWith("VENCIMENTO DO CHEQUE")) {
			naoLeMais = true;
			continue;
		}
		if (naoLeMais) continue;
        if (memFile.getFieldsSize() == 2) continue;
		//if (memFile.getFieldsSize() == 1) {
		
        if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO")) { //2310-019873
			// logger.logInfo("MFSC " + memFile.getStringFieldRemoveEspCharsUpper(0));
			nomeOrigem += " " + StringUtil.removeSpecialCharsToUC(memFile.getStringFieldRemoveEspCharsUpper(0)).replace("\u0000", "E");
			
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
                documento = "";
                // logger.logInfo("BTL -> 5737|  -> " + line  + "|  -> " + memFile.getFieldsSize()  );
                if (memFile.getFieldsSize() == 4) {
                    nomeOrigem      = "";
                    nomeOrigem		= StringUtil.removeSpecialCharsToUC(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replace("\u0000", "E").replaceAll("\"","").replaceAll("\\?","")).trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento - 1);}
                    catch (Exception vlrd) { valorDocumento = 0; }
                } else {
                    nomeOrigem      = "";
                    nomeOrigem		= StringUtil.removeSpecialCharsToUC(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replace("\u0000", "E").replaceAll("\"","").replaceAll("\\?","")).trim();
                    
                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                }
				// logger.logInfo("SIVALOR " + valorDocumento + " | " + dataMovimento);
				
                if (valorDocumento == 0) continue;
                if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                valorDocumento = Math.abs(valorDocumento);

                complemento02 = documento;

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

            // Inserir caso Chave nao encontrada.
            

                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}


public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	//logger.logInfo("PADRAO CAIXA PDF123");


    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao  = "";

	String valorDocAux = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

	boolean tipoUmSemSaldo = false;
	String linhaRun = "";

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINHA"))   linhaRun   = jDados.optString("LINHA");

	if(tipoPadrao.equals("001") && linhaRun.contains("DATA") && !linhaRun.contains("SALDO")) tipoUmSemSaldo = true;

	//logger.logInfo("Tipo: "+tipoPadrao);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.contains("SALDO") && line.contains("DIA")) continue;
		if (line.contains("SAC") && line.contains("CAIXA")) continue;
		if (line.contains("PESSOAS") && line.contains("DEFICIENCIA")) continue;
		if (line.contains("OUVIDORIA") && line.contains("0800")) continue;
		if (line.contains("ALO CAIXA") && line.contains("0800")) continue;
		if (line.contains("HELP") && line.contains("DESK")) continue;
		if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("INTERNETBANKING") && line.contains("IMPRIME")) continue;
		if (line.contains("CAIXA.GOV.BR")) continue;


		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + cutString(line,line.lastIndexOf("|"),line.length()).replaceAll(";", " ");
		}
		//Douglas. Feito para o Chamado #2304-003957 para leitura das colunas 1 2 e 3
		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " / " + memFile.getStringFieldRemoveEspCharsUpper(2) + " / " + memFile.getStringFieldRemoveEspCharsUpper(3);
		}
		
		if(tipoPadrao.equals("010")){
			String linhaLimpa = line.replaceAll("  ", " ");
			if(linhaLimpa.contains("  ")){
				boolean limpouu = true;
				while(limpouu){
					if(linhaLimpa.contains("  ")){
						linhaLimpa = linhaLimpa.replaceAll("  ", " ");
					}else{
						limpouu = false;
					}
				}
			}
			String[] linhaArray = linhaLimpa.split(" ");

			dataMovimento = getCampoDate(linhaArray[0]);

			documento = linhaArray[1];

			nomeOrigem = "";
			for(int i = 2; i < (linhaArray.length-4); i++){
				nomeOrigem += " " + linhaArray[i];
			}
			try{
				valorDocumento = Double.parseDouble(linhaArray[linhaArray.length-4].replaceAll("\\.", "").replaceAll(",", ""))/100;
			}catch(Exception e){
				valorDocumento = 0;
			}
			debitoCreditoAux = linhaArray[linhaArray.length-3];
		}

		// logger.logInfo("DENTRO DO EXTRAto tipoPadrao -> " + tipoPadrao);
		//logger.logInfo("linelength " + line.length());
		if(tipoPadrao.contains("002")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				// logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}
		}
		if(tipoPadrao.contains("001")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				 logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					// if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i+1;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i; //Correção do chamado BUG CAIXA -> 2401-027811
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}

			if(line.startsWith("SALDO")) continue;
		}
		if(tipoPadrao.contains("003")){
			if (line.contains("MOVIMENTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO")) {
				idataMovimento	= -1;
				idocumento      = -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOVIMENTO"))      idataMovimento = i;
					ivalorDocumento = 4;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento + " | LIN == "+line);
				continue;
			}
			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}
		if(tipoPadrao.contains("004")){
			idataMovimento = 0;

			if (memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("C") || memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("D")) {
				inomeOrigem = 2;
				idocumento = 2;
				ivalorDocumento = 5;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(3);
			}
			else {
				inomeOrigem = 1;
				idocumento = 1;
				ivalorDocumento = 4;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}

        if (memFile.getFieldsSize() == 1 && !tipoPadrao.equals("010")) {
			if(tipoPadrao.equals("001") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().startsWith("EXTRATO")) {
				continue;
			} else {
				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			}
        } else {
				// logger.logInfo("DTS " + dataString);
            try {
				
				if(!tipoPadrao.equals("010")){

					String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");


					if (dataString.equals("000000")) continue;
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt1) {
						try {
							Date dt = memFile.getDateField(idataMovimento);
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) {
							try {
								dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
								Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
								dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							} catch (Exception dt2) { continue; }
						}
					}



					if (dataMovimento.equals("")) continue;

					valorDocumento  = 0;
					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
					try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
					catch (Exception vlrd) { valorDocumento = 0; }

					//2401-026791
					if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo) valorDocumento = 1;

					if (valorDocumento == 0) continue;


					nomeOrigem      = "";
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
					if (nomeOrigem.contains("SALDO C/C")) continue;
					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;
				
				}

				//2401-026791
				if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo){
					if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("C")){
						ivalorDocumento = memFile.getFieldsSize()-2;
					} else {
						ivalorDocumento = memFile.getFieldsSize()-1;
					}
					valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
					valorDocumento  = 0;
					try{valorDocumento = Double.parseDouble(valorDocAux);}
					catch (Exception vlrd) { valorDocumento = 0; }

					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);

					documento = memFile.getStringFieldRemoveEspCharsUpper(1);

					for(int i = 2; i < ivalorDocumento; i++){
						if(i == 2) nomeOrigem = "";
						nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(i);
					}
				}


				if(tipoPadrao.equals("003")){
					if( memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")){ 
						debitoCredito = "EXTRATO-DEBITO";
					}else{ 
						debitoCredito = "EXTRATO-CREDITO";
					}
				}
				else if (tipoPadrao.equals("004")) {
					if (complemento03.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if (complemento03.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				}
				else{
                if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
				}
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );



                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

				// Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(documento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoCefPDF4(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
	if (nomeArquivo.toUpperCase().contains("CSV")) {
		memFile.setFieldSeparator(";");
	}

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

	//logger.logInfo("LOG IDATAMOVIMENTO - " + idataMovimento);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("AGENCIA:")) {
            nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
        }
		if (line.startsWith("FILE:")) {naoLeMais = true;}
        if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("EXTRATO POR PERIODO")) {naoLeMais = true;}
        if (line.startsWith("DATA DE")) {
            naoLeMais = false;
            continue;
        }
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("SALDO DIA")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("BLOQ.SALDO")) {continue;}
        if (naoLeMais) continue;
        try {
            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            //Tenta capturar o valor caso o memFile.getDoubleField tenha falhado
            if (valorDocumento == 0 && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches("[\\d\\.\\)\\-,\\s\\(]*")) {
                try {
                    valorDocumento = capturaValor(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                } catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
            }
            if (valorDocumento == 0) continue;
            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			documento       = "";
			documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}

//2312-024906
public boolean readExtratoCefPDF6(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

	int colunaVerificado = 0;
    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	//if (nomeArquivo.toUpperCase().contains("CSV")) {
	//	memFile.setFieldSeparator(";");
	//}

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		logger.logInfo("Linha: "+line);

		colunaVerificado = 0;

        if (naoLeMais) continue;
        try {

			for(int i = 0; i < 2; i++){

				idataMovimento = -1;
				idocumento = -1;
				inomeOrigem = -1;
				ivalorDocumento = -1;

				//Tratamento para pegar as colunas de cada lancamento a partir da coluna com a data
				for(int col = colunaVerificado; col < memFile.getFieldsSize(); col++){
					if(memFile.getStringFieldRemoveEspCharsUpper(col).trim().length() == 10 && !memFile.getStringFieldRemoveEspCharsUpper(col).contains(",") &&
					memFile.getStringFieldRemoveEspCharsUpper(col).contains("/")){
						idataMovimento = col;
						idocumento = col + 1;
						inomeOrigem = col + 2;
						ivalorDocumento = col + 3;

						colunaVerificado = col + 4;
						break;
					}
				}

				if(idataMovimento == -1 && ivalorDocumento == -1) continue;

				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}

				logger.logInfo("Data: "+dataMovimento);

				if(dataMovimento.equals("")) continue;

				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

				if (debitoCreditoAux.contains("D")) {
					debitoCredito = "EXTRATO-DEBITO";
				} else if(debitoCreditoAux.contains("C")) {
					debitoCredito = "EXTRATO-CREDITO";
				}

				valorDocumento  = 0;

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }

				logger.logInfo("Valor: "+valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();

				documento       = "";
				documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();
				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			}
        } catch (Exception ex) {
        }
    }
    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    // logger.logInfo("Entrou ITAU PDF INTERNO");

	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";
	
	String tipo 			 = "001";
	
	boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
	String linha = "";

    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
	if(jDados.has("LINHA")) 	   linha 		= jDados.optString("LINHA");
	if(jDados.has("TIPO"))		   tipo 		= jDados.optString("TIPO");

	
	if (!linha.equals("")) {
		if (linha.contains("LANCAMENTOS") && linha.contains("PERIODO:") && linha.contains("ATE") && tipo.equals("003")) {
			if (linha.contains(";")) {
				String [] arrayAnoData = linha.split(";");
				anoData = cutString(arrayAnoData[1], arrayAnoData[1].lastIndexOf("/")+1);
			}
		}
	}
	
    

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		if(line.startsWith("ABOUT:BLANK") || line.contains("PRE-VISUALIZACAO DE IMPRESSAO")) continue;
		
		// logger.logInfo("LINHA NO COMECO " + memFile.getFieldsSize() + " | " +  tipo + " | " + line);
		logger.logInfo("TPItAU " + tipo);
		if(tipo.equals("003") || tipo.equals("002") || tipo.equals("001")) ivalorDocumento	= 3;
		
		
		if (tipo.equals("002") && line.contains("LIS") && line.contains("CONTRATADO") && line.contains("UTILIZADO") && line.contains("DISPONIVEL")/* || (tipo.equals("002") && line.contains("SALDO DISPONIVEL EM CONTA") && memFile.getFieldsSize() == 1)*/) tipo = "003";
		
		if (line.toUpperCase().contains("EXTRATO DE")) {
            anoData = cutString(cutString(line, "DE ", " ATE"), cutString(line, "DE ", " ATE").lastIndexOf("/") + 1);
            continue;
        } 
		else if (line.contains("EXTRATO - POR PERIODO")) { //2307-009209
			anoData = cutString(line, line.lastIndexOf("/")+1);
			continue;
		}
		if(tipo.equals("999") && memFile.getFieldsSize() == 1 && line.contains("/202")){
            anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf("/")).replaceAll("[^0-9]", "");
        }
        
		nomePortador = cutString(nomePortador, ":", "");
        if (line.contains("DATA") && line.contains("HORA")) continue;
		if (line.toUpperCase().contains("CONTA CORRENTE") && line.toUpperCase().contains("EXTRATOS")) continue;
		if (line.startsWith("CONSULTAR")) continue;
		if (line.toUpperCase().contains("OPCAO DE PESQUISA:")) continue;
		if (line.toUpperCase().contains("PERIODOS:")) continue;
		if (line.toUpperCase().contains("BLOQUEIO DIA")) continue;
		if (line.toUpperCase().contains("B = BLOQUEADO")) continue;
		if (line.toUpperCase().contains("LANCAMENTO PROVISIONADO")) continue;
		if (line.toUpperCase().contains("POSICAO EM")) continue;
		// if (line.toUpperCase().contains("SALDO DISPONIVEL EM CONTA") && (tipo.equals("002") || tipo.equals("003"))) continue; // Douglas #2308-013416 Adicionado esse continue
		
		// logger.logInfo("AD " + anoData+" Tipo - "+tipo+" LIN "+line);
		
		if (line.contains("PERIODO:") && line.contains("ATE") && tipo.equals("002")) {
			anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf("/")+1);
		}
		
		if (line.contains("PERIODO:") && line.contains("ATE") && tipo.equals("003")) {
			// logger.logInfo("LIN " + line);
			anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(1), memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("/")+1);
		}
		
        logger.logInfo("LOG TIPO EXTRATO - " + tipo);
		// Douglas Feito para o chamado #2307-008733
		if (tipo.equals("003")) {
            if(line.toUpperCase().contains("POSICAO CONSOLIDADA")) naoLeMais = true; 
			if (line.toUpperCase().contains("(-) SALDO A LIBERAR")) continue;
			if (line.toUpperCase().contains("SALDO APLIC AUT MAIS")) continue;
			if (line.toUpperCase().contains("SALDO PARCIAL")) continue;
			if (line.toUpperCase().contains("SALDO DO DIA")) continue;
			if (line.toUpperCase().contains("SALDO FINAL")) continue;
			if (line.toUpperCase().contains("SALDO FINAL DISPONIVEL")) continue;
			if (line.toUpperCase().contains("SALDO INICIAL")) continue;
			if (line.toUpperCase().contains("SALDO FINAL DEVEDOR")) continue;
			if (line.toUpperCase().contains("SALDO DISPONIVEL SEM INVESTIMENTOS AUTOMATICOS")) continue;
			if (line.toUpperCase().contains("SALDO EM APLICACCO AUTOMATICA - APLIC AUT MAIS")) continue;
			if (line.toUpperCase().contains("SALDO TOTAL DISPONIVEL")) continue;
			if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("DISPONIVEL") && line.toUpperCase().contains("SEM") && line.toUpperCase().contains("INVESTIMENTOS") && tipo.equals("005")) naoLeMais = true;
			if (line.toUpperCase().contains("VALOR TOTAL EM") && line.toUpperCase().contains("AUTOMATICAS")) continue;
			if (line.toUpperCase().contains("RENDIMENTOS") && line.toUpperCase().contains("AUTOMATICAS")) continue;
			if (line.toUpperCase().startsWith("LIS")) continue;
			if (line.toUpperCase().contains("TOTAL DISPONIVEL PARA USO")) continue;
		}

        //2308-013945
		if (tipo.equals("005")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO INICIAL")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO PARCIAL")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO ANTERIOR")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO APLIC AUT MAIS")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO FINAL")) continue;
		}
		
		if (line.toUpperCase().contains("DESBLOQUEIO") && line.toUpperCase().contains("DIA")) continue;
		if (line.toUpperCase().replaceAll(" ", "").trim().contains("SALDO") && tipo.equals("001")) continue;  
		if (memFile.getFieldsSize() < 3 && tipo.equals("001")) continue;		
		if (line.toUpperCase().replaceAll(" ", "").trim().contains("SDOCTA")) continue;    
		
		if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("ANTERIOR") && (tipo.equals("002") || tipo.equals("003"))) continue;
		
		
		if (line.length() < 8 && tipo.equals("002")) continue;
		if (line.toUpperCase().contains("PRE") && line.toUpperCase().contains("VISUALIZACAO") && line.toUpperCase().contains("IMPRESSAO") && tipo.equals("002")) continue;
		
		if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("RESUMIDO") && tipo.equals("002")) naoLeMais = true;
		
		if (line.toUpperCase().contains("DATA") && line.toUpperCase().contains("LANCAMENTOS") && line.toUpperCase().contains("VALOR") && line.toUpperCase().contains("SALDO") && (tipo.equals("002") || tipo.equals("003"))) {
			naoLeMais = false;
			continue;
		}
		if (line.toUpperCase().contains("POSICAO") && line.toUpperCase().contains("CONTA") && line.toUpperCase().contains("CORRENTE") && tipo.equals("002")) naoLeMais = true;
		
		if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("CONTA") && line.toUpperCase().contains("CORRENTE") && tipo.equals("003")) naoLeMais = true;
		
		if (line.toUpperCase().contains("ATUALIZADO EM") && (tipo.equals("002") || tipo.equals("003"))) continue; // Douglas #2308-013416 Adicionado esse continue
		if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && (tipo.equals("002") || tipo.equals("003"))) continue; // Douglas #2308-013416 Adicionado esse continue
		
		if (line.length() < 3) continue;
		
		if (naoLeMais) continue;
        
        try {
            String dataPattern = ""; 
            String dataCandidate = memFile.getStringFieldRemoveEspCharsUpper(0);
			
			dataCandidate.replaceAll(" ", "");
			
			// logger.logInfo("DC " + dataCandidate);
			
            if (tipo.equals("002") || tipo.equals("003")) {
				if (tipo.equals("002") && line.contains("PERIODO") && line.contains("LANCAMENTOS")) { //202301-0024245
					anoData = cutString(line, line.lastIndexOf("/")+1);
					// logger.logInfo("ANO DATA1 " + anoData + " | " + line);
					continue;
				}
				if (!dataCandidate.contains("/") && tipo.equals("002")) {
					anoData = cutString(dataCandidate, " ");
					// logger.logInfo("ANO DATA " + anoData + " | " + line);
					continue;
				}
				dataCandidate = cutString(dataCandidate, 0, "/").replaceAll(" / ", "/") + "/" + getMonth(cutString(dataCandidate, "/")) + "/" + anoData;
				// logger.logInfo("DATA CANDIDATE " + dataCandidate);
			}
			

            if (dataCandidate.matches("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                dataPattern = "yyyy-MM-dd hh:mm:ss";
            } else {
                if (dataCandidate.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}")) {
                    dataPattern = "yyyy-MM-dd";
                } else {
                    dataPattern = "dd/MM/yyyy";
                }
            }
            
            if (!dataCandidate.equals("")) {
                if (dataCandidate.replaceAll("[0-9]", "").trim().equals("/") || dataCandidate.matches("[0-9]{2}/[0-9]{2}")) {
                    try{
                        dataMovimento     = (dataCandidate + "/" + anoData);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    }catch(Exception e){
                        dataMovimento   = "";
                        dataLote        = "";
                    }
                } else {
                    String dataMovimentoAux	  = getCampoDate(dataCandidate, dataPattern, "dd/MM/yyyy");
                    if (dataMovimentoAux.contains("/")) {
                        try {
                            dataMovimento     = dataMovimentoAux;
                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        } catch (Exception ex) {
                            dataMovimento = "";
                            dataLote = "";
                        }
                    }
                }
                if (!dataMovimento.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}")) dataMovimento = "";
            } 
			//#2306-006237
            if (tipo.equals("004") || tipo.equals("999") || tipo.equals("006")) {

                if(line.replaceAll(" ", "").contains("SALDO")){ //2307-009209
            	    continue;
            	}
				
				if(line.contains("LANCAMENTOS FUTUROS")){ //2310-018861
					naoLeMais = true;
				}

                if (!anoData.equals("")) {
                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(0) + "/" + anoData;
                    dataMovimento = dataMovimento.replaceAll(";", ""); //2307-009209
                    if (!dataMovimento.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}")) {
                        dataMovimento = "";
                    }
                }
                else {
                    String colunaAno = memFile.getStringFieldRemoveEspCharsUpper(0);
                    String dataPat = "[0-9]{2}/[0-9]{2}/[0-9]{4}";
                    java.util.regex.Pattern pat = java.util.regex.Pattern.compile(dataPat);
                    java.util.regex.Matcher mat = pat.matcher(colunaAno);
                    if (mat.find()) {
                        anoData = colunaAno.substring(mat.start(), mat.end());
                        anoData = anoData.split("/")[2];
                    }
                }
            }
			
			if (dataMovimento.equals("")) continue;

            String nomeOrigemCandidate = memFile.getStringFieldRemoveEspCharsUpper(1);
            if (nomeOrigemCandidate.equals("D") || nomeOrigemCandidate.length() < 2) {
                // logger.logInfo("BTL -> 5392| LEU LETRA -> ==== " + nomeOrigemCandidate );
                nomeOrigemCandidate = memFile.getStringFieldRemoveEspCharsUpper(2);
                // logger.logInfo("BTL -> 5392| LEU LETRA -> NOMEORIGEM + 1 ==== " + nomeOrigemCandidate );
            }
            
            nomeOrigem = nomeOrigemCandidate;

            debitoCredito = "";
            debitoCreditoAux = "";
			
			logger.logInfo("MFFS -1 ->> " +  memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1) + " MFFS -2 ->> " + memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2));
			// logger.logInfo("MFFS -2 ->> " + (memFile.getFieldsSize()-2));
			
			
			//#2306-006237
            //if (tipo.equals("004") && tipo.equals("005")) {
			if (tipo.equals("004") || tipo.equals("005") || tipo.equals("999")) { //2307-009209
                String colunaValor = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
                if (colunaValor.contains("-")) debitoCredito = "EXTRATO-DEBITO";
                else debitoCredito = "EXTRATO-CREDITO";
                String charsPermitidosNoValorRegex = "[0-9,-\\.\\s]*";
				if(tipo.equals("004") && memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("-")){ //2310-018861
					colunaValor = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2);
					if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("-")) debitoCredito = "EXTRATO-DEBITO";
					else debitoCredito = "EXTRATO-CREDITO";
				}
                if (colunaValor.matches(charsPermitidosNoValorRegex)) {
                    // logger.logInfo("Entrou valor matches");
                    colunaValor = trataValor(colunaValor);
                    valorDocumento = DecimalUtil.toDecimal(colunaValor);
                    // logger.logInfo("Valor -> " + valorDocumento);
                    // logger.logInfo("debitoCredito -> " + debitoCredito);
                }
            }
			
			if(tipo.equals("999")|| tipo.equals("006")){
				if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("-") ){
					ivalorDocumento = memFile.getFieldsSize()-2;
					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim(); 
				}else{
					ivalorDocumento = memFile.getFieldsSize()-1;
				}

				try{
					valorDocumento = memFile.getDoubleField(ivalorDocumento);
					}
				catch (Exception vlrd){ valorDocumento = 0; }

				if(debitoCreditoAux.contains("-"))  debitoCredito = "EXTRATO-DEBITO";
				if(!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				valorDocumento = Math.abs(valorDocumento);
			}
			
			if(tipo.equals("003") || tipo.equals("002") || tipo.equals("001")){
				if(memFile.getFieldsSize()-1 < ivalorDocumento ) ivalorDocumento -= 1;
					
				 // gui - 2404-035591 - AJUSTE PARA VALOR DESLOCADO QUANDO H�? UMA LETRA NA COLUNA DO NOME ORIGEM;
                if(memFile.getStringFieldRemoveEspCharsUpper(1).trim().length() == 1){
                    ivalorDocumento += 1;
				}
                
				if(tipo.equals("001")){
					if (memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2).matches("-?\\d{1,3}(\\.\\d{3})*(,\\d{2})?") && 
						memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).matches("-?\\d{1,3}(\\.\\d{3})*(,\\d{2})?") ){
							ivalorDocumento = memFile.getFieldsSize()-2;
						}
				}				
				 
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim(); 
				
				try{
					valorDocumento = memFile.getDoubleField(ivalorDocumento);
					}
				catch (Exception vlrd){ valorDocumento = 0; }

				if(debitoCreditoAux.contains("-"))  debitoCredito = "EXTRATO-DEBITO";
				if(!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				valorDocumento = Math.abs(valorDocumento);
			}
			
			if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

			// Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
        
    }
    return true;
}

public boolean readExtratoItauPdf2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    // logger.logInfo("Entrou ITAU PDF INTERNO");

	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";
	
	String tipo 			 = "001";
	
	boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 2;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
	String linha = "";
	String anoAuxiliar = "";
	String diaAuxiliar = "";
	String mesAuxiliar = "";
	String tpItau = "";

    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
	if(jDados.has("LINHA")) 	   linha 		= jDados.optString("LINHA");
	if(jDados.has("TIPO"))		   tipo 		= jDados.optString("TIPO");
	if(jDados.has("TP-ITAU"))	   tpItau 		= jDados.optString("TP-ITAU");

	
	while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if(tpItau.equals("002")){
			idataMovimento	= 0;
			inomeOrigem		= 1;
			ivalorDocumento	= 2;
		}

		if(tpItau.equals("002") 
				&& (
				line.contains("AVISO:") &&
				line.contains("OS SALDOS ACIMA SAO BASEADOS NAS INFORMACOES"))
			) break; 
		
		if(line.contains("SALDO")) continue;
        
        try {
            
            if(tpItau.equals("")){
                try{
                    dataMovimento     = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                }catch(Exception e){
                    continue;
                }
            }
			
            if(line.contains("PERIODO:") && anoAuxiliar.equals("")){
                anoAuxiliar = cutString(line, "PERIODO: ", " ");
                anoAuxiliar = cutString(anoAuxiliar, anoAuxiliar.lastIndexOf("/"), "");
            }
			
            if( (tpItau.equals("002") && anoAuxiliar.equals("")) || (line.contains("DATA") && line.contains("LANCAMENTOS") && line.contains("SALDO")) ) continue;

            if(tpItau.equals("002") && !anoAuxiliar.equals("")){
                try{
                    diaAuxiliar = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, " ");
					mesAuxiliar = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), "/ ", ""));
					dataMovimento = diaAuxiliar+"/"+mesAuxiliar+"/"+anoAuxiliar;
                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                }catch(Exception e){
                    continue;
                }
            }

			if(tpItau.equals("002") 
				&& (
				line.contains("LANCAMENTOS PERIODO"))
			) continue; 
            
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            debitoCredito = "";
            try{valorDocumento = memFile.getDoubleField(memFile.getFieldsSize() - 1);}
            catch (Exception vlrd) { valorDocumento = 0; }
            if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
            if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
            valorDocumento = Math.abs(valorDocumento);

			if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

			// Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
        
        
    }
    return true;
}

public boolean readExtratoItauPdf3(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";

	boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("ANODATA"))   anoData   = jDados.optString("ANODATA");

	while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).startsWith("SALDO")) continue;

		if(memFile.getStringFieldRemoveEspCharsUpper(2).contains(",")){ //Para quando nao aparece documento
            idocumento = -1;
            ivalorDocumento	= 2;
        } else{ //Para quando aparece
            idocumento = 2;
            ivalorDocumento	= 3;
        }

        try {

            if(line.contains("/20") && !memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/20")){
                 anoData = cutString(line, line.indexOf("/20")+1, line.indexOf("/20")+5);
            }

            try{
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + "/" + anoData;
				dataMovimento = getCampoDate(dataString);
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
			} catch(Exception e){ dataMovimento = "";}

			if(dataMovimento.equals("")) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            try{
                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("-", "").trim();
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
            } catch (Exception vlrd) { valorDocumento = 0; }

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

            if(debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
            if(!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";

            documento = "";
            if(idocumento >= 0){
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            }

			if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

			// Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}

public String trataValor(String valor) {
    valor = valor.replaceAll("[-\\s]", "");
    valor = valor.replaceAll(",", "\\.");
    while (quantityOf(valor, ".") > 1) {
        valor = valor.replaceFirst("\\.", "");
    }
    return valor;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    
	int inomeOrigem		= 1;
	int idataMovimento	= 0;
	int idocumento      =-1;
	int inomePortador	=-1;
	int ivalorDocumento	= 3;	//(VALOR POSITIVO RC, NEGATIVO PG)
	int icomplemento01	=-1;	//#coluna D contem(Conta) 
	int icomplemento02	= 2;
	int icomplemento04	= 1;
	
    complemento01 = nomePortador;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        
		//if(memFile.getStringFieldRemoveEspCharsUpper(3).contains("CONTA:")) nomePortador = cutString(memFile.getStringFieldRemoveEspCharsUpper(3), "CONTA: ");
		
		try {
			if(memFile.getFieldsSize() <= 5){
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { continue; }
					}
				}

				valorDocumento	= 0;
				nomeOrigem		= "";
				complemento02	= "";
				complemento04	= "";
				
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").trim();
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","").trim();
				complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","").trim();
			   
				if(memFile.getStringFieldRemoveEspCharsUpper(4).equals("")){
					complemento02 = "";
					ivalorDocumento = 2;
				}else{
					ivalorDocumento = 3;
				}
			   
				if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
					try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
					catch (Exception vlrd) { valorDocumento = 0; }
				}
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
					try{valorDocumento = memFile.getDoubleField(ivalorDocumento+1);}
					catch (Exception vlrd) { valorDocumento = 0; }
				}

				if (valorDocumento == 0) continue;
				
				if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0) {
					debitoCredito = "EXTRATO-DEBITO";
					valorDocumento = Math.abs(valorDocumento);
				}
			}
			if(memFile.getFieldsSize() > 5){
				
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { continue; }
					}
				}
				
				valorDocumento	= 0;
				nomeOrigem		= "";
				complemento02	= "";
				complemento04	= "";
				
				for(int i = 1; i < memFile.getFieldsSize()-3; i++){
					nomeOrigem	+= " " + memFile.getStringFieldRemoveEspCharsUpper(i).replaceAll("\"","").trim();
				}
				
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-3).replaceAll("\"","").trim();
				complemento04	= nomeOrigem.replaceAll("\"","").trim();
				  
				  
				if(!memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2).equals("")){
					try{valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-2);}
					catch (Exception vlrd) { valorDocumento = 0; }
				}
				
				if (valorDocumento == 0) continue;
				
				if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0) {
					debitoCredito = "EXTRATO-DEBITO";
					valorDocumento = Math.abs(valorDocumento);
				}
				
			}

			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

            // Inserir caso Chave nao encontrada.
            

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) { }
    }
    return true;
}



public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("InterInterInter");
	
	JSONObject extratoEmpresa = new JSONObject();
 
    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
	String tipoLayoutExcel        = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
 	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = "EXTRATO INTER - "+nomePortador;
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(jDados.has("TIPOLAYOUTEXCEL"))   tipoLayoutExcel   = jDados.optString("TIPOLAYOUTEXCEL");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		if (line.startsWith("SALDO")) continue;
		if (line.startsWith("PAGINA")) continue;
		if (line.startsWith("CANAIS DE ATENDIMENTO")) break;
 		 
		// logger.logInfo("Line Inter Inter -> "+line);		
		logger.logInfo("1 LOG LAYOUT - " + tipoLayoutExcel);
		 
		idataMovimento	= 0;
		idocumento      = 1;
		inomePortador	=-1;
		inomeOrigem		= 1;
		ivalorDocumento	= 2;
		//#2312-024636 By Leal
		if(tipoLayoutExcel.equals("002")){
			ivalorDocumento = 3;
		}

		try {
			// #Fabrica(2019-05-20)
			try{
				dataMovimento     = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
				dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
			}catch(Exception e){
				// dataMovimento   = "";
				// dataLote        = "";
			}
			
			// logger.logInfo("DM "+idataMovimento+" -> "+dataMovimento+" MF DATA = "+memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
			
			if (dataMovimento.equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("R", "").replace("$", "").trim();
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

			// logger.logInfo("VD "+ivalorDocumento+" -> "+valorDocumento);
			if (valorDocumento == 0) continue;

			nomeOrigem      = "";
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			
			//#2312-024636 By Leal
			if(tipoLayoutExcel.contains("002")){
				nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem) + " - " + memFile.getStringFieldRemoveEspCharsUpper(2);
			}

 			documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
			complemento02   = documento;

			if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
			if ( debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
 
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

 		
			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
     }
    return true;
}


public boolean readExtratoInter2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("InterInterInter");
	// logger.logInfo("ENTROU NO READ 2 ");
	
	JSONObject extratoEmpresa = new JSONObject();
 
    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
	String dataAuxiliar      = "";
    String complemento02     = "";
    String debitoCredito     = "";
    String debitoCreditoAux  = "";
	String diaAuxiliar       = "";
	String mesAuxiliar       = "";
	String anoAuxiliar       = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String tipoExtrato 		 = "";
	String mesesString 		 = "JANEIRO,FEVEREIRO,MARCO,ABRIL,MAIO,JUNHO,JULHO,AGOSTO,SETEMBRO,OUTUBRO,NOVEMBRO,DEZEMBRO";

    double valorDocumento    = 0.0;
 	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
	int icomplemento02  = 0;
	boolean pularcabecalho = false;
	
    nomePortador = "EXTRATO INTER - "+nomePortador.replaceAll("\\|", " ");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(jDados.has("TIPO"))  	   tipoExtrato	= jDados.optString("TIPO");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|")){
		memFile.setFieldSeparator(";");	
	}
		

	List arquivoCompleto = memFile.getLines();
    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("2 TIPO == "+tipoExtrato);
		
		if (line.startsWith("SALDO")) continue;
		if (line.startsWith("PAGINA")) continue;
		if (line.startsWith("CANAIS DE ATENDIMENTO")) break;
		
 		 
		// logger.logInfo("Line Inter Inter -> "+line);
		 
		idataMovimento	= 0;
		idocumento      =-1;
		inomePortador	=-1;
		inomeOrigem		= 1;
		ivalorDocumento	= memFile.getFieldsSize() - 1;
		
		//2308-014054
		if (tipoExtrato.equals("003")) {
			ivalorDocumento = 1;
			inomeOrigem		= 0;
		}

		if( !tipoExtrato.equals("003") && line.contains("FALE") && line.contains("COM") && line.contains("GENTE")) pularcabecalho = true;

		String mesDoLancamento = memFile.getStringFieldRemoveEspCharsUpper(2).trim();
		if(!Arrays.asList(mesesString.split(",")).contains(mesDoLancamento)){
			try{
				mesDoLancamento = line.split(" ")[2];
			}catch(Exception e){
				mesDoLancamento = "";
			}
		}

		if( !tipoExtrato.equals("003") && (Arrays.asList(mesesString.split(",")).contains(mesDoLancamento) && 
			!mesDoLancamento.trim().equals("")) ){ 
			pularcabecalho = false;
		}

		if( !tipoExtrato.equals("003") && pularcabecalho) continue;

		if( !tipoExtrato.equals("003") &&
			!Arrays.asList(mesesString.split(",")).contains(mesDoLancamento)  &&
			memFile.getFieldsSize() < 3 ){
			try {
				dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0) + " " + memFile.getStringFieldRemoveEspCharsUpper(1))
					.param(chaveExtrato)
					.execute();
			} catch (Exception sqlUpdateException) {
			}
			continue;
		}
		
		nomeOrigem = "";
		for(int i = 0; i < ivalorDocumento; i++){
			nomeOrigem += " "+memFile.getStringFieldRemoveEspCharsUpper(i);
		}
		nomeOrigem = nomeOrigem.trim();
		//if(line.contains("DE") && line.matches("^[0-9].*")){
				//String colunaData = line.replaceAll("|", " ");
			//}
			
			//logger.logInfo("DataC: "+colunaData);
		if(tipoExtrato.contains("003") && line.contains("OUVIDORIA: 0800 940 7772")) continue;
        
		try {
			//String colunaData = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
			
			try {
				String colunaData = "";
				//if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento+1).equals("")){
				if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento+1).equals("") || memFile.getStringFieldRemoveEspCharsUpper(idataMovimento+2).equals("") || tipoExtrato.equals("003"))
					colunaData = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento+1).contains("DE") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento+3).contains("DE"))
					colunaData = line.replaceAll("\\|", " ");

				//esta na linha da data quando a coluna da data comeca com um numero e contem 'DE'
				if (colunaData.matches("^[0-9].*") && colunaData.contains(" DE ")){
					diaAuxiliar  = cutString(colunaData, 0, 2);
					if (Integer.parseInt(diaAuxiliar) < 10)
						diaAuxiliar = "0"+diaAuxiliar;
					mesAuxiliar  = getMonth(cutString(colunaData,colunaData.indexOf(" DE ") + 4, colunaData.lastIndexOf(" DE ")));
					anoAuxiliar  = cutString(colunaData, colunaData.lastIndexOf(" DE ") + 4);
					dataAuxiliar = diaAuxiliar+"/"+mesAuxiliar+"/"+anoAuxiliar;
					if (dataAuxiliar.contains("SALDO"))
						dataAuxiliar = cutString(dataAuxiliar, 0, "SALDO");
					
					// logger.logInfo("DT == "+dataAuxiliar);//#2402-029889
					dataAuxiliar = cutString(dataAuxiliar, 0, dataAuxiliar.indexOf("/202")+5);
					continue;
				}
				if(dataAuxiliar.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}"))
					dataMovimento = dataAuxiliar;	
			} catch (Exception dt1) {}
			
			// logger.logInfo("DM "+idataMovimento+" -> "+dataMovimento+" MF DATA = "+memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
			
			// logger.logInfo("DataMovimento: "+dataMovimento); //
			
			if (dataMovimento.equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("R", "").replace("$", "").trim();
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			if(valorDocumento == 0 && line.contains("R$")){
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-3).replace("R", "").replace("$", "").trim();
				if(!memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-3).contains("R$")){
					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-4).replace("R", "").replace("$", "").trim();
				}
				try{valorDocumento = Math.abs(memFile.getDoubleField(memFile.getFieldsSize()-3));}
				catch (Exception vlrd) { valorDocumento = 0; }
			}
			
			//logger.logInfo("ValorDocumento: "+valorDocumento); //

			// logger.logInfo("VD "+ivalorDocumento+" -> "+valorDocumento);
			if (valorDocumento == 0) continue;


			/*nomeOrigem      = "";
			if(ivalorDocumento == 2){
				nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\\:","").replaceAll("\"","").replaceAll("\\?","").trim() + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\\:","").replaceAll("\"","").replaceAll("\\?","").trim();
				//documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
				//#2304-002879 - Alterado o conteúdo da variável complemento02
				//complemento02   = documento;
				complemento02  = memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","").trim();
			} else {
				nomeOrigem = StringUtil.removeSpecialCharsToUC(cutString(line, 0, "R$").replaceAll("\\|", " "));
				complemento02  = memFile.getStringFieldRemoveEspCharsUpper(0) +" "+ memFile.getStringFieldRemoveEspCharsUpper(1);
				complemento02 = complemento02.replaceAll("\\|", " ");
			}
			
			//#2306-006062. Leitura após a principal do nome origem
			int indiceLinha = memFile.getCurrentIndex() + 1;
			boolean ignoraLinha = false;
			while (indiceLinha < arquivoCompleto.size()) {
				String proximaLinha = (String) arquivoCompleto.get(indiceLinha);
				proximaLinha = proximaLinha.toUpperCase();

				indiceLinha++;

				if (proximaLinha.contains("SALDO DO DIA")) {break;}
				//Ignora cabecalho para capturar o nomeOrigem apos a principal
				if (proximaLinha.contains("FALE COM A GENTE")) {ignoraLinha = true;}
				if (proximaLinha.contains("SOLICITADO EM")) {ignoraLinha = true;}
				if (proximaLinha.contains("DE 202")) {continue;}
				if (proximaLinha.contains("TIPO")) {
					ignoraLinha = false;
					continue;
				}
				
				if (ignoraLinha && proximaLinha.contains("PERIODO")) {
					ignoraLinha = false;
					continue;
				}

				if (ignoraLinha) {continue;}

				//Verifica se a proxima linha contem apenas uma coluna (separadores validos -> ; e |)
				boolean capturaNomeOrigemApos = !proximaLinha.matches(".*(;[^;]).*") && !proximaLinha.matches(".*(\\|[^\\|]).*");
				if (capturaNomeOrigemApos || !(proximaLinha.contains(";") || proximaLinha.contains("|"))) {
					nomeOrigem += " " + StringUtil.removeSpecialCharsToUC(cutString(proximaLinha, 0, ";"));
				} else if(!proximaLinha.contains("R$")){
					nomeOrigem += " " + StringUtil.removeSpecialCharsToUC(proximaLinha.replaceAll("\\|", " "));
				}
				else {break;}
			}*/
			
			if((line.replaceAll("\\|", " ").contains("FALE COM A GENTE") || line.startsWith("SAC:") || line.contains("PERIODO") || line.contains("TIPO") 
				|| line.replaceAll("\\|", " ").contains("SOLICITADO EM") || (line.contains("DE") && line.contains("CIENCIA"))) && memFile.getFieldsSize() < 3){
				continue;
			}
			
			// logger.logInfo("NomeOrigem: "+nomeOrigem);
			
			
			if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
			if ( debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
 
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

			// logger.logInfo("DT - "+ dataMovimento +" | VD - "+ valorDocumento +" | NM - "+ nomeOrigem +" | DC - "+ debitoCredito);

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

 		
			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
     }
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read XPInvestimentos PDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;


    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= -1;
	int inomePortador	= -1;
	int inomeOrigem		= -1;
	int ivalorDocumento	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("Line XPInvestimentos pdf -> "+line);
		
		idataMovimento	= 0;
		inomeOrigem		= 2;
		ivalorDocumento	= 3;
		
		if(memFile.getFieldsSize() > 5) ivalorDocumento	= memFile.getFieldsSize() - 2; //2401-026595
        
		try {
            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
			if (dataString.equals("000000")) continue;
			try {
				Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
			} catch (Exception dt1) {
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt2) {
					try {
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
						Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) { continue; }
				}
			}
			if (dataMovimento.equals("")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = "";
			
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			if (valorDocumento == 0) continue;

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

			nomeOrigem      = "";
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			
			//2401-026595 - nomeOrigem grande acontece quebra de coluna
			if(memFile.getFieldsSize() > 5){
				for(int i = inomeOrigem; i < ivalorDocumento; i++){
					if(i == inomeOrigem) nomeOrigem = "";
					nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(i);
				}
			}
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			// logger.logInfo("NOE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read XPInvestimentos PDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;

    boolean naoLeMais        = false;


    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= -1;
	int inomePortador	= -1;
	int inomeOrigem		= -1;
	int ivalorDocumento	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.startsWith("NAO HA LANCAMENTOS FUTUROS")) naoLeMais = true;

        if(naoLeMais) continue;
		
		//logger.logInfo("Line XPInvestimentos pdf -> "+line);
		
		idataMovimento	= 1;
		inomeOrigem		= 2;
		ivalorDocumento	= memFile.getFieldsSize() - 2;
        
		try {
            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
			if (dataString.equals("000000")) continue;
			try {
				Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
			} catch (Exception dt1) {
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt2) {
					try {
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
						Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) { continue; }
				}
			}
			if (dataMovimento.equals("")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = "";
			
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			if (valorDocumento == 0) continue;

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

			nomeOrigem      = "";
			
			nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			//logger.logInfo("LOG FIELD SIZE - " + memFile.getFieldsSize());
			if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem + 1).contains("R$") && memFile.getFieldsSize() > 5){
				//logger.logInfo("LOG FIELD SIZE - " + memFile.getFieldsSize());
				if(nomeOrigem.equals("")) continue;
				nomeOrigem = nomeOrigem + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem + 1).replaceAll("\"","").replaceAll("\\?","").trim();
				
			}
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			// logger.logInfo("NOE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);
			
			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}


public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento      =-1;
	int inomePortador	=-1;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 5;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            if (dataMovimento.equals("")) continue;

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
            complemento01   = "";
			complemento01   = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"","");

            if (!complemento01.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if ( complemento01.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            logger.logInfo("PORT - "+ nomePortador +" | DT - "+ dataMovimento +" | VD - "+ valorDocumento +" | DC - "+ debitoCredito);

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;

                }

                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

		} catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}


public HashMap readFaturaCartaoCredito_Itau_Excel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	JSONObject extratoEmpresa = new JSONObject();

	// Inicializacao de Variaveis
	String codEmpresa        = "";
	String nomeArquivo       = "";
	String nomeEmpresa       = "";
	String chaveExtrato      = "";
	String dataRunAuxiliar   = "";

	String documento         = "";
	String nomeOrigem        = "";
	String nomePortador      = "";
	String dataMovimento     = "";
	String dataLote          = "";
	String complemento01     = "";
	String complemento02     = "";
	String complemento03     = "";
	String complemento04     = "";
	String debitoCredito     = "";
	String cpfCnpj           = "";
	String historico         = "";
	String debitoCreditoAux  = "";
	String tipoLancamento    = "";
	String tipoPlanilha      = "";

	String strValorDocumento = "";
	String contLinhaExtrato  = "";
	String contLinhaTexto    = "";
	String consolidaClass    = "";
	String classificacao     = "";
	String chave             = "";
	String key               = "";
	String lote              = "";
	String nomeOrigemAux     = "";
	String dataAux			 = "";

	double valorDocumento    = 0.0;
	double valorJuros        = 0.0;
	double valorDesconto     = 0.0;
	double valorMulta        = 0.0;
	double valorPagamento    = 0.0;

	String dataMovimentoAux  = "";
	String anoData 			 = "";
	String tipo		         = "";

	boolean naoLeMais = false;

	int ivalorDocumento	= 10;
	int inomeOrigem     = 2;

	int cont = 0;

	 ttMovimentoPadrao ttMov2 = new ttMovimentoPadrao();

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("TIPOPLANILHA"))     tipoPlanilha = jDados.optString("TIPOPLANILHA");
	if(jDados.has("DATA"))          dataRunAuxiliar = jDados.optString("DATA");
	if(jDados.has("NOMEPORTADOR"))  nomePortador    = jDados.optString("NOMEPORTADOR");
	if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento = jDados.optString("TIPOLANCAMENTO");

	try {
		Date dt = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
		int datanum = Integer.parseInt(dataRunAuxiliar);
		Calendar calSerial = Calendar.getInstance();
		calSerial.setTime(dt);
		calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
		dataRunAuxiliar = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
	}catch (Exception dt2) {
	}

	try{
		dataMovimento = getCampoDate(dataRunAuxiliar);
	}catch(Exception e){
		logger.logInfo("ERRO AO CAPTURAR DATA");
	}

	
    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		memFile.setFieldSeparator("\\|");
		cont++;

		try {

			if(dataMovimento.equals("")) continue;

			if(memFile.getFieldsSize() == 1 && memFile.getStringFieldRemoveEspCharsUpper(0).contains(" - FINAL ")){
				complemento01 = memFile.getStringFieldRemoveEspCharsUpper(0);
				logger.logInfo("COMPLEMENTO 01 -> " + complemento01);
			}

			if(line.contains("DATA") && line.contains("DESCRICAO") && line.contains("VALOR")){
				naoLeMais = false;
				continue;
			}

			if(line.contains("RESUMO DA FATURA") || line.contains("TOTAL DE PRODUTOS, SERVICOS E ENCARGOS")) {
				naoLeMais = true;
			}

			if(line.contains("LANCAMENTOS NACIONAIS")){
				complemento02 = "LANCAMENTOS NACIONAIS";
			}

			if(line.contains("LANCAMENTOS INTERNACIONAIS")){
				complemento02 = "LANCAMENTOS INTERNACIONAIS";
			}

			if(line.contains("PRODUTOS, SERVICOS E ENCARGOS")){
				complemento02 = "PRODUTOS, SERVICOS E ENCARGOS";
			}

			if(naoLeMais) continue;

			try{
				valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));
			}catch(Exception e){
				valorDocumento = 0;
			}

			if(valorDocumento == 0) continue;

			nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

			if(line.contains("VALOR TOTAL FINANCIADO")) continue;

			//logger.logInfo("NOME ORIGEM -> " + nomeOrigem + " | VALOR DOCUMENTO -> " + valorDocumento + " | DATA MOVIMENTO -> " + dataMovimento);



			// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
			// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
			contLinhaTexto = String.valueOf(cont);
			contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
			consolidaClass = contLinhaTexto;

			classificacao = dataMovimento + "0" + consolidaClass;


			lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );
			chave = lote + contLinhaTexto;
			key = chave  + "-CTB";

			ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
			}
			ttMov2.lote             = lote;
			ttMov2.documento        = documento;
			ttMov2.codEmpresa       = codEmpresa;
			ttMov2.nomeEmpresa      = nomeEmpresa;
			ttMov2.dataMovimento    = dataMovimento;
			ttMov2.tipoMovimento    = "CTB";
			ttMov2.tipoLancamento   = tipoLancamento;
			ttMov2.historico        = "";
			ttMov2.valorDocumento   = valorDocumento;
			ttMov2.valorDesconto    = valorDesconto;
			ttMov2.valorMulta       = 0;
			ttMov2.valorJuros       = valorJuros;
			ttMov2.debitoCredito       = debitoCredito;
			ttMov2.contaJuros       = "";
			ttMov2.contaMulta       = "";
			ttMov2.contaDesconto    = "";
			ttMov2.nomePortador     = nomePortador;
			ttMov2.centroCusto      = "";
			ttMov2.nomeOrigem       = nomeOrigem;
			ttMov2.cpfCnpj          = cpfCnpj;
			ttMov2.chave            = chave + "-CTB";
			ttMov2.classificacao    = classificacao;
			ttMov2.tipoPlanilha     = tipoPlanilha;

			ttMov2.complemento01    = complemento01;
			ttMov2.complemento02    = complemento02;
			ttMov2.complemento03    = complemento03;
			ttMov2.complemento04    = complemento04;
			ttMov2.complemento05    = "";
			ttMov2.complemento06    = "";
			ttMov2.complemento07    = "";
			ttMov2.complemento08    = "";
			ttMov2.complemento09    = "";
			ttMov2.complemento10    = "";
			ttMov2.nomeArquivo      = nomeArquivo;
			ttMov2.naturezaContabil  = "D";
			ttMov2.contaDebito       = "";
			ttMov2.contaCredito      = "";
			mapaVariavel.put(key,ttMov2);

		} catch (Exception ex) {
		}

	}
	return mapaVariavel;
}

